[
  {
    "repo_name": "examples-for-data-scientists",
    "file_path": "Initiating Projects/Python/Starting a Binary Classification Project.ipynb",
    "file_name": "Starting a Binary Classification Project.ipynb",
    "file_type": "notebook",
    "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Starting a Binary Classification Project\\n\",\n    \"\\n\",\n    \"**Author**: Thodoris Petropoulos\\n\",\n    \"\\n\",\n    \"**Label**: Modeling Options\\n\",\n    \"### Scope\\n\",\n    \"The scope of this notebook is to provide instructions on how to initiate a DataRobot project for a Binary Classification target using the Python API.\\n\",\n    \"\\n\",\n    \"### Background\\n\",\n    \"Binary classification is the task of classifying the elements of a given set into two groups.\\n\",\n    \"\\n\",\n    \"Examples:\\n\",\n    \"\\n\",\n    \"- A customer is a churner or not.\\n\",\n    \"- A loan is going to default or not.\\n\",\n    \"- A patient has a disease or not.\\n\",\n    \"\\n\",\n    \"Most commonly, the target column will have values:\\n\",\n    \"\\n\",\n    \"- 0/1\\n\",\n    \"- Yes/No\\n\",\n    \"- True/False\\n\",\n    \"\\n\",\n    \"### Requirements\\n\",\n    \"\\n\",\n    \"- Python version 3.7.3\\n\",\n    \"-  DataRobot API version 2.19.0. \\n\",\n    \"Small adjustments might be needed depending on the Python version and DataRobot API version you are using.\\n\",\n    \"\\n\",\n    \"Full documentation of the Python package can be found here: https://datarobot-public-api-client.readthedocs-hosted.com\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Import Libraries\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 1,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import datarobot as dr\\n\",\n    \"import pandas as pd\\n\",\n    \"import numpy as np\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Import Dataset\\n\",\n    \"We will be loading the breast cancer dataset. A very simple binary classification dataset that is available through sk-learn.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>mean radius</th>\\n\",\n       \"      <th>mean texture</th>\\n\",\n       \"      <th>mean perimeter</th>\\n\",\n       \"      <th>mean area</th>\\n\",\n       \"      <th>mean smoothness</th>\\n\",\n       \"      <th>mean compactness</th>\\n\",\n       \"      <th>mean concavity</th>\\n\",\n       \"      <th>mean concave points</th>\\n\",\n       \"      <th>mean symmetry</th>\\n\",\n       \"      <th>mean fractal dimension</th>\\n\",\n       \"      <th>...</th>\\n\",\n       \"      <th>worst texture</th>\\n\",\n       \"      <th>worst perimeter</th>\\n\",\n       \"      <th>worst area</th>\\n\",\n       \"      <th>worst smoothness</th>\\n\",\n       \"      <th>worst compactness</th>\\n\",\n       \"      <th>worst concavity</th>\\n\",\n       \"      <th>worst concave points</th>\\n\",\n       \"      <th>worst symmetry</th>\\n\",\n       \"      <th>worst fractal dimension</th>\\n\",\n       \"      <th>target</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>17.99</td>\\n\",\n       \"      <td>10.38</td>\\n\",\n       \"      <td>122.80</td>\\n\",\n       \"      <td>1001.0</td>\\n\",\n       \"      <td>0.11840</td>\\n\",\n       \"      <td>0.27760</td>\\n\",\n       \"      <td>0.3001</td>\\n\",\n       \"      <td>0.14710</td>\\n\",\n       \"      <td>0.2419</td>\\n\",\n       \"      <td>0.07871</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>17.33</td>\\n\",\n       \"      <td>184.60</td>\\n\",\n       \"      <td>2019.0</td>\\n\",\n       \"      <td>0.1622</td>\\n\",\n       \"      <td>0.6656</td>\\n\",\n       \"      <td>0.7119</td>\\n\",\n       \"      <td>0.2654</td>\\n\",\n       \"      <td>0.4601</td>\\n\",\n       \"      <td>0.11890</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>20.57</td>\\n\",\n       \"      <td>17.77</td>\\n\",\n       \"      <td>132.90</td>\\n\",\n       \"      <td>1326.0</td>\\n\",\n       \"      <td>0.08474</td>\\n\",\n       \"      <td>0.07864</td>\\n\",\n       \"      <td>0.0869</td>\\n\",\n       \"      <td>0.07017</td>\\n\",\n       \"      <td>0.1812</td>\\n\",\n       \"      <td>0.05667</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>23.41</td>\\n\",\n       \"      <td>158.80</td>\\n\",\n       \"      <td>1956.0</td>\\n\",\n       \"      <td>0.1238</td>\\n\",\n       \"      <td>0.1866</td>\\n\",\n       \"      <td>0.2416</td>\\n\",\n       \"      <td>0.1860</td>\\n\",\n       \"      <td>0.2750</td>\\n\",\n       \"      <td>0.08902</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2</th>\\n\",\n       \"      <td>19.69</td>\\n\",\n       \"      <td>21.25</td>\\n\",\n       \"      <td>130.00</td>\\n\",\n       \"      <td>1203.0</td>\\n\",\n       \"      <td>0.10960</td>\\n\",\n       \"      <td>0.15990</td>\\n\",\n       \"      <td>0.1974</td>\\n\",\n       \"      <td>0.12790</td>\\n\",\n       \"      <td>0.2069</td>\\n\",\n       \"      <td>0.05999</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>25.53</td>\\n\",\n       \"      <td>152.50</td>\\n\",\n       \"      <td>1709.0</td>\\n\",\n       \"      <td>0.1444</td>\\n\",\n       \"      <td>0.4245</td>\\n\",\n       \"      <td>0.4504</td>\\n\",\n       \"      <td>0.2430</td>\\n\",\n       \"      <td>0.3613</td>\\n\",\n       \"      <td>0.08758</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>3</th>\\n\",\n       \"      <td>11.42</td>\\n\",\n       \"      <td>20.38</td>\\n\",\n       \"      <td>77.58</td>\\n\",\n       \"      <td>386.1</td>\\n\",\n       \"      <td>0.14250</td>\\n\",\n       \"      <td>0.28390</td>\\n\",\n       \"      <td>0.2414</td>\\n\",\n       \"      <td>0.10520</td>\\n\",\n       \"      <td>0.2597</td>\\n\",\n       \"      <td>0.09744</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>26.50</td>\\n\",\n       \"      <td>98.87</td>\\n\",\n       \"      <td>567.7</td>\\n\",\n       \"      <td>0.2098</td>\\n\",\n       \"      <td>0.8663</td>\\n\",\n       \"      <td>0.6869</td>\\n\",\n       \"      <td>0.2575</td>\\n\",\n       \"      <td>0.6638</td>\\n\",\n       \"      <td>0.17300</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>4</th>\\n\",\n       \"      <td>20.29</td>\\n\",\n       \"      <td>14.34</td>\\n\",\n       \"      <td>135.10</td>\\n\",\n       \"      <td>1297.0</td>\\n\",\n       \"      <td>0.10030</td>\\n\",\n       \"      <td>0.13280</td>\\n\",\n       \"      <td>0.1980</td>\\n\",\n       \"      <td>0.10430</td>\\n\",\n       \"      <td>0.1809</td>\\n\",\n       \"      <td>0.05883</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>16.67</td>\\n\",\n       \"      <td>152.20</td>\\n\",\n       \"      <td>1575.0</td>\\n\",\n       \"      <td>0.1374</td>\\n\",\n       \"      <td>0.2050</td>\\n\",\n       \"      <td>0.4000</td>\\n\",\n       \"      <td>0.1625</td>\\n\",\n       \"      <td>0.2364</td>\\n\",\n       \"      <td>0.07678</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"<p>5 rows × 31 columns</p>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"   mean radius  mean texture  mean perimeter  mean area  mean smoothness  \\\\\\n\",\n       \"0        17.99         10.38          122.80     1001.0          0.11840   \\n\",\n       \"1        20.57         17.77          132.90     1326.0          0.08474   \\n\",\n       \"2        19.69         21.25          130.00     1203.0          0.10960   \\n\",\n       \"3        11.42         20.38           77.58      386.1          0.14250   \\n\",\n       \"4        20.29         14.34          135.10     1297.0          0.10030   \\n\",\n       \"\\n\",\n       \"   mean compactness  mean concavity  mean concave points  mean symmetry  \\\\\\n\",\n       \"0           0.27760          0.3001              0.14710         0.2419   \\n\",\n       \"1           0.07864          0.0869              0.07017         0.1812   \\n\",\n       \"2           0.15990          0.1974              0.12790         0.2069   \\n\",\n       \"3           0.28390          0.2414              0.10520         0.2597   \\n\",\n       \"4           0.13280          0.1980              0.10430         0.1809   \\n\",\n       \"\\n\",\n       \"   mean fractal dimension   ...    worst texture  worst perimeter  worst area  \\\\\\n\",\n       \"0                 0.07871   ...            17.33           184.60      2019.0   \\n\",\n       \"1                 0.05667   ...            23.41           158.80      1956.0   \\n\",\n       \"2                 0.05999   ...            25.53           152.50      1709.0   \\n\",\n       \"3                 0.09744   ...            26.50            98.87       567.7   \\n\",\n       \"4                 0.05883   ...            16.67           152.20      1575.0   \\n\",\n       \"\\n\",\n       \"   worst smoothness  worst compactness  worst concavity  worst concave points  \\\\\\n\",\n       \"0            0.1622             0.6656           0.7119                0.2654   \\n\",\n       \"1            0.1238             0.1866           0.2416                0.1860   \\n\",\n       \"2            0.1444             0.4245           0.4504                0.2430   \\n\",\n       \"3            0.2098             0.8663           0.6869                0.2575   \\n\",\n       \"4            0.1374             0.2050           0.4000                0.1625   \\n\",\n       \"\\n\",\n       \"   worst symmetry  worst fractal dimension  target  \\n\",\n       \"0          0.4601                  0.11890     0.0  \\n\",\n       \"1          0.2750                  0.08902     0.0  \\n\",\n       \"2          0.3613                  0.08758     0.0  \\n\",\n       \"3          0.6638                  0.17300     0.0  \\n\",\n       \"4          0.2364                  0.07678     0.0  \\n\",\n       \"\\n\",\n       \"[5 rows x 31 columns]\"\n      ]\n     },\n     \"execution_count\": 2,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"from sklearn.datasets import load_breast_cancer\\n\",\n    \"data = load_breast_cancer()\\n\",\n    \"\\n\",\n    \"df = pd.DataFrame(np.c_[data['data'], data['target']],\\n\",\n    \"                  columns= np.append(data['feature_names'], ['target']))\\n\",\n    \"df.head()\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Connect to DataRobot\\n\",\n    \"Connect to DataRobot using your credentials and your endpoint. Change input below accordingly.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"dr.Client(token='YOUR_API_KEY', \\n\",\n    \"          endpoint='YOUR_DATAROBOT_HOSTNAME')\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Initiate Project\\n\",\n    \"I will be initiating a project calling the method <code>dr.Project.start</code>:\\n\",\n    \"* project_name: Name of project\\n\",\n    \"* source_data: Data source (Path to file or pandas dataframe)\\n\",\n    \"* target: String with target variable name\\n\",\n    \"* worker_count: Amount of workers to use\\n\",\n    \"* metric: Optimisation metric to use\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"project = dr.Project.start(project_name='MyBinaryClassificationProject',\\n\",\n    \"                        sourcedata= df,\\n\",\n    \"                        target='target')\\n\",\n    \"\\n\",\n    \"project.wait_for_autopilot() #Wait for autopilot to complete\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.7.3\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n",
    "url": "https://github.com/datarobot-community/examples-for-data-scientists/blob/master/Initiating%20Projects/Python/Starting%20a%20Binary%20Classification%20Project.ipynb",
    "size": 12194,
    "description": "Jupyter notebook: Starting a Binary Classification Project",
    "tags": [
      "classification"
    ]
  },
  {
    "repo_name": "examples-for-data-scientists",
    "file_path": "Initiating Projects/Python/Starting a Multiclass Classification Project.ipynb",
    "file_name": "Starting a Multiclass Classification Project.ipynb",
    "file_type": "notebook",
    "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Starting a Multiclass Classification Project\\n\",\n    \"\\n\",\n    \"**Author**: Thodoris Petropoulos\\n\",\n    \"\\n\",\n    \"**Label**: Modeling Options\\n\",\n    \"### Scope\\n\",\n    \"The scope of this notebook is to provide instructions on how to initiate a DataRobot project for a Multiclass Classification target using the Python API.\\n\",\n    \"\\n\",\n    \"### Background\\n\",\n    \"Multiclass classification is the task of classifying the elements of a given set into more than two groups.\\n\",\n    \"\\n\",\n    \"Examples:\\n\",\n    \"\\n\",\n    \"- A customer would be more interested in one of A,B,C,D... products.\\n\",\n    \"- A patient has one of A,B,C,D... diseases.\\n\",\n    \"- A customer would have a higher propensity to respond to one of A,B,C,D... campaigns.\\n\",\n    \"\\n\",\n    \"Most commonly, the target column will have values:\\n\",\n    \"\\n\",\n    \"- AAA/BBB/CCC/...(example text)\\n\",\n    \"- 0/1/2/3/4/...\\n\",\n    \"\\n\",\n    \"### Requirements\\n\",\n    \"\\n\",\n    \"- Python version 3.7.3\\n\",\n    \"-  DataRobot API version 2.19.0. \\n\",\n    \"Small adjustments might be needed depending on the Python version and DataRobot API version you are using.\\n\",\n    \"\\n\",\n    \"Full documentation of the Python package can be found here: https://datarobot-public-api-client.readthedocs-hosted.com\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Import Libraries\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 1,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import datarobot as dr\\n\",\n    \"import pandas as pd\\n\",\n    \"import numpy as np\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Import Dataset\\n\",\n    \"We will be loading the iris dataset. A very simple Multiclass classification dataset that is available through sk-learn.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>sepal length (cm)</th>\\n\",\n       \"      <th>sepal width (cm)</th>\\n\",\n       \"      <th>petal length (cm)</th>\\n\",\n       \"      <th>petal width (cm)</th>\\n\",\n       \"      <th>target</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>5.1</td>\\n\",\n       \"      <td>3.5</td>\\n\",\n       \"      <td>1.4</td>\\n\",\n       \"      <td>0.2</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>4.9</td>\\n\",\n       \"      <td>3.0</td>\\n\",\n       \"      <td>1.4</td>\\n\",\n       \"      <td>0.2</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2</th>\\n\",\n       \"      <td>4.7</td>\\n\",\n       \"      <td>3.2</td>\\n\",\n       \"      <td>1.3</td>\\n\",\n       \"      <td>0.2</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>3</th>\\n\",\n       \"      <td>4.6</td>\\n\",\n       \"      <td>3.1</td>\\n\",\n       \"      <td>1.5</td>\\n\",\n       \"      <td>0.2</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>4</th>\\n\",\n       \"      <td>5.0</td>\\n\",\n       \"      <td>3.6</td>\\n\",\n       \"      <td>1.4</td>\\n\",\n       \"      <td>0.2</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"   sepal length (cm)  sepal width (cm)  petal length (cm)  petal width (cm)  \\\\\\n\",\n       \"0                5.1               3.5                1.4               0.2   \\n\",\n       \"1                4.9               3.0                1.4               0.2   \\n\",\n       \"2                4.7               3.2                1.3               0.2   \\n\",\n       \"3                4.6               3.1                1.5               0.2   \\n\",\n       \"4                5.0               3.6                1.4               0.2   \\n\",\n       \"\\n\",\n       \"   target  \\n\",\n       \"0     0.0  \\n\",\n       \"1     0.0  \\n\",\n       \"2     0.0  \\n\",\n       \"3     0.0  \\n\",\n       \"4     0.0  \"\n      ]\n     },\n     \"execution_count\": 2,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"from sklearn.datasets import load_iris\\n\",\n    \"data = load_iris()\\n\",\n    \"\\n\",\n    \"df = pd.DataFrame(np.c_[data['data'], data['target']],\\n\",\n    \"                  columns= np.append(data['feature_names'], ['target']))\\n\",\n    \"df.head()\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Connect to DataRobot\\n\",\n    \"Connect to DataRobot using your credentials and your endpoint. Change input below accordingly.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"dr.Client(token='YOUR_API_KEY}', \\n\",\n    \"          endpoint='YOUR_DATAROBOT_HOSTNAME')\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Initiate Project\\n\",\n    \"I will be initiating a project calling the method <code>dr.Project.start</code>:\\n\",\n    \"* project_name: Name of project\\n\",\n    \"* source_data: Data source (Path to file or pandas dataframe)\\n\",\n    \"* target: String with target variable name\\n\",\n    \"* worker_count: Amount of workers to use\\n\",\n    \"* metric: Optimization metric to use\\n\",\n    \"\\n\",\n    \"If your target is categorical and has a cardinality of up to 10, we will automatically select a Multiclass target_type and that argument is not needed when calling Project.start. However, if the target is numerical and you would like to force it to be seen as a Multiclass project in DataRobot, you can specify the target_type as seen below:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"project = dr.Project.start(project_name='MyMulticlassClassificationProject',\\n\",\n    \"                        sourcedata= df,\\n\",\n    \"                        target='target',\\n\",\n    \"                        target_type = dr.enums.TARGET_TYPE.MULTICLASS)\\n\",\n    \"\\n\",\n    \"project.wait_for_autopilot() #Wait for autopilot to complete\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.7.3\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n",
    "url": "https://github.com/datarobot-community/examples-for-data-scientists/blob/master/Initiating%20Projects/Python/Starting%20a%20Multiclass%20Classification%20Project.ipynb",
    "size": 7306,
    "description": "Jupyter notebook: Starting a Multiclass Classification Project",
    "tags": [
      "classification"
    ]
  },
  {
    "repo_name": "examples-for-data-scientists",
    "file_path": "Initiating Projects/Python/Starting a Project with Selected Blueprints.ipynb",
    "file_name": "Starting a Project with Selected Blueprints.ipynb",
    "file_type": "notebook",
    "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Starting a Project with Selected Blueprints\\n\",\n    \"\\n\",\n    \"**Author**: Thodoris Petropoulos\\n\",\n    \"\\n\",\n    \"**Label**: Modeling Options\\n\",\n    \"\\n\",\n    \"### Scope\\n\",\n    \"The scope of this notebook is to provide instructions on how to initiate a DataRobot project manually where the user has the option to choose which models/blueprints he wants to initiate. The procedure below should work for any type of problem you are trying to solve (regression, classification, time series, etc).\\n\",\n    \"\\n\",\n    \"### Requirements\\n\",\n    \"\\n\",\n    \"- Python version 3.7.3\\n\",\n    \"-  DataRobot API version 2.19.0. \\n\",\n    \"Small adjustments might be needed depending on the Python version and DataRobot API version you are using.\\n\",\n    \"\\n\",\n    \"Full documentation of the Python package can be found here: https://datarobot-public-api-client.readthedocs-hosted.com\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Import Libraries\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 27,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import datarobot as dr\\n\",\n    \"import pandas as pd\\n\",\n    \"import numpy as np\\n\",\n    \"import time\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Import Dataset\\n\",\n    \"We will be loading the breast cancer dataset. A very simple binary classification dataset that is available through sk-learn.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>mean radius</th>\\n\",\n       \"      <th>mean texture</th>\\n\",\n       \"      <th>mean perimeter</th>\\n\",\n       \"      <th>mean area</th>\\n\",\n       \"      <th>mean smoothness</th>\\n\",\n       \"      <th>mean compactness</th>\\n\",\n       \"      <th>mean concavity</th>\\n\",\n       \"      <th>mean concave points</th>\\n\",\n       \"      <th>mean symmetry</th>\\n\",\n       \"      <th>mean fractal dimension</th>\\n\",\n       \"      <th>...</th>\\n\",\n       \"      <th>worst texture</th>\\n\",\n       \"      <th>worst perimeter</th>\\n\",\n       \"      <th>worst area</th>\\n\",\n       \"      <th>worst smoothness</th>\\n\",\n       \"      <th>worst compactness</th>\\n\",\n       \"      <th>worst concavity</th>\\n\",\n       \"      <th>worst concave points</th>\\n\",\n       \"      <th>worst symmetry</th>\\n\",\n       \"      <th>worst fractal dimension</th>\\n\",\n       \"      <th>target</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>17.99</td>\\n\",\n       \"      <td>10.38</td>\\n\",\n       \"      <td>122.80</td>\\n\",\n       \"      <td>1001.0</td>\\n\",\n       \"      <td>0.11840</td>\\n\",\n       \"      <td>0.27760</td>\\n\",\n       \"      <td>0.3001</td>\\n\",\n       \"      <td>0.14710</td>\\n\",\n       \"      <td>0.2419</td>\\n\",\n       \"      <td>0.07871</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>17.33</td>\\n\",\n       \"      <td>184.60</td>\\n\",\n       \"      <td>2019.0</td>\\n\",\n       \"      <td>0.1622</td>\\n\",\n       \"      <td>0.6656</td>\\n\",\n       \"      <td>0.7119</td>\\n\",\n       \"      <td>0.2654</td>\\n\",\n       \"      <td>0.4601</td>\\n\",\n       \"      <td>0.11890</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>20.57</td>\\n\",\n       \"      <td>17.77</td>\\n\",\n       \"      <td>132.90</td>\\n\",\n       \"      <td>1326.0</td>\\n\",\n       \"      <td>0.08474</td>\\n\",\n       \"      <td>0.07864</td>\\n\",\n       \"      <td>0.0869</td>\\n\",\n       \"      <td>0.07017</td>\\n\",\n       \"      <td>0.1812</td>\\n\",\n       \"      <td>0.05667</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>23.41</td>\\n\",\n       \"      <td>158.80</td>\\n\",\n       \"      <td>1956.0</td>\\n\",\n       \"      <td>0.1238</td>\\n\",\n       \"      <td>0.1866</td>\\n\",\n       \"      <td>0.2416</td>\\n\",\n       \"      <td>0.1860</td>\\n\",\n       \"      <td>0.2750</td>\\n\",\n       \"      <td>0.08902</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2</th>\\n\",\n       \"      <td>19.69</td>\\n\",\n       \"      <td>21.25</td>\\n\",\n       \"      <td>130.00</td>\\n\",\n       \"      <td>1203.0</td>\\n\",\n       \"      <td>0.10960</td>\\n\",\n       \"      <td>0.15990</td>\\n\",\n       \"      <td>0.1974</td>\\n\",\n       \"      <td>0.12790</td>\\n\",\n       \"      <td>0.2069</td>\\n\",\n       \"      <td>0.05999</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>25.53</td>\\n\",\n       \"      <td>152.50</td>\\n\",\n       \"      <td>1709.0</td>\\n\",\n       \"      <td>0.1444</td>\\n\",\n       \"      <td>0.4245</td>\\n\",\n       \"      <td>0.4504</td>\\n\",\n       \"      <td>0.2430</td>\\n\",\n       \"      <td>0.3613</td>\\n\",\n       \"      <td>0.08758</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>3</th>\\n\",\n       \"      <td>11.42</td>\\n\",\n       \"      <td>20.38</td>\\n\",\n       \"      <td>77.58</td>\\n\",\n       \"      <td>386.1</td>\\n\",\n       \"      <td>0.14250</td>\\n\",\n       \"      <td>0.28390</td>\\n\",\n       \"      <td>0.2414</td>\\n\",\n       \"      <td>0.10520</td>\\n\",\n       \"      <td>0.2597</td>\\n\",\n       \"      <td>0.09744</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>26.50</td>\\n\",\n       \"      <td>98.87</td>\\n\",\n       \"      <td>567.7</td>\\n\",\n       \"      <td>0.2098</td>\\n\",\n       \"      <td>0.8663</td>\\n\",\n       \"      <td>0.6869</td>\\n\",\n       \"      <td>0.2575</td>\\n\",\n       \"      <td>0.6638</td>\\n\",\n       \"      <td>0.17300</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>4</th>\\n\",\n       \"      <td>20.29</td>\\n\",\n       \"      <td>14.34</td>\\n\",\n       \"      <td>135.10</td>\\n\",\n       \"      <td>1297.0</td>\\n\",\n       \"      <td>0.10030</td>\\n\",\n       \"      <td>0.13280</td>\\n\",\n       \"      <td>0.1980</td>\\n\",\n       \"      <td>0.10430</td>\\n\",\n       \"      <td>0.1809</td>\\n\",\n       \"      <td>0.05883</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>16.67</td>\\n\",\n       \"      <td>152.20</td>\\n\",\n       \"      <td>1575.0</td>\\n\",\n       \"      <td>0.1374</td>\\n\",\n       \"      <td>0.2050</td>\\n\",\n       \"      <td>0.4000</td>\\n\",\n       \"      <td>0.1625</td>\\n\",\n       \"      <td>0.2364</td>\\n\",\n       \"      <td>0.07678</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"<p>5 rows × 31 columns</p>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"   mean radius  mean texture  mean perimeter  mean area  mean smoothness  \\\\\\n\",\n       \"0        17.99         10.38          122.80     1001.0          0.11840   \\n\",\n       \"1        20.57         17.77          132.90     1326.0          0.08474   \\n\",\n       \"2        19.69         21.25          130.00     1203.0          0.10960   \\n\",\n       \"3        11.42         20.38           77.58      386.1          0.14250   \\n\",\n       \"4        20.29         14.34          135.10     1297.0          0.10030   \\n\",\n       \"\\n\",\n       \"   mean compactness  mean concavity  mean concave points  mean symmetry  \\\\\\n\",\n       \"0           0.27760          0.3001              0.14710         0.2419   \\n\",\n       \"1           0.07864          0.0869              0.07017         0.1812   \\n\",\n       \"2           0.15990          0.1974              0.12790         0.2069   \\n\",\n       \"3           0.28390          0.2414              0.10520         0.2597   \\n\",\n       \"4           0.13280          0.1980              0.10430         0.1809   \\n\",\n       \"\\n\",\n       \"   mean fractal dimension   ...    worst texture  worst perimeter  worst area  \\\\\\n\",\n       \"0                 0.07871   ...            17.33           184.60      2019.0   \\n\",\n       \"1                 0.05667   ...            23.41           158.80      1956.0   \\n\",\n       \"2                 0.05999   ...            25.53           152.50      1709.0   \\n\",\n       \"3                 0.09744   ...            26.50            98.87       567.7   \\n\",\n       \"4                 0.05883   ...            16.67           152.20      1575.0   \\n\",\n       \"\\n\",\n       \"   worst smoothness  worst compactness  worst concavity  worst concave points  \\\\\\n\",\n       \"0            0.1622             0.6656           0.7119                0.2654   \\n\",\n       \"1            0.1238             0.1866           0.2416                0.1860   \\n\",\n       \"2            0.1444             0.4245           0.4504                0.2430   \\n\",\n       \"3            0.2098             0.8663           0.6869                0.2575   \\n\",\n       \"4            0.1374             0.2050           0.4000                0.1625   \\n\",\n       \"\\n\",\n       \"   worst symmetry  worst fractal dimension  target  \\n\",\n       \"0          0.4601                  0.11890     0.0  \\n\",\n       \"1          0.2750                  0.08902     0.0  \\n\",\n       \"2          0.3613                  0.08758     0.0  \\n\",\n       \"3          0.6638                  0.17300     0.0  \\n\",\n       \"4          0.2364                  0.07678     0.0  \\n\",\n       \"\\n\",\n       \"[5 rows x 31 columns]\"\n      ]\n     },\n     \"execution_count\": 2,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"from sklearn.datasets import load_breast_cancer\\n\",\n    \"data = load_breast_cancer()\\n\",\n    \"\\n\",\n    \"df = pd.DataFrame(np.c_[data['data'], data['target']],\\n\",\n    \"                  columns= np.append(data['feature_names'], ['target']))\\n\",\n    \"df.head()\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Connect to DataRobot\\n\",\n    \"Connect to DataRobot using your credentials and your endpoint. Change input below accordingly.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 3,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"<datarobot.rest.RESTClientObject at 0x11fc81cf8>\"\n      ]\n     },\n     \"execution_count\": 3,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"dr.Client(token='YOUR_API_KEY', \\n\",\n    \"          endpoint='YOUR_DATAROBOT_HOSTNAME')\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Initiate project\\n\",\n    \"We will be initiating the project using <code>autopilot_on = False</code>. This way DataRobot will not start building models until we specify which ones we want to build\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 4,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"project = dr.Project.start(project_name='MyBinaryClassificationProject',\\n\",\n    \"                        sourcedata= df,\\n\",\n    \"                        autopilot_on = False,\\n\",\n    \"                        target='target')\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Find all of the blueprints\\n\",\n    \"We can use the <code>get_blueprints</code> method to see all of the blueprints DataRobot generated.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 22,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"blueprints = project.get_blueprints()\\n\",\n    \"\\n\",\n    \"#Now that we have the Blueprints, we can search for a specific blueprint. \\n\",\n    \"#For example all models that have \\\"Gradient\\\" in their name\\n\",\n    \"\\n\",\n    \"models_to_run = []\\n\",\n    \"for blueprint in blueprints:\\n\",\n    \"    if 'Gradient' in blueprint.model_type:\\n\",\n    \"        models_to_run.append(blueprint)\\n\",\n    \"        \"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 23,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"[Blueprint(Gradient Boosted Trees Classifier),\\n\",\n       \" Blueprint(Stochastic Gradient Descent Classifier),\\n\",\n       \" Blueprint(Light Gradient Boosted Trees Classifier with Early Stopping),\\n\",\n       \" Blueprint(Gradient Boosted Greedy Trees Classifier),\\n\",\n       \" Blueprint(eXtreme Gradient Boosted Trees Classifier with Early Stopping),\\n\",\n       \" Blueprint(eXtreme Gradient Boosted Trees Classifier),\\n\",\n       \" Blueprint(eXtreme Gradient Boosted Trees Classifier (learning rate =0.01)),\\n\",\n       \" Blueprint(Light Gradient Boosting on ElasticNet Predictions ),\\n\",\n       \" Blueprint(eXtreme Gradient Boosted Trees Classifier),\\n\",\n       \" Blueprint(eXtreme Gradient Boosted Trees Classifier (learning rate =0.01)),\\n\",\n       \" Blueprint(eXtreme Gradient Boosted Trees Classifier (learning rate =0.01)),\\n\",\n       \" Blueprint(eXtreme Gradient Boosted Trees Classifier with Unsupervised Learning Features),\\n\",\n       \" Blueprint(eXtreme Gradient Boosted Trees Classifier),\\n\",\n       \" Blueprint(eXtreme Gradient Boosted Trees Classifier with Early Stopping),\\n\",\n       \" Blueprint(Gradient Boosted Trees Classifier),\\n\",\n       \" Blueprint(eXtreme Gradient Boosted Trees Classifier with Early Stopping - Forest (10x))]\"\n      ]\n     },\n     \"execution_count\": 23,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"models_to_run\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Lets now initiate these models\\n\",\n    \"We can use the <code>train</code> method to initiate modeling for a specific blueprint. By default, the feature list used will be the <code>informative features </code> list produced by DataRobot but you can define your own feature list and pass it on the <code>featurelist_id</code> variable.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 24,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"for model in models_to_run:\\n\",\n    \"    project.train(model, sample_pct = 80, featurelist_id=None)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Waiting for job completion\\n\",\n    \"We can use the <code>get_all_jobs</code> method to wait for the models to finish running\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 28,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"while len(project.get_all_jobs()) > 0:\\n\",\n    \"    time.sleep(1)\\n\",\n    \"    pass\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.7.3\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n",
    "url": "https://github.com/datarobot-community/examples-for-data-scientists/blob/master/Initiating%20Projects/Python/Starting%20a%20Project%20with%20Selected%20Blueprints.ipynb",
    "size": 15309,
    "description": "Jupyter notebook: Starting a Project with Selected Blueprints",
    "tags": []
  },
  {
    "repo_name": "examples-for-data-scientists",
    "file_path": "Initiating Projects/Python/Starting a Regression Project.ipynb",
    "file_name": "Starting a Regression Project.ipynb",
    "file_type": "notebook",
    "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Starting a Regression Project\\n\",\n    \"\\n\",\n    \"**Author**: Thodoris Petropoulos\\n\",\n    \"\\n\",\n    \"**Label**: Modeling Options\\n\",\n    \"### Scope\\n\",\n    \"The scope of this notebook is to provide instructions on how to initiate a DataRobot project for a numerical target using the R API.\\n\",\n    \"\\n\",\n    \"### Background\\n\",\n    \"Regression Analysis is the task of predicting the value of a continuous target column.\\n\",\n    \"\\n\",\n    \"Examples:\\n\",\n    \"\\n\",\n    \"- Predict Life Time Value (LTV) of customer.\\n\",\n    \"- Predicting player performance.\\n\",\n    \"- Predicting house price.\\n\",\n    \"\\n\",\n    \"The target column will always be a continuous numeric variable even though regression could also be applicable a discreet high cardinality variable.\\n\",\n    \"\\n\",\n    \"### Requirements\\n\",\n    \"\\n\",\n    \"- Python version 3.7.3\\n\",\n    \"-  DataRobot API version 2.19.0. \\n\",\n    \"Small adjustments might be needed depending on the Python version and DataRobot API version you are using.\\n\",\n    \"\\n\",\n    \"Full documentation of the Python package can be found here: https://datarobot-public-api-client.readthedocs-hosted.com\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Import Libraries\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 1,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import datarobot as dr\\n\",\n    \"import pandas as pd\\n\",\n    \"import numpy as np\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Import Dataset\\n\",\n    \"We will be loading the Boston Housing dataset. A very simple dataset for regression that is available through sk-learn.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>CRIM</th>\\n\",\n       \"      <th>ZN</th>\\n\",\n       \"      <th>INDUS</th>\\n\",\n       \"      <th>CHAS</th>\\n\",\n       \"      <th>NOX</th>\\n\",\n       \"      <th>RM</th>\\n\",\n       \"      <th>AGE</th>\\n\",\n       \"      <th>DIS</th>\\n\",\n       \"      <th>RAD</th>\\n\",\n       \"      <th>TAX</th>\\n\",\n       \"      <th>PTRATIO</th>\\n\",\n       \"      <th>B</th>\\n\",\n       \"      <th>LSTAT</th>\\n\",\n       \"      <th>target</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>0.00632</td>\\n\",\n       \"      <td>18.0</td>\\n\",\n       \"      <td>2.31</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"      <td>0.538</td>\\n\",\n       \"      <td>6.575</td>\\n\",\n       \"      <td>65.2</td>\\n\",\n       \"      <td>4.0900</td>\\n\",\n       \"      <td>1.0</td>\\n\",\n       \"      <td>296.0</td>\\n\",\n       \"      <td>15.3</td>\\n\",\n       \"      <td>396.90</td>\\n\",\n       \"      <td>4.98</td>\\n\",\n       \"      <td>24.0</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>0.02731</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"      <td>7.07</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"      <td>0.469</td>\\n\",\n       \"      <td>6.421</td>\\n\",\n       \"      <td>78.9</td>\\n\",\n       \"      <td>4.9671</td>\\n\",\n       \"      <td>2.0</td>\\n\",\n       \"      <td>242.0</td>\\n\",\n       \"      <td>17.8</td>\\n\",\n       \"      <td>396.90</td>\\n\",\n       \"      <td>9.14</td>\\n\",\n       \"      <td>21.6</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2</th>\\n\",\n       \"      <td>0.02729</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"      <td>7.07</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"      <td>0.469</td>\\n\",\n       \"      <td>7.185</td>\\n\",\n       \"      <td>61.1</td>\\n\",\n       \"      <td>4.9671</td>\\n\",\n       \"      <td>2.0</td>\\n\",\n       \"      <td>242.0</td>\\n\",\n       \"      <td>17.8</td>\\n\",\n       \"      <td>392.83</td>\\n\",\n       \"      <td>4.03</td>\\n\",\n       \"      <td>34.7</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>3</th>\\n\",\n       \"      <td>0.03237</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"      <td>2.18</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"      <td>0.458</td>\\n\",\n       \"      <td>6.998</td>\\n\",\n       \"      <td>45.8</td>\\n\",\n       \"      <td>6.0622</td>\\n\",\n       \"      <td>3.0</td>\\n\",\n       \"      <td>222.0</td>\\n\",\n       \"      <td>18.7</td>\\n\",\n       \"      <td>394.63</td>\\n\",\n       \"      <td>2.94</td>\\n\",\n       \"      <td>33.4</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>4</th>\\n\",\n       \"      <td>0.06905</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"      <td>2.18</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"      <td>0.458</td>\\n\",\n       \"      <td>7.147</td>\\n\",\n       \"      <td>54.2</td>\\n\",\n       \"      <td>6.0622</td>\\n\",\n       \"      <td>3.0</td>\\n\",\n       \"      <td>222.0</td>\\n\",\n       \"      <td>18.7</td>\\n\",\n       \"      <td>396.90</td>\\n\",\n       \"      <td>5.33</td>\\n\",\n       \"      <td>36.2</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"      CRIM    ZN  INDUS  CHAS    NOX     RM   AGE     DIS  RAD    TAX  \\\\\\n\",\n       \"0  0.00632  18.0   2.31   0.0  0.538  6.575  65.2  4.0900  1.0  296.0   \\n\",\n       \"1  0.02731   0.0   7.07   0.0  0.469  6.421  78.9  4.9671  2.0  242.0   \\n\",\n       \"2  0.02729   0.0   7.07   0.0  0.469  7.185  61.1  4.9671  2.0  242.0   \\n\",\n       \"3  0.03237   0.0   2.18   0.0  0.458  6.998  45.8  6.0622  3.0  222.0   \\n\",\n       \"4  0.06905   0.0   2.18   0.0  0.458  7.147  54.2  6.0622  3.0  222.0   \\n\",\n       \"\\n\",\n       \"   PTRATIO       B  LSTAT  target  \\n\",\n       \"0     15.3  396.90   4.98    24.0  \\n\",\n       \"1     17.8  396.90   9.14    21.6  \\n\",\n       \"2     17.8  392.83   4.03    34.7  \\n\",\n       \"3     18.7  394.63   2.94    33.4  \\n\",\n       \"4     18.7  396.90   5.33    36.2  \"\n      ]\n     },\n     \"execution_count\": 2,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"from sklearn.datasets import load_boston\\n\",\n    \"data = load_boston()\\n\",\n    \"\\n\",\n    \"df = pd.DataFrame(np.c_[data['data'], data['target']],\\n\",\n    \"                  columns= np.append(data['feature_names'], ['target']))\\n\",\n    \"df.head()\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Connect to DataRobot\\n\",\n    \"Connect to DataRobot using your credentials and your endpoint. Change input below accordingly.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"dr.Client(token='YOUR_API_KEY', \\n\",\n    \"          endpoint='YOUR_DATAROBOT_HOSTNAME')\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Initiate Project\\n\",\n    \"I will be initiating a project calling the method <code>dr.Project.start</code>:\\n\",\n    \"* project_name: Name of project\\n\",\n    \"* source_data: Data source (Path to file or pandas dataframe)\\n\",\n    \"* target: String with target variable name\\n\",\n    \"* worker_count: Amount of workers to use\\n\",\n    \"* metric: Optimisation metric to use\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"project = dr.Project.start(project_name='MyRegressionProject',\\n\",\n    \"                        sourcedata= df,\\n\",\n    \"                        target='target')\\n\",\n    \"project.wait_for_autopilot() #Wait for autopilot to complete\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.7.3\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n",
    "url": "https://github.com/datarobot-community/examples-for-data-scientists/blob/master/Initiating%20Projects/Python/Starting%20a%20Regression%20Project.ipynb",
    "size": 8552,
    "description": "Jupyter notebook: Starting a Regression Project",
    "tags": [
      "regression"
    ]
  },
  {
    "repo_name": "examples-for-data-scientists",
    "file_path": "Initiating Projects/Python/Starting a Time Series Project.ipynb",
    "file_name": "Starting a Time Series Project.ipynb",
    "file_type": "notebook",
    "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Starting a Time Series Project\\n\",\n    \"\\n\",\n    \"**Author**: Thodoris Petropoulos\\n\",\n    \"\\n\",\n    \"**Label**: Modeling Options\\n\",\n    \"\\n\",\n    \"### Scope\\n\",\n    \"The scope of this notebook is to provide instructions on how to initiate a DataRobot project for a Time Series problem using the R API. This notebook also covers calendars and feature settings for time series projects.\\n\",\n    \"\\n\",\n    \"### Background\\n\",\n    \"Time series modeling is the use of a machine learning model to predict future values of the target column based on previously observed values.\\n\",\n    \"\\n\",\n    \"Examples:\\n\",\n    \"\\n\",\n    \"- Demand Forecasting\\n\",\n    \"- Staffing\\n\",\n    \"- Sales Forecast\\n\",\n    \"\\n\",\n    \"### Requirements\\n\",\n    \"\\n\",\n    \"- Python version 3.7.3\\n\",\n    \"-  DataRobot API version 2.19.0. \\n\",\n    \"Small adjustments might be needed depending on the Python version and DataRobot API version you are using.\\n\",\n    \"\\n\",\n    \"Full documentation of the Python package can be found here: https://datarobot-public-api-client.readthedocs-hosted.com\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Import Libraries\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 1,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import datarobot as dr\\n\",\n    \"import pandas as pd\\n\",\n    \"import numpy as np\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Dataset\\n\",\n    \"For this tutorial, we are going to generate some simple time series data.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>date</th>\\n\",\n       \"      <th>target</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>2020-01-01 00:00:00</td>\\n\",\n       \"      <td>2.210569</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>2020-01-01 00:01:00</td>\\n\",\n       \"      <td>0.257881</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2</th>\\n\",\n       \"      <td>2020-01-01 00:02:00</td>\\n\",\n       \"      <td>-0.397363</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>3</th>\\n\",\n       \"      <td>2020-01-01 00:03:00</td>\\n\",\n       \"      <td>0.242060</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>4</th>\\n\",\n       \"      <td>2020-01-01 00:04:00</td>\\n\",\n       \"      <td>0.160361</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"                 date    target\\n\",\n       \"0 2020-01-01 00:00:00  2.210569\\n\",\n       \"1 2020-01-01 00:01:00  0.257881\\n\",\n       \"2 2020-01-01 00:02:00 -0.397363\\n\",\n       \"3 2020-01-01 00:03:00  0.242060\\n\",\n       \"4 2020-01-01 00:04:00  0.160361\"\n      ]\n     },\n     \"execution_count\": 2,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"intervals = 10 * 24 * 60 #10 Days, 24 hours, 60 minutes for each our\\n\",\n    \"time_index = pd.date_range('2020-01-01', periods=intervals, freq='T')\\n\",\n    \"data = np.random.randn(intervals)\\n\",\n    \"\\n\",\n    \"df = pd.DataFrame(pd.Series(data=data, index=time_index)) #Create pandas dataframe with data\\n\",\n    \"df.reset_index(inplace=True) #Reset index\\n\",\n    \"df.columns = ['date','target'] #Rename columns\\n\",\n    \"df.head()\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Connect to DataRobot\\n\",\n    \"Connect to DataRobot using your credentials and your endpoint. Change input below accordingly.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"dr.Client(token='YOUR_API_KEY', \\n\",\n    \"          endpoint='YOUR_DATAROBOT_HOSTNAME')\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Initiate Time Series Project\\n\",\n    \"To set up a time series project, use the new time series specific parameters found in <code>dr.DatetimePartitioningSpecification </code>:\\n\",\n    \"\\n\",\n    \"* use_time_series - set this to True to enable time series for the project.\\n\",\n    \"* default_to_known_in_advance - set this to True to default to treating all features as known in advance features. Otherwise they will not be handled as known in advance features. See the prediction documentation for more information.\\n\",\n    \"* feature_derivation_window_start - the offset into the past to the start of the feature derivation window.\\n\",\n    \"* feature_derivation_window_end - the offset into the past to the end of the feature derivation window.\\n\",\n    \"* forecast_window_start - the offset into the future to the start of the forecast window.\\n\",\n    \"* forecast_window_end - the offset into the future to the end of the forecast window.\\n\",\n    \"* feature_settings - A list of settings. Can be used to set individual features to “known in advance”.\\n\",\n    \"* treat_as_exponential - Used to specify whether to treat the data as an exponential trend, which will apply a log-transform. By default, set as “auto”, this can be inferred automatically. See possible values in TreatAsExponential.\\n\",\n    \"* differencing_method - Used to specify a differencing method to apply if data is stationary. By default, set as “auto”, this can be inferred automatically. See possible values in DifferenicngMethod.\\n\",\n    \"* periodicities - A list of periodicities of different timestamps, specified in a list of lists.\\n\",\n    \"* windows_basis_units - The unit to use for feature derivation and forecast windows. Defaults to the inferred time step. If \\\"ROW\\\", will define the window with a number of rows.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"dr.DatetimePartitioningSpecification()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"#First create the project\\n\",\n    \"project = dr.Project.create(project_name='MySingleTimeSeriesProject',\\n\",\n    \"                        sourcedata= df)\\n\",\n    \"\\n\",\n    \"#Define a DatetimePartitioningSpecification object\\n\",\n    \"partition = dr.DatetimePartitioningSpecification(\\n\",\n    \"    datetime_partition_column = 'date',\\n\",\n    \"    use_time_series= True)\\n\",\n    \"\\n\",\n    \"# start the project, specifying the partitioning method\\n\",\n    \"project.set_target(\\n\",\n    \"    target='target',\\n\",\n    \"    partitioning_method=partition\\n\",\n    \")\\n\",\n    \"project.wait_for_autopilot() #Wait for autopilot to complete\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Feature Derivation Window\\n\",\n    \"\\n\",\n    \"The Feature Derivation window represents the rolling window that is used to derive time series features and lags, relative to the Forecast Point. It is defined in terms of <code>feature_derivation_window_start</code> and <code>feature_derivation_window_end</code> which are integer values representing datetime offsets in terms of the unit of time (e.g. hours or days).\\n\",\n    \"The Feature Derivation Window start and end must be less than or equal to zero, indicating they are positioned before the forecast point. Additionally, the window must be specified as an integer multiple of the time step which defines the expected difference in time units between rows in the data.\\n\",\n    \"Enough rows of historical data must be provided to cover the span of the effective Feature Derivation Window (which may be longer than the project’s Feature Derivation Window depending on the differencing settings chosen). The effective Feature Derivation Window of any model can be checked via the <code>Project.effective_feature_derivation_window_start</code> and <code>effective_feature_derivation_window_end</code> attributes of a datetime model. See <code>Project.get_datetime_models</code>.\\n\",\n    \"The window is closed, meaning the edges are considered to be inside the window.\\n\",\n    \"This information is added to your <code>DatetimePartitioningSpecification</code> call like so:\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"partition = dr.DatetimePartitioningSpecification(\\n\",\n    \"    datetime_partition_column = 'date',\\n\",\n    \"    feature_derivation_window_start = -24,\\n\",\n    \"    feature_derivation_window_end = -12,\\n\",\n    \"    use_time_series= True)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Forecast Window\\n\",\n    \"The Forecast Window represents the rolling window of future values to predict, relative to the Forecast Point. It is defined in terms of the <code>forecast_window_start</code> and <code>forecast_window_end</code>, which are positive integer values indicating datetime offsets in terms of the time unit (e.g. hours or days).\\n\",\n    \"The Forecast Window start and end must be positive integers, indicating they are positioned after the forecast point. Additionally, the window must be specified as an integer multiple of the time step which defines the expected difference in time units between rows in the data.\\n\",\n    \"The window is closed, meaning the edges are considered to be inside the window.\\n\",\n    \"This information is added to your <code>DatetimePartitioningSpecification</code> call like so:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"partition = dr.DatetimePartitioningSpecification(\\n\",\n    \"    datetime_partition_column = 'date',\\n\",\n    \"    forecast_window_start = 1,\\n\",\n    \"    forecast_window_end = 7,\\n\",\n    \"    use_time_series= True)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Feature Settings - Enable/Disable known in advance\\n\",\n    \"\\n\",\n    \"When setting up a time series project, input features could be identified as known in advance features. These features are not used to generate lags, and are expected to be known for the rows in the forecast window at predict time (e.g. “how much money will have been spent on marketing”, “is this a holiday”).\\n\",\n    \"To start a time series project, use <code>DatetimePartitioningSpecification</code> and specify the <code>feature_settings</code>. (Note that this is for illustrative purposes only - this project will not actually build because the 10 data points are smaller than the 100 datapoint minimum required.)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"settings = [dr.FeatureSettings('known_in_advance_feature', known_in_advance=True)]\\n\",\n    \"partition = dr.DatetimePartitioningSpecification(\\n\",\n    \"    datetime_partition_column = 'date',\\n\",\n    \"    use_time_series= True,\\n\",\n    \"    feature_settings = settings)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Feature Settings - Enable/Disable feature derivation\\n\",\n    \"\\n\",\n    \"DataRobot does a lot of good work to automatically derive features that may be useful (e.g., lags). However, from time to time, it may be useful to disable DataRobot’s automatic feature engineering for a particular feature (e.g., so you can derive lags yourself manually). To do this, we can use the <code>feature_settings</code> to turn off derived features for a particular base feature:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"settings = [dr.FeatureSettings('do_not_derive_feature', do_not_derive=True)]\\n\",\n    \"partition = dr.DatetimePartitioningSpecification(\\n\",\n    \"    datetime_partition_column = 'date',\\n\",\n    \"    use_time_series= True,\\n\",\n    \"    feature_settings = settings)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Multiseries\\n\",\n    \"The API also supports <strong>multiseries</strong>, or data with multiple time series delineated by multiseries ID columns. To create this, create a project, then create a datetime partition specification that specifies the <code>datetime_partition_column</code> (the column with your date in it) and the <code>multiseries_id_columns</code> (a list of columns specifying the ids that delineate the multiseries).\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"partition = dr.DatetimePartitioningSpecification(\\n\",\n    \"    datetime_partition_column = 'date',\\n\",\n    \"    use_time_series= True,\\n\",\n    \"    multiseries_id_columns=['multiseries_id'])\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Prediction Intervals\\n\",\n    \"For each model, prediction intervals estimate the range of values DataRobot expects actual values of the target to fall within. They are similar to a confidence interval of a prediction, but are based on the residual errors measured during the backtesting for the selected model.\\n\",\n    \"Note that because calculation depends on the backtesting values, prediction intervals are not available for predictions on models that have not had all backtests completed. Additionally, prediction intervals are not available when the number of points per forecast distance is less than 10, due to insufficient data.\\n\",\n    \"In a prediction request, users can specify a prediction intervals size, which specifies the desired probability of actual values falling within the interval range. Larger values are less precise, but more conservative. For example, specifying a size of 80 will result in a lower bound of 10% and an upper bound of 90%. More generally, for a specific <code>prediction_intervals_size</code>, the upper and lower bounds will be calculated as follows:\\n\",\n    \"<ul>\\n\",\n    \"<li>predictionIntervalUpperBound = 50% + (<code>prediction_intervals_size</code> / 2)</li>\\n\",\n    \"<li>predictionIntervalLowerBound = 50% - (<code>prediction_intervals_size</code> / 2)</li>\\n\",\n    \"</ul>\\n\",\n    \"To view prediction intervals data for a prediction, the prediction needs to have been created using <code>request_predictions</code> and specifying <code>include_prediction_intervals = True</code>. The size for the prediction interval can be specified with the <code>prediction_intervals_size</code> parameter for the same function, and will default to 80 if left unspecified. Specifying these fields will result in prediction interval bounds being included in the retrieved prediction data for that request. See <code>request_predictions</code> for more details.\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Calendars\\n\",\n    \"A calendar is an external file that lists events for a time series, such as holidays. For example, we might consider this calendar:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"calendar_raw = \\\"\\\"\\\"01/01/2019;New Years,04/01/2019;National Spaghetti Day,29/11/2019;Black Friday\\\"\\\"\\\"\\n\",\n    \"calendar = pd.DataFrame([x.split(';') for x in calendar_raw.split(',')],columns=['date','event'])\\n\",\n    \"calendar.head()\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"To create a calendar file from a csv file:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"calendar.to_csv('calendar.csv',index=False) #Save Pandas dataframe as csv first\\n\",\n    \"calendar = dr.CalendarFile.create('calendar.csv')\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Making a Time Series Project using a Calendar\\n\",\n    \"The main point of having calendars is not to admire them, but to use them for time series modeling! To do this, make a datetime partition like you usually would and pass the calendar using the calendar parameter.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# specify the calendar_id in the partitioning specification\\n\",\n    \"datetime_spec = dr.DatetimePartitioningSpecification(\\n\",\n    \"    use_time_series=True,\\n\",\n    \"    datetime_partition_column='date'\\n\",\n    \"    calendar_id=calendar.id\\n\",\n    \")\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Listing all available calendars\\n\",\n    \"To list all of the available calendars use the dr.CalendarFile.list command\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"dr.CalendarFile.list()\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.7.3\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n",
    "url": "https://github.com/datarobot-community/examples-for-data-scientists/blob/master/Initiating%20Projects/Python/Starting%20a%20Time%20Series%20Project.ipynb",
    "size": 17955,
    "description": "Jupyter notebook: Starting a Time Series Project",
    "tags": []
  },
  {
    "repo_name": "examples-for-data-scientists",
    "file_path": "Making Predictions/Python/Batch Prediction API.ipynb",
    "file_name": "Batch Prediction API.ipynb",
    "file_type": "notebook",
    "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Batch Prediction API\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Scope\\n\",\n    \"\\n\",\n    \"The scope of this notebook is to provide instructions on how to use DataRobot's Batch Prediction API to get predictions out of a DataRobot deployed model\\n\",\n    \"\\n\",\n    \"### Background\\n\",\n    \"\\n\",\n    \"The Batch Prediction API provides flexible options for intake and output when scoring large datasets using the prediction servers you have already deployed. The API is exposed through the DataRobot Public API and can be consumed using a REST-enabled client or the DataRobot Python Public API bindings.\\n\",\n    \"\\n\",\n    \"The main features of the API include:\\n\",\n    \"\\n\",\n    \"- Flexible options for intake and output.\\n\",\n    \"- Support for streaming local files and the ability to start scoring while still uploading—while simultaneously downloading the results.\\n\",\n    \"- Ability to score large datasets from, and to, Amazon S3 buckets.\\n\",\n    \"- Connection to external data sources using JDBC with bidirectional streaming of scoring data and results.\\n\",\n    \"- A mix of intake and output options; for example, scoring from a local file to an S3 target.\\n\",\n    \"- Protection against prediction server overload with a concurrency control level option.\\n\",\n    \"- Inclusion of Prediction Explanations (with an option to add thresholds).\\n\",\n    \"- Support for passthrough columns to correlate scored data with source data.\\n\",\n    \"- Addition of prediction warnings in the output.\\n\",\n    \"\\n\",\n    \"### Requirements\\n\",\n    \"\\n\",\n    \"- Python version 3.7.3\\n\",\n    \"-  DataRobot API version 2.26.0. \\n\",\n    \"\\n\",\n    \"Small adjustments might be needed depending on the Python version and DataRobot API version you are using.\\n\",\n    \"\\n\",\n    \"Full documentation of the Python package can be found here: https://docs.datarobot.com/en/docs/predictions/batch/batch-prediction-api/index.html\\n\",\n    \"\\n\",\n    \"It is assumed you already have a DataRobot <code>Deployment</code> object.\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Step 1: Connecting to DataRobot\\n\",\n    \"\\n\",\n    \"To inititate scoring jobs through the Batch Prediction API, you need two things:\\n\",\n    \"\\n\",\n    \"- Connect to DataRobot through the `datarobot.Client` command\\n\",\n    \"- Have your `DEPLOYMENT_ID` string. Easiest way to find that is to just go through the User Interface and Copy the ID from the URL. For example in the below example, everything after `deployments/` is the ID of the deployment: `https://app.eu.datarobot.com/deployments/232315iijdfsafw`\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 1,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import datarobot as dr\\n\",\n    \"\\n\",\n    \"dr.Client(endpoint='YOUR_ENDPOINT/api/v2', token='YOUR_TOKEN')\\n\",\n    \"deployment_id = \\\"YOUR_DEPLOYMENT_ID\\\"\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Step 2: Confirming Ingestion and Output \\n\",\n    \"\\n\",\n    \"DataRobot's Batch Prediction API allows you to score data from and to multiple sources. You should take advantage of the `credentials` and `data sources` you have already established previously through the UI for easy scoring. `Credentials` are basically usernames and passwords while `data sources` are the database that you have previously established a connection, like snowflake.\\n\",\n    \"\\n\",\n    \"Below is some example code on how to query the `credentials` and `data sources`.\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"Full list of [input options](https://docs.datarobot.com/en/docs/predictions/batch/batch-prediction-api/intake-options.html)\\n\",\n    \"\\n\",\n    \"Full list of [output options](https://docs.datarobot.com/en/docs/predictions/batch/batch-prediction-api/output-options.html)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"[Credential('6064670wqdww', 'DATAROBOT', 'basic'),\\n\",\n       \" Credential('606c17dfdwwdwwd', 'github-application-oauth', 'oauth'),\\n\",\n       \" Credential('607efadbaddwwdwwd', 'TheoPetropoulos', 's3'),\\n\",\n       \" Credential('6156f50adwdwdwdwdwdw', 'SnowflakeCredentials', 'basic')]\"\n      ]\n     },\n     \"execution_count\": 2,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"# List all credentials\\n\",\n    \"dr.Credential.list()\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"On the above example, you can see that I have quite a few credentials. I have my `GitHub` Credentials, some `SnowflakeCredentials` and `s3 credentials. The alphanumerics on the left is just the ID of the credential. I can use that ID to access the credentials through the API.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 6,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"60646dsddsdsaffa\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"# List all datastores\\n\",\n    \"dr.DataStore.list()\\n\",\n    \"print(dr.DataStore.list()[0].id)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"On the above example, you can see a list of all the datastores (I only have a snowflake connection), and with a little bit of manipulation, I can also access the ID of each datastore.\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Examples\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Below, we show some examples on how to use the Batch Prediction API Script. The `intake_settings` and `output_settings` can change to your needs. This means that you can *mix and match* as much as you want to to get to the outcome you prefer. Syntax only needs to change to one part of the equation to achieve this.\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Scoring from CSV to CSV\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"#Scoring without Prediction Explanations\\n\",\n    \"dr.BatchPredictionJob.score(\\n\",\n    \"    deployment_id,\\n\",\n    \"    intake_settings={\\n\",\n    \"        'type': 'localFile',\\n\",\n    \"        'file': 'inputfile.csv' #Path or Pandas or file-like object\\n\",\n    \"    },\\n\",\n    \"    output_settings={\\n\",\n    \"        'type': 'localFile',\\n\",\n    \"        'file': 'outputfile.csv'\\n\",\n    \"    }\\n\",\n    \")\\n\",\n    \"\\n\",\n    \"#Scoring With Prediction Explanations\\n\",\n    \"dr.BatchPredictionJob.score(\\n\",\n    \"    deployment_id,\\n\",\n    \"    intake_settings={\\n\",\n    \"        'type': 'localFile',\\n\",\n    \"        'file': 'inputfile.csv' #Path or Pandas or file-like object\\n\",\n    \"    },\\n\",\n    \"    output_settings={\\n\",\n    \"        'type': 'localFile',\\n\",\n    \"        'file': 'outputfile.csv'\\n\",\n    \"    },\\n\",\n    \"    \\n\",\n    \"    max_explanations=3 #Compute prediction explanations for this amount of features\\n\",\n    \"    \\n\",\n    \")\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Scoring from S3 to S3\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"dr.BatchPredictionJob.score(\\n\",\n    \"    deployment_id,\\n\",\n    \"    intake_settings={\\n\",\n    \"        'type': 's3',\\n\",\n    \"        'url': 's3://theos-test-bucket/lending_club_scoring.csv',\\n\",\n    \"        'credential_id': 'YOUR_CREDENTIAL_ID_FROM_ABOVE',\\n\",\n    \"    },\\n\",\n    \"    output_settings={\\n\",\n    \"        'type': 's3',\\n\",\n    \"        'url': 's3://theos-test-bucket/lending_club_scored2.csv',\\n\",\n    \"        'credential_id': 'YOUR_CREDENTIAL_ID_FROM_ABOVE'\\n\",\n    \"    }\\n\",\n    \")\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Scoring from JDBC to JDBC\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"dr.BatchPredictionJob.score(\\n\",\n    \"    deployment_id,\\n\",\n    \"    \\n\",\n    \"    intake_settings = {\\n\",\n    \"    'type': 'jdbc',\\n\",\n    \"    'table': 'table_name',\\n\",\n    \"    'schema': 'public',\\n\",\n    \"    'dataStoreId': data_store.id, #Put the Id of the datastore you want\\n\",\n    \"    'credentialId': cred.credential_id #put the credentials you want\\n\",\n    \"    },\\n\",\n    \"    \\n\",\n    \"    output_settings = {\\n\",\n    \"        'type': 'jdbc',\\n\",\n    \"        'table': 'table_name',\\n\",\n    \"        'schema': 'public',\\n\",\n    \"        'statementType': 'insert',\\n\",\n    \"        'dataStoreId': data_store.id,\\n\",\n    \"        'credentialId': cred.credential_id\\n\",\n    \"    }\\n\",\n    \")\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.8.5\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 4\n}\n",
    "url": "https://github.com/datarobot-community/examples-for-data-scientists/blob/master/Making%20Predictions/Python/Batch%20Prediction%20API.ipynb",
    "size": 9401,
    "description": "Jupyter notebook: Batch Prediction API",
    "tags": [
      "predictions",
      "api"
    ]
  },
  {
    "repo_name": "examples-for-data-scientists",
    "file_path": "Making Predictions/Python/Getting Predictions and Prediction Explanations.ipynb",
    "file_name": "Getting Predictions and Prediction Explanations.ipynb",
    "file_type": "notebook",
    "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Getting Predictions and Prediction Explanations\\n\",\n    \"\\n\",\n    \"**Author**: Thodoris Petropoulos\\n\",\n    \"\\n\",\n    \"**Label**: Model Deployment\\n\",\n    \"### Scope\\n\",\n    \"\\n\",\n    \"The scope of this notebook is to provide instructions on how to get predictions and prediction explanations out of a trained model using the Python API.\\n\",\n    \"\\n\",\n    \"### Background\\n\",\n    \"\\n\",\n    \"The main ways you can get predictions out of DataRobot using Python would be the modeling API and the prediction API.\\n\",\n    \"\\n\",\n    \"**Modeling API**: You can use the modelling API if you use Python or R and there are multiple ways you can interact with it.\\n\",\n    \"\\n\",\n    \"**Prediction API**: Any project can be called with the Prediction API if you have prediction servers. This is a simple REST API. Click on a model in the UI, then \\\"Deploy Model\\\" and \\\"Activate now\\\". You'll have access to a Python code snippet to help you interact with it. You can also deploy the model through the python API.\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"For the purposes of this tutorial, we will focus on the Modeling API. Note that this particular method of scoring utilizes modeling workers. This means that if someone is using these workers for modeling, your prediction is going to have to wait. This method of scoring is good for testing but not for deployment. For actual deployment, please deploy the model as a REST API through DataRobot's UI or through the API.\\n\",\n    \"\\n\",\n    \"### Requirements\\n\",\n    \"\\n\",\n    \"- Python version 3.7.3\\n\",\n    \"-  DataRobot API version 2.19.0. \\n\",\n    \"Small adjustments might be needed depending on the Python version and DataRobot API version you are using.\\n\",\n    \"\\n\",\n    \"Full documentation of the Python package can be found here: https://datarobot-public-api-client.readthedocs-hosted.com\\n\",\n    \"\\n\",\n    \"It is assumed you already have a DataRobot <code>Project</code> object and a DataRobot <code>Model </code> object.\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Import Libraries\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import datarobot as dr\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Requesting Predictions\\n\",\n    \"\\n\",\n    \"Before actually requesting predictions, you should upload the dataset you wish to predict via <code>Project.upload_dataset</code>. Previously uploaded datasets can be seen under <code>Project.get_datasets</code>. When uploading the dataset you can provide the path to a local file, a file object, raw file content, a pandas.DataFrame object, or the url to a publicly available dataset.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"#Uploading prediction dataset\\n\",\n    \"dataset_from_path = project.upload_dataset('path/file')\\n\",\n    \"\\n\",\n    \"#Request predictions\\n\",\n    \"predict_job = model.request_predictions(dataset_from_path.id)\\n\",\n    \"\\n\",\n    \"#Waiting for prediction calculations\\n\",\n    \"predictions = predict_job.get_result_when_complete()\\n\",\n    \"\\n\",\n    \"predictions.head()\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Requesting Prediction Explanations\\n\",\n    \"In order to create PredictionExplanations for a particular model and dataset, you must first Compute feature impact for the model via <code>dr.Model.get_or_request_feature_impact()</code>\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"model.get_or_request_feature_impact()\\n\",\n    \"\\n\",\n    \"pei = dr.PredictionExplanationsInitialization.create(project.id, model.id)\\n\",\n    \"\\n\",\n    \"#Wait for results of Prediction Explanations\\n\",\n    \"pei.get_result_when_complete()\\n\",\n    \"\\n\",\n    \"pe_job = dr.PredictionExplanations.create(project.id, model.id,  dataset_from_path.id)\\n\",\n    \"\\n\",\n    \"#Waiting for Job to Complete\\n\",\n    \"pe = pe_job.get_result_when_complete()\\n\",\n    \"\\n\",\n    \"df_pe = pe.get_all_as_dataframe()\\n\",\n    \"df_pe.head()\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Time Series Projects Caveats\\n\",\n    \"Prediction datasets are uploaded as normal predictions. However, when uploading a prediction dataset, a new parameter forecastPoint can be specified. The forecast point of a prediction dataset identifies the point in time relative which predictions should be generated, and if one is not specified when uploading a dataset, the server will choose the most recent possible forecast point. The forecast window specified when setting the partitioning options for the project determines how far into the future from the forecast point predictions should be calculated.\\n\",\n    \"\\n\",\n    \"**Important Note**:\\n\",\n    \"When uploading a dataset for Time Series projects scoring, you need to include the actual values from previous dates depending on the feature derivation setup. For example, if feature derivation window is -10 to -1 days and you want to forecast sales for the next 3 days, your dataset would look like this:\\n\",\n    \"\\n\",\n    \"| date       | sales | Known_in_advance_feature |\\n\",\n    \"|------------|-------|--------------------------|\\n\",\n    \"| 01/01/2019 | 130   | AAA                      |\\n\",\n    \"| 02/01/2019 | 123   | VVV                      |\\n\",\n    \"| 03/01/2019 | 412   | BBB                      |\\n\",\n    \"| 04/01/2019 | 321   | DDD                      |\\n\",\n    \"| 05/01/2019 | 512   | DDD                      |\\n\",\n    \"| 06/01/2019 | 623   | VVV                      |\\n\",\n    \"| 07/01/2019 | 356   | CCC                      |\\n\",\n    \"| 08/01/2019 | 133   | AAA                      |\\n\",\n    \"| 09/01/2019 | 356   | CCC                      |\\n\",\n    \"| 10/01/2019 | 654   | DDD                      |\\n\",\n    \"| 11/01/2019 |       | BBB                      |\\n\",\n    \"| 12/01/2019 |       | CCC                      |\\n\",\n    \"| 13/01/2019 |       | DDD                      |\\n\",\n    \"\\n\",\n    \"DataRobot will detect your forecast point as 10/01/2019 and then it will calculate lag features and make predictions for the missing dates.\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Getting Predictions from a DataRobot Deployment\\n\",\n    \"If you have used MLOps to deploy a model (DataRobot or Custom), you will have access to an API which you can call using an API Client. Below is a python script of an API Client. You can create your own API Client in the language of your choice!\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"\\\"\\\"\\\"\\n\",\n    \"Usage:\\n\",\n    \"    python datarobot-predict.py <input-file.csv>\\n\",\n    \" \\n\",\n    \"This example uses the requests library which you can install with:\\n\",\n    \"    pip install requests\\n\",\n    \"We highly recommend that you update SSL certificates with:\\n\",\n    \"    pip install -U urllib3[secure] certifi\\n\",\n    \"\\\"\\\"\\\"\\n\",\n    \"import sys\\n\",\n    \"import json\\n\",\n    \"import requests\\n\",\n    \" \\n\",\n    \"API_URL = 'Find this in Deployment -> Overview -> Summary -> Endpoint'\\n\",\n    \"API_KEY = 'YOUR_API_KEY'\\n\",\n    \"DATAROBOT_KEY = 'Find this in Deployment -> Predictions -> Prediction API -> Single mode -> on top of the code sample'\\n\",\n    \" \\n\",\n    \"DEPLOYMENT_ID = 'YOUR_DEPLOYMENT_ID'\\n\",\n    \"MAX_PREDICTION_FILE_SIZE_BYTES = 52428800  # 50 MB\\n\",\n    \" \\n\",\n    \" \\n\",\n    \"class DataRobotPredictionError(Exception):\\n\",\n    \"    \\\"\\\"\\\"Raised if there are issues getting predictions from DataRobot\\\"\\\"\\\"\\n\",\n    \" \\n\",\n    \" \\n\",\n    \"def make_datarobot_deployment_predictions(data, deployment_id):\\n\",\n    \"    \\\"\\\"\\\"\\n\",\n    \"    Make predictions on data provided using DataRobot deployment_id provided.\\n\",\n    \"    See docs for details:\\n\",\n    \"         https://app.eu.datarobot.com/docs/users-guide/predictions/api/new-prediction-api.html\\n\",\n    \" \\n\",\n    \"    Parameters\\n\",\n    \"    ----------\\n\",\n    \"    data : str\\n\",\n    \"        Feature1,Feature2\\n\",\n    \"        numeric_value,string\\n\",\n    \"    deployment_id : str\\n\",\n    \"        The ID of the deployment to make predictions with.\\n\",\n    \" \\n\",\n    \"    Returns\\n\",\n    \"    -------\\n\",\n    \"    Response schema:\\n\",\n    \"        https://app.eu.datarobot.com/docs/users-guide/predictions/api/new-prediction-api.html#response-schema\\n\",\n    \" \\n\",\n    \"    Raises\\n\",\n    \"    ------\\n\",\n    \"    DataRobotPredictionError if there are issues getting predictions from DataRobot\\n\",\n    \"    \\\"\\\"\\\"\\n\",\n    \"    # Set HTTP headers. The charset should match the contents of the file.\\n\",\n    \"    headers = {\\n\",\n    \"        'Content-Type': 'text/plain; charset=UTF-8',\\n\",\n    \"        'Authorization': 'Bearer {}'.format(API_KEY),\\n\",\n    \"        'DataRobot-Key': DATAROBOT_KEY,\\n\",\n    \"    }\\n\",\n    \" \\n\",\n    \"    url = API_URL.format(deployment_id=deployment_id)\\n\",\n    \"    # Make API request for predictions\\n\",\n    \"    predictions_response = requests.post(\\n\",\n    \"        url,\\n\",\n    \"        data=data,\\n\",\n    \"        headers=headers,\\n\",\n    \"    )\\n\",\n    \"    _raise_dataroboterror_for_status(predictions_response)\\n\",\n    \"    # Return a Python dict following the schema in the documentation\\n\",\n    \"    return predictions_response.json()\\n\",\n    \" \\n\",\n    \" \\n\",\n    \"def _raise_dataroboterror_for_status(response):\\n\",\n    \"    \\\"\\\"\\\"Raise DataRobotPredictionError if the request fails along with the response returned\\\"\\\"\\\"\\n\",\n    \"    try:\\n\",\n    \"        response.raise_for_status()\\n\",\n    \"    except requests.exceptions.HTTPError:\\n\",\n    \"        err_msg = '{code} Error: {msg}'.format(\\n\",\n    \"            code=response.status_code, msg=response.text)\\n\",\n    \"        raise DataRobotPredictionError(err_msg)\\n\",\n    \" \\n\",\n    \" \\n\",\n    \"def main(filename, deployment_id):\\n\",\n    \"    \\\"\\\"\\\"\\n\",\n    \"    Return an exit code on script completion or error. Codes > 0 are errors to the shell.\\n\",\n    \"    Also useful as a usage demonstration of\\n\",\n    \"    `make_datarobot_deployment_predictions(data, deployment_id)`\\n\",\n    \"    \\\"\\\"\\\"\\n\",\n    \"    if not filename:\\n\",\n    \"        print(\\n\",\n    \"            'Input file is required argument. '\\n\",\n    \"            'Usage: python datarobot-predict.py <input-file.csv>')\\n\",\n    \"        return 1\\n\",\n    \"    data = open(filename, 'rb').read()\\n\",\n    \"    data_size = sys.getsizeof(data)\\n\",\n    \"    if data_size >= MAX_PREDICTION_FILE_SIZE_BYTES:\\n\",\n    \"        print(\\n\",\n    \"            'Input file is too large: {} bytes. '\\n\",\n    \"            'Max allowed size is: {} bytes.'\\n\",\n    \"        ).format(data_size, MAX_PREDICTION_FILE_SIZE_BYTES)\\n\",\n    \"        return 1\\n\",\n    \"    try:\\n\",\n    \"        predictions = make_datarobot_deployment_predictions(data, deployment_id)\\n\",\n    \"    except DataRobotPredictionError as exc:\\n\",\n    \"        print(exc)\\n\",\n    \"        return 1\\n\",\n    \"    print(json.dumps(predictions, indent=4))\\n\",\n    \"    return 0\\n\",\n    \" \\n\",\n    \" \\n\",\n    \"if __name__ == \\\"__main__\\\":\\n\",\n    \"    filename = sys.argv[1]\\n\",\n    \"    sys.exit(main(filename, DEPLOYMENT_ID))\\n\",\n    \" \"\n   ]\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.7.3\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n",
    "url": "https://github.com/datarobot-community/examples-for-data-scientists/blob/master/Making%20Predictions/Python/Getting%20Predictions%20and%20Prediction%20Explanations.ipynb",
    "size": 11833,
    "description": "Jupyter notebook: Getting Predictions and Prediction Explanations",
    "tags": [
      "predictions"
    ]
  },
  {
    "repo_name": "examples-for-data-scientists",
    "file_path": "Model Evaluation/Python/Getting Confusion Chart.ipynb",
    "file_name": "Getting Confusion Chart.ipynb",
    "file_type": "notebook",
    "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Getting Confusion Chart\\n\",\n    \"\\n\",\n    \"**Author**: Thodoris Petropoulos\\n\",\n    \"\\n\",\n    \"**Label**: Evaluating Models\\n\",\n    \"\\n\",\n    \"### Scope\\n\",\n    \"The scope of this notebook is to provide instructions on how to get the Confusion Matrix Chart using the Python API. The Code below will work **only for Multiclass Classification Projects**. For Binary Classification Projects, use the <code>get_roc_curve</code> command.\\n\",\n    \"\\n\",\n    \"### Background\\n\",\n    \"\\n\",\n    \"The confusion matrix for a multiclass classification project will be a 𝑁×𝑁 matrix, with the left axis showing the true class of an observation and the top axis showing the class assigned to the observation by the model. Each element 𝑖,𝑗 of the matrix would be the number of items with true class 𝑖 that were classified as being in class 𝑗.\\n\",\n    \"\\n\",\n    \"Some important definitions: \\n\",\n    \"\\n\",\n    \"**F1**: The F1 score for each class.\\n\",\n    \"\\n\",\n    \"**Precision**: The precision statistic for each class.\\n\",\n    \"\\n\",\n    \"**Recall**: The recall statistic for each class.\\n\",\n    \"\\n\",\n    \"**Actual Count**: The number of records for each class that actually are that class.\\n\",\n    \"\\n\",\n    \"**Predicted Count**: The number of times each class was predicted.\\n\",\n    \"\\n\",\n    \"### Requirements\\n\",\n    \"\\n\",\n    \"- Python version 3.7.3\\n\",\n    \"-  DataRobot API version 2.19.0. \\n\",\n    \"Small adjustments might be needed depending on the Python version and DataRobot API version you are using.\\n\",\n    \"\\n\",\n    \"Full documentation of the Python package can be found here: https://datarobot-public-api-client.readthedocs-hosted.com\\n\",\n    \"\\n\",\n    \"It is assumed you already have a DataRobot <code>Project</code> object and a DataRobot <code>Model</code> object.\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Import Libraries\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 3,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import datarobot as dr\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Requesting Confusion Chart Data\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 12,\n   \"metadata\": {\n    \"scrolled\": false\n   },\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"{'classes': ['0.0', '1.0', '2.0'],\\n\",\n       \" 'confusion_matrix': [[9, 0, 0], [0, 4, 1], [0, 0, 10]],\\n\",\n       \" 'class_metrics': [{'class_name': '0.0',\\n\",\n       \"   'actual_count': 9,\\n\",\n       \"   'predicted_count': 9,\\n\",\n       \"   'f1': 1.0,\\n\",\n       \"   'recall': 1.0,\\n\",\n       \"   'precision': 1.0,\\n\",\n       \"   'confusion_matrix_one_vs_all': [[15, 0], [0, 9]],\\n\",\n       \"   'was_actual_percentages': [{'other_class_name': '0.0', 'percentage': 1.0},\\n\",\n       \"    {'other_class_name': '1.0', 'percentage': 0.0},\\n\",\n       \"    {'other_class_name': '2.0', 'percentage': 0.0}],\\n\",\n       \"   'was_predicted_percentages': [{'other_class_name': '0.0',\\n\",\n       \"     'percentage': 1.0},\\n\",\n       \"    {'other_class_name': '1.0', 'percentage': 0.0},\\n\",\n       \"    {'other_class_name': '2.0', 'percentage': 0.0}]},\\n\",\n       \"  {'class_name': '1.0',\\n\",\n       \"   'actual_count': 5,\\n\",\n       \"   'predicted_count': 4,\\n\",\n       \"   'f1': 0.888888888888889,\\n\",\n       \"   'recall': 0.8,\\n\",\n       \"   'precision': 1.0,\\n\",\n       \"   'confusion_matrix_one_vs_all': [[19, 0], [1, 4]],\\n\",\n       \"   'was_actual_percentages': [{'other_class_name': '0.0', 'percentage': 0.0},\\n\",\n       \"    {'other_class_name': '1.0', 'percentage': 0.8},\\n\",\n       \"    {'other_class_name': '2.0', 'percentage': 0.2}],\\n\",\n       \"   'was_predicted_percentages': [{'other_class_name': '0.0',\\n\",\n       \"     'percentage': 0.0},\\n\",\n       \"    {'other_class_name': '1.0', 'percentage': 1.0},\\n\",\n       \"    {'other_class_name': '2.0', 'percentage': 0.0}]},\\n\",\n       \"  {'class_name': '2.0',\\n\",\n       \"   'actual_count': 10,\\n\",\n       \"   'predicted_count': 11,\\n\",\n       \"   'f1': 0.9523809523809523,\\n\",\n       \"   'recall': 1.0,\\n\",\n       \"   'precision': 0.909090909090909,\\n\",\n       \"   'confusion_matrix_one_vs_all': [[13, 1], [0, 10]],\\n\",\n       \"   'was_actual_percentages': [{'other_class_name': '0.0', 'percentage': 0.0},\\n\",\n       \"    {'other_class_name': '1.0', 'percentage': 0.0},\\n\",\n       \"    {'other_class_name': '2.0', 'percentage': 1.0}],\\n\",\n       \"   'was_predicted_percentages': [{'other_class_name': '0.0',\\n\",\n       \"     'percentage': 0.0},\\n\",\n       \"    {'other_class_name': '1.0', 'percentage': 0.09090909090909091},\\n\",\n       \"    {'other_class_name': '2.0', 'percentage': 0.9090909090909091}]}]}\"\n      ]\n     },\n     \"execution_count\": 12,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"cc = model.get_confusion_chart(source='validation')\\n\",\n    \"cc.raw_data\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.7.3\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n",
    "url": "https://github.com/datarobot-community/examples-for-data-scientists/blob/master/Model%20Evaluation/Python/Getting%20Confusion%20Chart.ipynb",
    "size": 5427,
    "description": "Jupyter notebook: Getting Confusion Chart",
    "tags": [
      "evaluation"
    ]
  },
  {
    "repo_name": "examples-for-data-scientists",
    "file_path": "Model Evaluation/Python/Getting Feature Impact.ipynb",
    "file_name": "Getting Feature Impact.ipynb",
    "file_type": "notebook",
    "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Getting Feature Impact\\n\",\n    \"\\n\",\n    \"**Author**: Thodoris Petropoulos\\n\",\n    \"\\n\",\n    \"**Label**: Evaluating Models\\n\",\n    \"\\n\",\n    \"### Scope\\n\",\n    \"The scope of this notebook is to provide instructions on how to get Feature Impact scores of a specific model using the Python API.\\n\",\n    \"\\n\",\n    \"### Background\\n\",\n    \"Feature Impact informs us of how important a feature is in a model.  This is calcualted using a model agnostic approach. Feature Impact is normalised so that the most impactful feature will always have a feature impact score of 100%, while the other features impact scores are set relative to that top predictor.\\n\",\n    \"\\n\",\n    \"### Requirements\\n\",\n    \"\\n\",\n    \"- Python version 3.7.3\\n\",\n    \"-  DataRobot API version 2.19.0. \\n\",\n    \"Small adjustments might be needed depending on the Python version and DataRobot API version you are using.\\n\",\n    \"\\n\",\n    \"Full documentation of the Python package can be found here: https://datarobot-public-api-client.readthedocs-hosted.com\\n\",\n    \"\\n\",\n    \"It is assumed you already have a DataRobot <code>Project</code> object and a DataRobot <code>Model</code> object.\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Import Libraries\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 6,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import datarobot as dr\\n\",\n    \"import seaborn as sns\\n\",\n    \"import pandas as pd\\n\",\n    \"import matplotlib.pyplot as plt\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Requesting Feature Impact\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 4,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"#Get Feature Impact\\n\",\n    \"feature_impact = model.get_or_request_feature_impact()\\n\",\n    \"\\n\",\n    \"#Save feature impact in pandas dataframe\\n\",\n    \"fi_df = pd.DataFrame(feature_impact)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Plotting Feature Impact\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 8,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"<matplotlib.axes._subplots.AxesSubplot at 0x1a1ee36b00>\"\n      ]\n     },\n     \"execution_count\": 8,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    },\n    {\n     \"data\": {\n      \"image/png\": \"\\n\",\n      \"text/plain\": [\n       \"<Figure size 864x360 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {\n      \"needs_background\": \"light\"\n     },\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"fig, ax = plt.subplots(figsize = (12,5))\\n\",\n    \"\\n\",\n    \"#Plot feature impact\\n\",\n    \"sns.barplot(x='featureName', y='impactNormalized', data=fi_df[0:5], color='g')\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.7.3\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n",
    "url": "https://github.com/datarobot-community/examples-for-data-scientists/blob/master/Model%20Evaluation/Python/Getting%20Feature%20Impact.ipynb",
    "size": 16047,
    "description": "Jupyter notebook: Getting Feature Impact",
    "tags": [
      "evaluation"
    ]
  },
  {
    "repo_name": "examples-for-data-scientists",
    "file_path": "Model Evaluation/Python/Getting Lift Chart.ipynb",
    "file_name": "Getting Lift Chart.ipynb",
    "file_type": "notebook",
    "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Getting Lift Chart\\n\",\n    \"\\n\",\n    \"**Author**: Matthew Cohen\\n\",\n    \"\\n\",\n    \"**Label**: Evaluating Models\\n\",\n    \"\\n\",\n    \"### Scope\\n\",\n    \"The scope of this notebook is to provide instructions on how to retrieve the Lift Chart of a specific model using the Python API.\\n\",\n    \"\\n\",\n    \"### Background\\n\",\n    \"Insights provided by the Lift Chart are helpful in checking the performance of machine learning models. \\n\",\n    \"\\n\",\n    \"The lift chart depicts how well a model segments the target population and how capable it is of predicting the target across the prediction distribution.  This allows you to evaluate the performance of a model at both the high end (very likely) and low end (very unlikely) end of the spectrum. \\n\",\n    \"\\n\",\n    \"For example—so you can see how well the model performs for different ranges of values of the target variable. Looking at the Lift chart, the left side of the curve indicates where the model predicted a low score on one section of the population while the right side of the curve indicates where the model predicted a high score. In general, the steeper the actual line is, and the more closely the predicted line matches the actual line, the better the model is. A consistently increasing line is another good indicator.\\n\",\n    \"\\n\",\n    \"### Requirements\\n\",\n    \"\\n\",\n    \"- Python version 3.7.3\\n\",\n    \"-  DataRobot API version 2.19.0. \\n\",\n    \"Small adjustments might be needed depending on the Python version and DataRobot API version you are using.\\n\",\n    \"\\n\",\n    \"Full documentation of the Python package can be found here: https://datarobot-public-api-client.readthedocs-hosted.com\\n\",\n    \"\\n\",\n    \"It is assumed you already have a DataRobot <code>Project</code> object and a DataRobot <code>Model</code> object.\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Import Libraries\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 4,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import datarobot as dr\\n\",\n    \"import pandas as pd\\n\",\n    \"import matplotlib.pyplot as plt\\n\",\n    \"import matplotlib.ticker as mtick\\n\",\n    \"\\n\",\n    \"#Some color\\n\",\n    \"dr_dark_blue = '#08233F'\\n\",\n    \"dr_blue = '#1F77B4'\\n\",\n    \"dr_orange = '#FF7F0E'\\n\",\n    \"dr_red = '#BE3C28'\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Requesting Lift Chart Data\\n\",\n    \"\\n\",\n    \"Lift chart data can be retrieved for a specific data partition (validation, cross-validation, or holdout) using <code>get_lift_chart</code>. To retrieve the data for holdout partition, it needs to be unlocked first.\\n\",\n    \"\\n\",\n    \"Let’s retrieve the validation partition data for top model using <code>get_lift_chart</code>. The <code>get_lift_chart</code> method returns data for validation partition by default. We can retrieve data for specific data partition by passing value to source parameter in <code>get_lift_chart</code>.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 6,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>actual</th>\\n\",\n       \"      <th>bin_weight</th>\\n\",\n       \"      <th>predicted</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>0.037037</td>\\n\",\n       \"      <td>27.0</td>\\n\",\n       \"      <td>0.075109</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>0.074074</td>\\n\",\n       \"      <td>27.0</td>\\n\",\n       \"      <td>0.128871</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2</th>\\n\",\n       \"      <td>0.153846</td>\\n\",\n       \"      <td>26.0</td>\\n\",\n       \"      <td>0.159114</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>3</th>\\n\",\n       \"      <td>0.222222</td>\\n\",\n       \"      <td>27.0</td>\\n\",\n       \"      <td>0.176280</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>4</th>\\n\",\n       \"      <td>0.185185</td>\\n\",\n       \"      <td>27.0</td>\\n\",\n       \"      <td>0.189534</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"     actual  bin_weight  predicted\\n\",\n       \"0  0.037037        27.0   0.075109\\n\",\n       \"1  0.074074        27.0   0.128871\\n\",\n       \"2  0.153846        26.0   0.159114\\n\",\n       \"3  0.222222        27.0   0.176280\\n\",\n       \"4  0.185185        27.0   0.189534\"\n      ]\n     },\n     \"execution_count\": 6,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"lc = model.get_lift_chart(source='validation')\\n\",\n    \"\\n\",\n    \"#Saving to pandas dataframe\\n\",\n    \"bins_df = pd.DataFrame(lc.bins)\\n\",\n    \"bins_df.head()\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Let’s define our rebinning and plotting functions.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 7,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"def rebin_df(raw_df, number_of_bins):\\n\",\n    \"    cols = ['bin', 'actual_mean', 'predicted_mean', 'bin_weight']\\n\",\n    \"    new_df = pd.DataFrame(columns=cols)\\n\",\n    \"    current_prediction_total = 0\\n\",\n    \"    current_actual_total = 0\\n\",\n    \"    current_row_total = 0\\n\",\n    \"    x_index = 1\\n\",\n    \"    bin_size = 60 / number_of_bins\\n\",\n    \"    for rowId, data in raw_df.iterrows():\\n\",\n    \"        current_prediction_total += data['predicted'] * data['bin_weight']\\n\",\n    \"        current_actual_total += data['actual'] * data['bin_weight']\\n\",\n    \"        current_row_total += data['bin_weight']\\n\",\n    \"\\n\",\n    \"        if ((rowId + 1) % bin_size == 0):\\n\",\n    \"            x_index += 1\\n\",\n    \"            bin_properties = {\\n\",\n    \"                'bin': ((round(rowId + 1) / 60) * number_of_bins),\\n\",\n    \"                'actual_mean': current_actual_total / current_row_total,\\n\",\n    \"                'predicted_mean': current_prediction_total / current_row_total,\\n\",\n    \"                'bin_weight': current_row_total\\n\",\n    \"            }\\n\",\n    \"\\n\",\n    \"            new_df = new_df.append(bin_properties, ignore_index=True)\\n\",\n    \"            current_prediction_total = 0\\n\",\n    \"            current_actual_total = 0\\n\",\n    \"            current_row_total = 0\\n\",\n    \"    return new_df\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"def matplotlib_lift(bins_df, bin_count, ax):\\n\",\n    \"    grouped = rebin_df(bins_df, bin_count)\\n\",\n    \"    ax.plot(range(1, len(grouped) + 1), grouped['predicted_mean'],\\n\",\n    \"            marker='+', lw=1, color=dr_blue)\\n\",\n    \"    ax.plot(range(1, len(grouped) + 1), grouped['actual_mean'],\\n\",\n    \"            marker='*', lw=1, color=dr_orange)\\n\",\n    \"    ax.set_xlim([0, len(grouped) + 1])\\n\",\n    \"    ax.set_facecolor(dr_dark_blue)\\n\",\n    \"    ax.legend(loc='best')\\n\",\n    \"    ax.set_title('Lift chart {} bins'.format(bin_count))\\n\",\n    \"    ax.set_xlabel('Sorted Prediction')\\n\",\n    \"    ax.set_ylabel('Value')\\n\",\n    \"    return grouped\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Now we can show all lift charts we propose in DataRobot web application.\\n\",\n    \"\\n\",\n    \"- Note 1 : While this method will work for any bin count less then 60 - the most reliable result will be achieved when the number of bins is a divisor of 60.\\n\",\n    \"\\n\",\n    \"- Note 2 : This visualization method will NOT work for bin count > 60 because DataRobot does not provide enough information for a larger resolution.\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Plotting Lift Chart\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 8,\n   \"metadata\": {\n    \"scrolled\": false\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stderr\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"No handles with labels found to put in legend.\\n\",\n      \"No handles with labels found to put in legend.\\n\",\n      \"No handles with labels found to put in legend.\\n\",\n      \"No handles with labels found to put in legend.\\n\",\n      \"No handles with labels found to put in legend.\\n\",\n      \"No handles with labels found to put in legend.\\n\"\n     ]\n    },\n    {\n     \"data\": {\n      \"image/png\": \"\\n\",\n      \"text/plain\": [\n       \"<Figure size 576x1728 with 6 Axes>\"\n      ]\n     },\n     \"metadata\": {\n      \"needs_background\": \"light\"\n     },\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"bin_counts = [10, 12, 15, 20, 30, 60]\\n\",\n    \"f, axarr = plt.subplots(len(bin_counts))\\n\",\n    \"f.set_size_inches((8, 4 * len(bin_counts)))\\n\",\n    \"\\n\",\n    \"rebinned_dfs = []\\n\",\n    \"for i in range(len(bin_counts)):\\n\",\n    \"    rebinned_dfs.append(matplotlib_lift(bins_df, bin_counts[i], axarr[i]))\\n\",\n    \"plt.tight_layout()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.7.3\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n",
    "url": "https://github.com/datarobot-community/examples-for-data-scientists/blob/master/Model%20Evaluation/Python/Getting%20Lift%20Chart.ipynb",
    "size": 174806,
    "description": "Jupyter notebook: Getting Lift Chart",
    "tags": [
      "evaluation"
    ]
  },
  {
    "repo_name": "examples-for-data-scientists",
    "file_path": "Model Evaluation/Python/Getting Partial Dependence Plot.ipynb",
    "file_name": "Getting Partial Dependence Plot.ipynb",
    "file_type": "notebook",
    "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Getting Partial Dependence Plot\\n\",\n    \"\\n\",\n    \"**Author**: Thodoris Petropoulos\\n\",\n    \"\\n\",\n    \"**Label**: Evaluating Models\\n\",\n    \"\\n\",\n    \"### Scope\\n\",\n    \"The scope of this notebook is to provide instructions on how to get the Partial Dependence Plot of a specific model using the Python API.\\n\",\n    \"\\n\",\n    \"### Background\\n\",\n    \"Partial dependence conveys how changes to the value of each feature change model predictions if everything else remained unchanged. You can find the partial dependence plot in the \\\"Feature Effects\\\" tab interface.\\n\",\n    \"\\n\",\n    \"### Requirements\\n\",\n    \"\\n\",\n    \"- Python version 3.7.3\\n\",\n    \"-  DataRobot API version 2.19.0. \\n\",\n    \"Small adjustments might be needed depending on the Python version and DataRobot API version you are using.\\n\",\n    \"\\n\",\n    \"Full documentation of the Python package can be found here: https://datarobot-public-api-client.readthedocs-hosted.com\\n\",\n    \"\\n\",\n    \"It is assumed you already have a DataRobot <code>Project</code> object and a DataRobot <code>Model</code> object.\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Import Libraries\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 6,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import datarobot as dr\\n\",\n    \"import seaborn as sns\\n\",\n    \"sns.set()\\n\",\n    \"import matplotlib.pyplot as plt\\n\",\n    \"import pandas as pd\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Requesting Feature Effects (Partial Dependence)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 3,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"feature_effects = model.request_feature_effect()\\n\",\n    \"feature_effects.wait_for_completion() #Wait till feature effects computes\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Plot Partial Dependence for a Specific Feature\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 1,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"def plot_partial_dependence_column(feature_effects, column):\\n\",\n    \"     \\n\",\n    \"    temp_pd = list(feature_effects.get_result())\\n\",\n    \"    for item in temp_pd:\\n\",\n    \"        if item['feature_name'] == column:\\n\",\n    \"            partial_dependence_data = item['partial_dependence']['data']\\n\",\n    \"            partial_dependence_data_df = pd.DataFrame(partial_dependence_data) #Save results into a pandas dataframe\\n\",\n    \"            partial_dependence_data_df.columns = ['target_probability','value']\\n\",\n    \"    plt.figure(figsize=(16, 6))\\n\",\n    \"    ax = sns.lineplot(x=\\\"value\\\", y=\\\"target_probability\\\", data=partial_dependence_data_df)#.set_title('Partial Dependence plot for %s'%column)\\n\",\n    \"    return partial_dependence_data_df\\n\",\n    \"    \"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 27,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>target_probability</th>\\n\",\n       \"      <th>value</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>0.344432</td>\\n\",\n       \"      <td>Not Available</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>0.356704</td>\\n\",\n       \"      <td>Emergency</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2</th>\\n\",\n       \"      <td>0.396478</td>\\n\",\n       \"      <td>==Missing==</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>3</th>\\n\",\n       \"      <td>0.396478</td>\\n\",\n       \"      <td>Newborn</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>4</th>\\n\",\n       \"      <td>0.396426</td>\\n\",\n       \"      <td>Urgent</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>5</th>\\n\",\n       \"      <td>0.412654</td>\\n\",\n       \"      <td>Elective</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>6</th>\\n\",\n       \"      <td>0.396478</td>\\n\",\n       \"      <td>=Other Unseen=</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>7</th>\\n\",\n       \"      <td>0.379232</td>\\n\",\n       \"      <td>Not Mapped</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"   target_probability           value\\n\",\n       \"0            0.344432   Not Available\\n\",\n       \"1            0.356704       Emergency\\n\",\n       \"2            0.396478     ==Missing==\\n\",\n       \"3            0.396478         Newborn\\n\",\n       \"4            0.396426          Urgent\\n\",\n       \"5            0.412654        Elective\\n\",\n       \"6            0.396478  =Other Unseen=\\n\",\n       \"7            0.379232      Not Mapped\"\n      ]\n     },\n     \"execution_count\": 27,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    },\n    {\n     \"data\": {\n      \"image/png\": \"\\n\",\n      \"text/plain\": [\n       \"<Figure size 1152x432 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"plot_partial_dependence_column(feature_effects,'admission_type_id') #Fill in your own column\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.7.3\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n",
    "url": "https://github.com/datarobot-community/examples-for-data-scientists/blob/master/Model%20Evaluation/Python/Getting%20Partial%20Dependence%20Plot.ipynb",
    "size": 50476,
    "description": "Jupyter notebook: Getting Partial Dependence Plot",
    "tags": [
      "evaluation"
    ]
  },
  {
    "repo_name": "examples-for-data-scientists",
    "file_path": "Model Evaluation/Python/Getting ROC Curve.ipynb",
    "file_name": "Getting ROC Curve.ipynb",
    "file_type": "notebook",
    "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Getting ROC Curve\\n\",\n    \"\\n\",\n    \"**Author**: Thodoris Petropoulos\\n\",\n    \"\\n\",\n    \"**Label**: Evaluating Models\\n\",\n    \"\\n\",\n    \"### Scope\\n\",\n    \"The scope of this notebook is to provide instructions on how to get ROC Curve data of a specific model using the Python API.\\n\",\n    \"\\n\",\n    \"### Background\\n\",\n    \"Insights provided by the ROC Curve are helpful in evaluating the performance of machine learning models. \\n\",\n    \"\\n\",\n    \"The receiver operating characteristic curve, or ROC curve, is a graphical plot that illustrates the performance of a binary classifier system as its discrimination threshold is varied. The curve is created by plotting the true positive rate (TPR) against the false positive rate (FPR) at various threshold settings.\\n\",\n    \"\\n\",\n    \"### Requirements\\n\",\n    \"\\n\",\n    \"- Python version 3.7.3\\n\",\n    \"-  DataRobot API version 2.19.0. \\n\",\n    \"Small adjustments might be needed depending on the Python version and DataRobot API version you are using.\\n\",\n    \"\\n\",\n    \"Full documentation of the Python package can be found here: https://datarobot-public-api-client.readthedocs-hosted.com\\n\",\n    \"\\n\",\n    \"It is assumed you already have a DataRobot <code>Project</code> object and a DataRobot <code>Model</code> object.\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Import Libraries\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import datarobot as dr\\n\",\n    \"import pandas as pd\\n\",\n    \"import matplotlib.pyplot as plt\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Requesting ROC Curve Data\\n\",\n    \"\\n\",\n    \"ROC curve data can be generated for a specific data partition (validation, cross validation, or holdout) or for all the data partition using the <code>get_roc_curve</code> method.\\n\",\n    \"\\n\",\n    \"To retrieve ROC curve information:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 5,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>accuracy</th>\\n\",\n       \"      <th>f1_score</th>\\n\",\n       \"      <th>false_negative_score</th>\\n\",\n       \"      <th>false_positive_rate</th>\\n\",\n       \"      <th>false_positive_score</th>\\n\",\n       \"      <th>fraction_predicted_as_negative</th>\\n\",\n       \"      <th>fraction_predicted_as_positive</th>\\n\",\n       \"      <th>lift_negative</th>\\n\",\n       \"      <th>lift_positive</th>\\n\",\n       \"      <th>matthews_correlation_coefficient</th>\\n\",\n       \"      <th>negative_predictive_value</th>\\n\",\n       \"      <th>positive_predictive_value</th>\\n\",\n       \"      <th>threshold</th>\\n\",\n       \"      <th>true_negative_rate</th>\\n\",\n       \"      <th>true_negative_score</th>\\n\",\n       \"      <th>true_positive_rate</th>\\n\",\n       \"      <th>true_positive_score</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>0.603125</td>\\n\",\n       \"      <td>0.000000</td>\\n\",\n       \"      <td>635</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>1.00000</td>\\n\",\n       \"      <td>0.00000</td>\\n\",\n       \"      <td>1.000000</td>\\n\",\n       \"      <td>0.000000</td>\\n\",\n       \"      <td>0.000000</td>\\n\",\n       \"      <td>0.603125</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"      <td>1.000000</td>\\n\",\n       \"      <td>1.0</td>\\n\",\n       \"      <td>965</td>\\n\",\n       \"      <td>0.000000</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>0.604375</td>\\n\",\n       \"      <td>0.006279</td>\\n\",\n       \"      <td>633</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0.99875</td>\\n\",\n       \"      <td>0.00125</td>\\n\",\n       \"      <td>1.001252</td>\\n\",\n       \"      <td>2.519685</td>\\n\",\n       \"      <td>0.043612</td>\\n\",\n       \"      <td>0.603880</td>\\n\",\n       \"      <td>1.0</td>\\n\",\n       \"      <td>0.978897</td>\\n\",\n       \"      <td>1.0</td>\\n\",\n       \"      <td>965</td>\\n\",\n       \"      <td>0.003150</td>\\n\",\n       \"      <td>2</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2</th>\\n\",\n       \"      <td>0.605625</td>\\n\",\n       \"      <td>0.012520</td>\\n\",\n       \"      <td>631</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0.99750</td>\\n\",\n       \"      <td>0.00250</td>\\n\",\n       \"      <td>1.002506</td>\\n\",\n       \"      <td>2.519685</td>\\n\",\n       \"      <td>0.061715</td>\\n\",\n       \"      <td>0.604637</td>\\n\",\n       \"      <td>1.0</td>\\n\",\n       \"      <td>0.922599</td>\\n\",\n       \"      <td>1.0</td>\\n\",\n       \"      <td>965</td>\\n\",\n       \"      <td>0.006299</td>\\n\",\n       \"      <td>4</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>3</th>\\n\",\n       \"      <td>0.606875</td>\\n\",\n       \"      <td>0.018721</td>\\n\",\n       \"      <td>629</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0.99625</td>\\n\",\n       \"      <td>0.00375</td>\\n\",\n       \"      <td>1.003764</td>\\n\",\n       \"      <td>2.519685</td>\\n\",\n       \"      <td>0.075632</td>\\n\",\n       \"      <td>0.605395</td>\\n\",\n       \"      <td>1.0</td>\\n\",\n       \"      <td>0.896016</td>\\n\",\n       \"      <td>1.0</td>\\n\",\n       \"      <td>965</td>\\n\",\n       \"      <td>0.009449</td>\\n\",\n       \"      <td>6</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>4</th>\\n\",\n       \"      <td>0.611875</td>\\n\",\n       \"      <td>0.043143</td>\\n\",\n       \"      <td>621</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0.99125</td>\\n\",\n       \"      <td>0.00875</td>\\n\",\n       \"      <td>1.008827</td>\\n\",\n       \"      <td>2.519685</td>\\n\",\n       \"      <td>0.115822</td>\\n\",\n       \"      <td>0.608449</td>\\n\",\n       \"      <td>1.0</td>\\n\",\n       \"      <td>0.837898</td>\\n\",\n       \"      <td>1.0</td>\\n\",\n       \"      <td>965</td>\\n\",\n       \"      <td>0.022047</td>\\n\",\n       \"      <td>14</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"   accuracy  f1_score  false_negative_score  false_positive_rate  \\\\\\n\",\n       \"0  0.603125  0.000000                   635                  0.0   \\n\",\n       \"1  0.604375  0.006279                   633                  0.0   \\n\",\n       \"2  0.605625  0.012520                   631                  0.0   \\n\",\n       \"3  0.606875  0.018721                   629                  0.0   \\n\",\n       \"4  0.611875  0.043143                   621                  0.0   \\n\",\n       \"\\n\",\n       \"   false_positive_score  fraction_predicted_as_negative  \\\\\\n\",\n       \"0                     0                         1.00000   \\n\",\n       \"1                     0                         0.99875   \\n\",\n       \"2                     0                         0.99750   \\n\",\n       \"3                     0                         0.99625   \\n\",\n       \"4                     0                         0.99125   \\n\",\n       \"\\n\",\n       \"   fraction_predicted_as_positive  lift_negative  lift_positive  \\\\\\n\",\n       \"0                         0.00000       1.000000       0.000000   \\n\",\n       \"1                         0.00125       1.001252       2.519685   \\n\",\n       \"2                         0.00250       1.002506       2.519685   \\n\",\n       \"3                         0.00375       1.003764       2.519685   \\n\",\n       \"4                         0.00875       1.008827       2.519685   \\n\",\n       \"\\n\",\n       \"   matthews_correlation_coefficient  negative_predictive_value  \\\\\\n\",\n       \"0                          0.000000                   0.603125   \\n\",\n       \"1                          0.043612                   0.603880   \\n\",\n       \"2                          0.061715                   0.604637   \\n\",\n       \"3                          0.075632                   0.605395   \\n\",\n       \"4                          0.115822                   0.608449   \\n\",\n       \"\\n\",\n       \"   positive_predictive_value  threshold  true_negative_rate  \\\\\\n\",\n       \"0                        0.0   1.000000                 1.0   \\n\",\n       \"1                        1.0   0.978897                 1.0   \\n\",\n       \"2                        1.0   0.922599                 1.0   \\n\",\n       \"3                        1.0   0.896016                 1.0   \\n\",\n       \"4                        1.0   0.837898                 1.0   \\n\",\n       \"\\n\",\n       \"   true_negative_score  true_positive_rate  true_positive_score  \\n\",\n       \"0                  965            0.000000                    0  \\n\",\n       \"1                  965            0.003150                    2  \\n\",\n       \"2                  965            0.006299                    4  \\n\",\n       \"3                  965            0.009449                    6  \\n\",\n       \"4                  965            0.022047                   14  \"\n      ]\n     },\n     \"execution_count\": 5,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"roc = model.get_roc_curve('validation')\\n\",\n    \"\\n\",\n    \"#Save the result into a pandas dataframe\\n\",\n    \"df = pd.DataFrame(roc.roc_points)\\n\",\n    \"df.head()\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Plotting ROC Curve\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 7,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"(0, 1)\"\n      ]\n     },\n     \"execution_count\": 7,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    },\n    {\n     \"data\": {\n      \"image/png\": \"\\n\",\n      \"text/plain\": [\n       \"<Figure size 576x576 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {\n      \"needs_background\": \"light\"\n     },\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"dr_roc_green = '#03c75f'\\n\",\n    \"white = '#ffffff'\\n\",\n    \"dr_purple = '#65147D'\\n\",\n    \"dr_dense_green = '#018f4f'\\n\",\n    \"dr_dark_blue = '#08233F'\\n\",\n    \"\\n\",\n    \"fig = plt.figure(figsize=(8, 8))\\n\",\n    \"axes = fig.add_subplot(1, 1, 1, facecolor=dr_dark_blue)\\n\",\n    \"\\n\",\n    \"plt.scatter(df.false_positive_rate, df.true_positive_rate, color=dr_roc_green)\\n\",\n    \"plt.plot(df.false_positive_rate, df.true_positive_rate, color=dr_roc_green)\\n\",\n    \"plt.plot([0, 1], [0, 1], color=white, alpha=0.25)\\n\",\n    \"plt.title('ROC curve')\\n\",\n    \"plt.xlabel('False Positive Rate (Fallout)')\\n\",\n    \"plt.xlim([0, 1])\\n\",\n    \"plt.ylabel('True Positive Rate (Sensitivity)')\\n\",\n    \"plt.ylim([0, 1])\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Threshold Operations\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"You can get the recommended threshold value with maximal F1 score. That is the same threshold that is preselected in DataRobot when you open the “ROC curve” tab.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 8,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"0.3293589583674943\"\n      ]\n     },\n     \"execution_count\": 8,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"threshold = roc.get_best_f1_threshold()\\n\",\n    \"threshold\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"You can also estimate metrics for different threshold values. This will produce the same results as updating the threshold on the DataRobot “ROC curve” tab.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 9,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"{'accuracy': 0.609375,\\n\",\n       \" 'f1_score': 0.6144355336212215,\\n\",\n       \" 'false_negative_score': 137,\\n\",\n       \" 'true_negative_score': 477,\\n\",\n       \" 'true_positive_score': 498,\\n\",\n       \" 'false_positive_score': 488,\\n\",\n       \" 'true_negative_rate': 0.49430051813471504,\\n\",\n       \" 'false_positive_rate': 0.505699481865285,\\n\",\n       \" 'true_positive_rate': 0.784251968503937,\\n\",\n       \" 'matthews_correlation_coefficient': 0.28024309200601993,\\n\",\n       \" 'positive_predictive_value': 0.5050709939148073,\\n\",\n       \" 'negative_predictive_value': 0.7768729641693811,\\n\",\n       \" 'threshold': 0.3293589583674943,\\n\",\n       \" 'fraction_predicted_as_positive': 0.61625,\\n\",\n       \" 'fraction_predicted_as_negative': 0.38375000000000004,\\n\",\n       \" 'lift_positive': 1.272619827186916,\\n\",\n       \" 'lift_negative': 1.288079526083948}\"\n      ]\n     },\n     \"execution_count\": 9,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"metrics = roc.estimate_threshold(threshold)\\n\",\n    \"metrics\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.7.3\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n",
    "url": "https://github.com/datarobot-community/examples-for-data-scientists/blob/master/Model%20Evaluation/Python/Getting%20ROC%20Curve.ipynb",
    "size": 44124,
    "description": "Jupyter notebook: Getting ROC Curve",
    "tags": [
      "evaluation"
    ]
  },
  {
    "repo_name": "examples-for-data-scientists",
    "file_path": "Model Evaluation/Python/Getting SHAP Values.ipynb",
    "file_name": "Getting SHAP Values.ipynb",
    "file_type": "notebook",
    "content": "",
    "url": "https://github.com/datarobot-community/examples-for-data-scientists/blob/master/Model%20Evaluation/Python/Getting%20SHAP%20Values.ipynb",
    "size": 4465684,
    "description": "Jupyter notebook: Getting SHAP Values",
    "tags": [
      "evaluation"
    ]
  },
  {
    "repo_name": "examples-for-data-scientists",
    "file_path": "Model Evaluation/Python/Getting Word Cloud.ipynb",
    "file_name": "Getting Word Cloud.ipynb",
    "file_type": "notebook",
    "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Getting Word Cloud\\n\",\n    \"\\n\",\n    \"**Author**: Thodoris Petropoulos\\n\",\n    \"\\n\",\n    \"**Label**: Evaluating Models\\n\",\n    \"\\n\",\n    \"### Scope\\n\",\n    \"The scope of this notebook is to provide instructions on how to get the Word Cloud of a specific model using the Python API.\\n\",\n    \"\\n\",\n    \"### Background\\n\",\n    \"The word cloud is a type of insight available for some text-processing models for datasets containing text columns. You can get information about how the appearance of each ngram (word or sequence of words) in the text field affects the predicted target value.\\n\",\n    \"\\n\",\n    \"This example will show you how to obtain word cloud data and visualize it, similar to how DataRobot visualizes the word cloud in the “Model Insights” tab interface.\\n\",\n    \"\\n\",\n    \"### Requirements\\n\",\n    \"\\n\",\n    \"- Python version 3.7.3\\n\",\n    \"-  DataRobot API version 2.19.0. \\n\",\n    \"Small adjustments might be needed depending on the Python version and DataRobot API version you are using.\\n\",\n    \"\\n\",\n    \"Full documentation of the Python package can be found here: https://datarobot-public-api-client.readthedocs-hosted.com\\n\",\n    \"\\n\",\n    \"It is assumed you already have a DataRobot <code>Project</code> object and a DataRobot <code>Model</code> object.\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Import Libraries\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 11,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import datarobot as dr\\n\",\n    \"from colour import Color\\n\",\n    \"import wordcloud\\n\",\n    \"import numpy as np\\n\",\n    \"from datarobot.errors import ClientError\\n\",\n    \"import matplotlib.pyplot as plt\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Define some Colors\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 6,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"colors = [Color('#2458EB')]\\n\",\n    \"colors.extend(list(Color('#2458EB').range_to(Color('#31E7FE'), 81))[1:])\\n\",\n    \"colors.extend(list(Color('#31E7FE').range_to(Color('#8da0a2'), 21))[1:])\\n\",\n    \"colors.extend(list(Color('#a18f8c').range_to(Color('#ffad9e'), 21))[1:])\\n\",\n    \"colors.extend(list(Color('#ffad9e').range_to(Color('#d80909'), 81))[1:])\\n\",\n    \"webcolors = [c.get_web() for c in colors]\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Requesting Word Cloud\\n\",\n    \"Request word cloud with <code>get_word_cloud</code> method.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 7,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"Model('Auto-Tuned Word N-Gram Text Modeler using token occurrences - diag_1_desc')\"\n      ]\n     },\n     \"execution_count\": 7,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"models = project.get_models()\\n\",\n    \"\\n\",\n    \"model_with_word_cloud = None\\n\",\n    \"for model in models:\\n\",\n    \"    try:\\n\",\n    \"        model.get_word_cloud()\\n\",\n    \"        model_with_word_cloud = model\\n\",\n    \"        break\\n\",\n    \"    except ClientError as e:\\n\",\n    \"        if e.json['message'] and 'No word cloud data' in e.json['message']:\\n\",\n    \"            pass\\n\",\n    \"        else:\\n\",\n    \"            raise\\n\",\n    \"\\n\",\n    \"model_with_word_cloud\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 8,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"wc = model_with_word_cloud.get_word_cloud(exclude_stop_words=True)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Plotting Word Cloud\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 9,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"def word_cloud_plot(wc, font_path=None):\\n\",\n    \"    # Stopwords usually dominate any word cloud, so we will filter them out\\n\",\n    \"    dict_freq = {wc_word['ngram']: wc_word['frequency']\\n\",\n    \"                 for wc_word in wc.ngrams\\n\",\n    \"                 if not wc_word['is_stopword']}\\n\",\n    \"    dict_coef = {wc_word['ngram']: wc_word['coefficient']\\n\",\n    \"                 for wc_word in wc.ngrams}\\n\",\n    \"\\n\",\n    \"    def color_func(*args, **kwargs):\\n\",\n    \"        word = args[0]\\n\",\n    \"        palette_index = int(round(dict_coef[word] * 100)) + 100\\n\",\n    \"        r, g, b = colors[palette_index].get_rgb()\\n\",\n    \"        return 'rgb({:.0f}, {:.0f}, {:.0f})'.format(int(r * 255),\\n\",\n    \"                                                    int(g * 255),\\n\",\n    \"                                                    int(b * 255))\\n\",\n    \"\\n\",\n    \"    wc_image = wordcloud.WordCloud(stopwords=set(),\\n\",\n    \"                                   width=1024, height=1024,\\n\",\n    \"                                   relative_scaling=0.5,\\n\",\n    \"                                   prefer_horizontal=1,\\n\",\n    \"                                   color_func=color_func,\\n\",\n    \"                                   background_color=(0, 10, 29),\\n\",\n    \"                                   font_path=font_path).fit_words(dict_freq)\\n\",\n    \"    plt.imshow(wc_image, interpolation='bilinear')\\n\",\n    \"    plt.axis('off')\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 12,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"\\n\",\n      \"text/plain\": [\n       \"<Figure size 432x288 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {\n      \"needs_background\": \"light\"\n     },\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"word_cloud_plot(wc)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.7.3\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n",
    "url": "https://github.com/datarobot-community/examples-for-data-scientists/blob/master/Model%20Evaluation/Python/Getting%20Word%20Cloud.ipynb",
    "size": 111267,
    "description": "Jupyter notebook: Getting Word Cloud",
    "tags": [
      "evaluation"
    ]
  },
  {
    "repo_name": "examples-for-data-scientists",
    "file_path": "Model Evaluation/Python/Plotting Prediction Intervals for Time Series Projects.ipynb",
    "file_name": "Plotting Prediction Intervals for Time Series Projects.ipynb",
    "file_type": "notebook",
    "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Plotting Prediction Intervals for Time Series Projects\\n\",\n    \"\\n\",\n    \"**Author**: Lukas Innig\\n\",\n    \"\\n\",\n    \"**Label**: TIme Series\\n\",\n    \"\\n\",\n    \"### Scope\\n\",\n    \"The scope of this notebook is to provide instructions on how to plot prediction intervals for time series projects. This script will work for both multi and single time series projects.\\n\",\n    \"\\n\",\n    \"### Requirements\\n\",\n    \"\\n\",\n    \"- Python version 3.7.3\\n\",\n    \"-  DataRobot API version 2.19.0. \\n\",\n    \"Small adjustments might be needed depending on the Python version and DataRobot API version you are using.\\n\",\n    \"\\n\",\n    \"Full documentation of the Python package can be found here: https://datarobot-public-api-client.readthedocs-hosted.com\\n\",\n    \"\\n\",\n    \"It is assumed you already have a DataRobot Time Series <code>Project</code> object.\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Import Libraries\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 1,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import datarobot as dr\\n\",\n    \"import pandas as pd\\n\",\n    \"import numpy as np\\n\",\n    \"import matplotlib.pylab as plt\\n\",\n    \"import seaborn as sns\\n\",\n    \"%matplotlib inline\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Connect to DR, Define Project and Model\\n\",\n    \"\\n\",\n    \"Make sure you pick a model other than \\\"Recommended for Deployment\\\" as there is no backtesting calculations for that model. You will also need to **load the dataset you used to create the project** in a pandas dataframe called <code>data</code>\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"dr.Client(token = 'YOUR_API_KEY',\\n\",\n    \"         endpoint = 'YOUR_HOSTNAME')\\n\",\n    \"\\n\",\n    \"data = pd.read_excel('path/to/file') #The data that was used for the project. change pd.read_ method according to file type\\n\",\n    \"\\n\",\n    \"project = project = dr.Project.get('YOUR_PROJECT_ID') #Use this with project ID to get your project.\\n\",\n    \"model = [m for m in project.get_models()][1] #You can choose whichever model you wish other than the recommended for deployment\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Define function that returns training predictions\\n\",\n    \"Below function might take a while to finish running\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 3,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"def get_training_predictions(model):\\n\",\n    \"    print(f\\\"calculating training predictions for {model.model_type}\\\")\\n\",\n    \"    try:\\n\",\n    \"        backtests_pred_job = model.request_training_predictions(data_subset=dr.enums.DATA_SUBSET.ALL_BACKTESTS)\\n\",\n    \"        backtests_pred_job.wait_for_completion()\\n\",\n    \"        backtest_predictions = backtests_pred_job.get_result_when_complete().get_all_as_dataframe()\\n\",\n    \"    except:\\n\",\n    \"        pass\\n\",\n    \"    try:  \\n\",\n    \"        holdout_pred_job = model.request_training_predictions(data_subset=dr.enums.DATA_SUBSET.HOLDOUT)\\n\",\n    \"        holdout_pred_job.wait_for_completion()\\n\",\n    \"        holdout_predictions = holdout_pred_job.get_result_when_complete().get_all_as_dataframe()\\n\",\n    \"    except:\\n\",\n    \"        pass\\n\",\n    \"    all_predictions = dr.TrainingPredictions.list(model.project_id)\\n\",\n    \"\\n\",\n    \"    my_model_training_predictions = [p for p in all_predictions if p.model_id == model.id]\\n\",\n    \"    all_prediction_frames = [p.get_all_as_dataframe() for p in my_model_training_predictions]\\n\",\n    \"    if 'Holdout' in all_prediction_frames[0].partition_id.unique():\\n\",\n    \"        holdout_predictions = all_prediction_frames[0]\\n\",\n    \"        backtest_predictions = all_prediction_frames[1]\\n\",\n    \"    else:\\n\",\n    \"        holdout_predictions = all_prediction_frames[1]\\n\",\n    \"        backtest_predictions = all_prediction_frames[0]\\n\",\n    \"    return backtest_predictions, holdout_predictions\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 4,\n   \"metadata\": {\n    \"scrolled\": true\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"calculating training predictions for eXtreme Gradient Boosted Trees Regressor with Early Stopping\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"backtest_predictions, holdout_predictions = get_training_predictions(model)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Get partitioning information\\n\",\n    \"The script will figure out automatically if this is a single series or a multiseries project.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 5,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"partitioning = dr.DatetimePartitioning.get(project.id)\\n\",\n    \"\\n\",\n    \"try:\\n\",\n    \"    series_id_column = partitioning.multiseries_id_columns[0].replace(' (actual)','')\\n\",\n    \"    is_multiseries = True\\n\",\n    \"except:\\n\",\n    \"    is_multiseries = False\\n\",\n    \"    print('This seems to be a single Series Project')\\n\",\n    \"    \\n\",\n    \"date_column = partitioning.datetime_partition_column.replace(' (actual)','')\\n\",\n    \"target_column = project.target.replace(' (actual)','')\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Define function that calculates errors\\n\",\n    \"Between predictions made by DataRobot and actual values (with intervals).\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 6,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"def calculate_errors(backtest_preds, holdout_preds):\\n\",\n    \"    holdout_preds['timestamp'] = pd.to_datetime(holdout_preds['timestamp'], utc=False).dt.tz_localize(None)\\n\",\n    \"    holdout_preds['forecast_point'] = pd.to_datetime(holdout_preds['forecast_point'], utc=False).dt.tz_localize(None)\\n\",\n    \"    \\n\",\n    \"    if is_multiseries == True:\\n\",\n    \"        holdout_preds.rename(columns={'series_id':series_id_column, 'timestamp':date_column}, inplace=True)\\n\",\n    \"    else:\\n\",\n    \"        holdout_preds.rename(columns={'timestamp':date_column}, inplace=True)\\n\",\n    \"        \\n\",\n    \"    backtest_preds['timestamp'] = pd.to_datetime(backtest_preds['timestamp'], utc=False).dt.tz_localize(None)\\n\",\n    \"    backtest_preds['forecast_point'] = pd.to_datetime(backtest_preds['forecast_point'], utc=False).dt.tz_localize(None)\\n\",\n    \"    \\n\",\n    \"    if is_multiseries == True:\\n\",\n    \"        backtest_preds.rename(columns={'series_id':series_id_column, 'timestamp':date_column}, inplace=True)\\n\",\n    \"    else:\\n\",\n    \"        backtest_preds.rename(columns={'timestamp':date_column}, inplace=True)\\n\",\n    \"    \\n\",\n    \"    if is_multiseries == True:\\n\",\n    \"        holdout_preds_joined = holdout_preds.set_index([date_column, series_id_column]).join(data.set_index([date_column, series_id_column])).reset_index()\\n\",\n    \"        backtest_preds_joined = backtest_preds.set_index([date_column, series_id_column]).join(data.set_index([date_column, series_id_column])).reset_index()\\n\",\n    \"    else:\\n\",\n    \"        holdout_preds_joined = holdout_preds.set_index([date_column]).join(data.set_index([date_column])).reset_index()\\n\",\n    \"        backtest_preds_joined = backtest_preds.set_index([date_column]).join(data.set_index([date_column])).reset_index()\\n\",\n    \"    \\n\",\n    \"    if is_multiseries == True:\\n\",\n    \"        errors = backtest_preds_joined.groupby(['forecast_distance', series_id_column])[['prediction', target_column]].apply(lambda df: pd.Series(np.abs(df['prediction'] - df[target_column]).std()))\\n\",\n    \"\\n\",\n    \"        errors.columns=['prediction_interval']\\n\",\n    \"        holdout_preds_joined = holdout_preds_joined.set_index(['forecast_distance',series_id_column]).join(errors).reset_index()\\n\",\n    \"    else:\\n\",\n    \"        errors = backtest_preds_joined.groupby(['forecast_distance'])[['prediction', target_column]].apply(lambda df: pd.Series(np.abs(df['prediction'] - df[target_column]).std()))\\n\",\n    \"\\n\",\n    \"        errors.columns=['prediction_interval']\\n\",\n    \"        holdout_preds_joined = holdout_preds_joined.set_index(['forecast_distance']).join(errors).reset_index()\\n\",\n    \"\\n\",\n    \"    holdout_preds_joined['error_high'] = holdout_preds_joined['prediction'] + 2*holdout_preds_joined['prediction_interval']\\n\",\n    \"    holdout_preds_joined['error_low'] = holdout_preds_joined['prediction'] - 2*holdout_preds_joined['prediction_interval']\\n\",\n    \"    return holdout_preds_joined\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 10,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"prediction_data = calculate_errors(backtest_predictions, holdout_predictions)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Define function to plot prediction intervals\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 8,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"def plot_predictions(prediction_data, data, forecast_point, history):\\n\",\n    \"    if is_multiseries == True:\\n\",\n    \"        n_cols = data[series_id_column].drop_duplicates().shape[0]//2\\n\",\n    \"        fig, axs = plt.subplots(n_cols,2, figsize=(20,30))\\n\",\n    \"        plot_counter = 1\\n\",\n    \"        for c, df in prediction_data.groupby(series_id_column):\\n\",\n    \"            ax = plt.subplot(n_cols,2,plot_counter)\\n\",\n    \"            plot_counter += 1\\n\",\n    \"            pred_data_plot = df[df.forecast_point == forecast_point]\\n\",\n    \"            all_data_plot = data.loc[(data[series_id_column] == c) & (data.Date > pd.to_datetime(forecast_point) - history)]\\n\",\n    \"\\n\",\n    \"            g = sns.lineplot(data=pred_data_plot, x='Date', y='prediction', label='Prediction', color='green', linewidth=3)\\n\",\n    \"            ax.fill_between(pred_data_plot.Date.values, pred_data_plot.error_low, pred_data_plot.error_high, alpha=0.3, zorder=-10, color='lightgreen')\\n\",\n    \"\\n\",\n    \"            #sns.lineplot(data=df, x='Date', y='target')\\n\",\n    \"            g = sns.lineplot(data=all_data_plot[all_data_plot.Date <= forecast_point], x='Date', y=target_column, linewidth=3, color='blue', label='Actual')\\n\",\n    \"            g = sns.lineplot(data=all_data_plot[all_data_plot.Date > forecast_point], x='Date', y=target_column, linewidth=3, color='blue')\\n\",\n    \"            g.lines[2].set_linestyle(\\\"--\\\")\\n\",\n    \"            ax.axvline(forecast_point, linestyle='--', c='gray')\\n\",\n    \"\\n\",\n    \"            plt.xticks(rotation=45, ha='right')\\n\",\n    \"            plt.title(c)\\n\",\n    \"            #plt.show()\\n\",\n    \"        plt.tight_layout()\\n\",\n    \"        return fig\\n\",\n    \"    else:\\n\",\n    \"        df = prediction_data\\n\",\n    \"        fig, axs = plt.subplots(figsize=(15,7))\\n\",\n    \"        ax = plt.subplot(1,1,1)\\n\",\n    \"        pred_data_plot = df[df.forecast_point == forecast_point]\\n\",\n    \"        all_data_plot = data.loc[(data.Date > pd.to_datetime(forecast_point) - history)]\\n\",\n    \"\\n\",\n    \"        g = sns.lineplot(data=pred_data_plot, x='Date', y='prediction', label='Prediction', color='green', linewidth=3)\\n\",\n    \"        ax.fill_between(pred_data_plot.Date.values, pred_data_plot.error_low, pred_data_plot.error_high, alpha=0.3, zorder=-10, color='lightgreen')\\n\",\n    \"\\n\",\n    \"        #sns.lineplot(data=df, x='Date', y='target')\\n\",\n    \"        g = sns.lineplot(data=all_data_plot[all_data_plot.Date <= forecast_point], x='Date', y=target_column, linewidth=3, color='blue', label='Actual')\\n\",\n    \"        g = sns.lineplot(data=all_data_plot[all_data_plot.Date > forecast_point], x='Date', y=target_column, linewidth=3, color='blue')\\n\",\n    \"        g.lines[2].set_linestyle(\\\"--\\\")\\n\",\n    \"        ax.axvline(forecast_point, linestyle='--', c='gray')\\n\",\n    \"\\n\",\n    \"        plt.xticks(rotation=45, ha='right')\\n\",\n    \"        plt.tight_layout()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 9,\n   \"metadata\": {\n    \"scrolled\": false\n   },\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"\\n\",\n      \"text/plain\": [\n       \"<Figure size 1440x2160 with 10 Axes>\"\n      ]\n     },\n     \"execution_count\": 9,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    },\n    {\n     \"data\": {\n      \"image/png\": \"\\n\",\n      \"text/plain\": [\n       \"<Figure size 1440x2160 with 10 Axes>\"\n      ]\n     },\n     \"metadata\": {\n      \"needs_background\": \"light\"\n     },\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"plot_predictions(prediction_data, data, forecast_point='2014-06-07', history=pd.Timedelta(1, 'M'))\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.7.3\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n",
    "url": "https://github.com/datarobot-community/examples-for-data-scientists/blob/master/Model%20Evaluation/Python/Plotting%20Prediction%20Intervals%20for%20Time%20Series%20Projects.ipynb",
    "size": 752351,
    "description": "Jupyter notebook: Plotting Prediction Intervals for Time Series Projects",
    "tags": [
      "evaluation"
    ]
  },
  {
    "repo_name": "examples-for-data-scientists",
    "file_path": "Model Management/Python/Manage-models-in-production.ipynb",
    "file_name": "Manage-models-in-production.ipynb",
    "file_type": "notebook",
    "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Manage models in production\\n\",\n    \"\\n\",\n    \"This code example shows how to manage and monitor models deployed to production environments using DataRobot's Python client to accomplish various tasks: model deployment, replacement, deletion, and monitoring.\\n\",\n    \"\\n\",\n    \"Download this notebook from the [code examples home page](index).\\n\",\n    \"\\n\",\n    \"## Requirements\\n\",\n    \"\\n\",\n    \"* Python version 3.7.3+\\n\",\n    \"* DataRobot API version 2.19.0+\\n\",\n    \"* A DataRobot `Project` object\\n\",\n    \"* A DataRobot `Model` object\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Import libraries\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import datarobot as dr\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Create a deployment\\n\",\n    \"\\n\",\n    \"When creating a new deployment, you must provide a DataRobot model ID. The model ID represents a single instance of a model type, feature list, and sample size, used to differentiate models from the blueprint ID. The model ID is generated during Autopilot. Obtain the model ID from the UI by selecting the model to deploy from the Leaderboard and copying the string after `/models/` in the URL.\\n\",\n    \"\\n\",\n    \"A prediction server makes predictions against a deployment and is required for each deployment. Use the default prediction server unless you are an Enterprise user, in which case you should use a preconfigured prediction server instead.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# Get a list of prediction servers\\n\",\n    \"prediction_server = dr.PredictionServer.list()[0]\\n\",\n    \"\\n\",\n    \"project = dr.Project.get('<project_id>') # Provide your project object here\\n\",\n    \"model = project.get_models()[0]\\n\",\n    \"\\n\",\n    \"# Create a deployment\\n\",\n    \"deployment = dr.Deployment.create_from_learning_model(\\n\",\n    \"    model.id, label='New Deployment', description='A new deployment',\\n\",\n    \"    default_prediction_server_id=prediction_server.id)\\n\",\n    \"deployment\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### List available deployments\\n\",\n    \"\\n\",\n    \"Use the following command to list all available deployments.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"deployments = dr.Deployment.list()\\n\",\n    \"deployments\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"You can filter the returned deployments by passing an instance of the `DeploymentListFilters` class to the `filters` keyword argument:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"filters = dr.models.deployment.DeploymentListFilters(\\n\",\n    \"    role='OWNER',\\n\",\n    \"    accuracy_health=dr.enums.DEPLOYMENT_ACCURACY_HEALTH_STATUS.FAILING\\n\",\n    \")\\n\",\n    \"deployments = dr.Deployment.list(filters=filters)\\n\",\n    \"deployments\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Retrieve a deployment\\n\",\n    \"\\n\",\n    \"Retrieve a specific deployment by specifying its [deployment ID](https://docs.datarobot.com/en/docs/predictions/predapi/dep-pred.html#predictions-for-deployments), rather than listing all deployments.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 11,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"deployment = dr.Deployment.get(deployment_id='<deployment_id>') # Provide your own deployment ID\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Update a deployment\\n\",\n    \"\\n\",\n    \"Use the command below to update the label and description for a deployment.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 12,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"deployment = dr.Deployment.get(deployment_id='<deployment_id>') # Provide your own deployment ID\\n\",\n    \"deployment.update(label='New label')\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Delete a deployment\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"deployment = dr.Deployment.get(deployment_id='<deployment_id>') # Provide your own deployment ID\\n\",\n    \"deployment.delete()\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Model replacement\\n\",\n    \"\\n\",\n    \"You can replace a deployment's model without interrupting predictions. Model replacement is an asynchronous process which requires prepatory steps to complete the process. However, predictions made against the deployment will use the new model as soon as you initiate the replacement process. Note that the <code>replace_model()</code> function will not return until this process is fully completed.\\n\",\n    \"\\n\",\n    \"Alongside the new model's model ID, you must provide a reason for replacement, stored in the model history of the deployment for auditing purposes. An enum, <code>MODEL_REPLACEMENT_REASON</code>, is provided for this purpose, and all possible values are listed below:\\n\",\n    \"\\n\",\n    \"- MODEL_REPLACEMENT_REASON.ACCURACY\\n\",\n    \"- MODEL_REPLACEMENT_REASON.DATA_DRIFT\\n\",\n    \"- MODEL_REPLACEMENT_REASON.ERRORS\\n\",\n    \"- MODEL_REPLACEMENT_REASON.SCHEDULED_REFRESH\\n\",\n    \"- MODEL_REPLACEMENT_REASON.SCORING_SPEED\\n\",\n    \"- MODEL_REPLACEMENT_REASON.OTHER\\n\",\n    \"\\n\",\n    \"The code below demonstrates an example of model replacement:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"from datarobot.enums import MODEL_REPLACEMENT_REASON\\n\",\n    \"\\n\",\n    \"deployment=deployment.get(deployment_id='<deployment_id>') # Provide your own deployment ID\\n\",\n    \"deployment.model['id'], deployment.model['type']\\n\",\n    \"\\n\",\n    \"deployment.replace_model('<deployment_id>', MODEL_REPLACEMENT_REASON.ACCURACY) #Provide the new model ID\\n\",\n    \"deployment.model['id'], deployment.model['type']\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Model validation (pre-replacement)\\n\",\n    \"\\n\",\n    \"Before initiating a model replacement request, DataRobot recommends using the <code>validate_replacement_model()</code> function to verify if the new model can be used as a replacement.\\n\",\n    \"\\n\",\n    \"The <code>validate_replacement_model()</code> function returns the validation status, a message, and a checks dictionary. If the status is `passing` or `warning`, use <code>replace_model()</code> to replace the model. If the status is <code>failing</code>, refer to the checks dictionary for information as to why the new model cannot be used as a replacement.\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"deployment = dr.Deployment.get(deployment_id='<deployment_id>')\\n\",\n    \"status, message, checks = deployment.validate_replacement_model(new_model_id=model.id)\\n\",\n    \"status\\n\",\n    \"\\n\",\n    \"# `checks` can be inspected for detail, showing two examples here:\\n\",\n    \"checks['target']\\n\",\n    \"checks['permission']\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Model monitoring\\n\",\n    \"\\n\",\n    \"Deployment monitoring can be summarized by its three major components: [service health](https://docs.datarobot.com/en/docs/mlops/monitor/service-health.html), [data drift](https://docs.datarobot.com/en/docs/mlops/monitor/data-drift.html#data-drift-tab), and [accuracy](https://docs.datarobot.com/en/docs/mlops/monitor/deploy-accuracy.html). For a Deployment object, DataRobot provides `get` functions that allows you to query all of the monitoring data. Alternatively, you can retrieve monitoring data directly using a deployment ID.\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 22,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"from datarobot.models import Deployment, ServiceStats\\n\",\n    \"\\n\",\n    \"deployment_id = '<deployment_id>'\\n\",\n    \"\\n\",\n    \"# call `get` functions on a `Deployment` object\\n\",\n    \"deployment = Deployment.get(deployment_id)\\n\",\n    \"service_stats = deployment.get_service_stats()\\n\",\n    \"\\n\",\n    \"# directly fetch without a `Deployment` object\\n\",\n    \"service_stats = ServiceStats.get(deployment_id)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"When querying monitoring data, you can optionally provide a start and end time. DataRobot accepts either a datetime object or a string. Note that only top of the hour datetimes are accepted, for example: `2019-08-01T00:00:00Z`. By default, the end time of the query will be the next top of the hour, and the start time will be 7 days before the end time.\\n\",\n    \"\\n\",\n    \"In the \\\"over time\\\" variants, an optional `bucket_size` can be provided to specify the resolution of time buckets. For example, if the start time is `2019-08-01T00:00:00Z`, then the end time is `2019-08-02T00:00:00Z` and the `bucket_size` is `T1H`. In this case 24 time buckets are generated, each providing data calculated over one hour. Use `construct_duration_string()` to help construct a bucket size string.\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Service health\\n\",\n    \"\\n\",\n    \"Service health metrics capture a deployment’s ability to respond to prediction requests quickly and reliably. This helps identify bottlenecks and assess capacity, which is critical to proper provisioning. Use `SERVICE_STAT_METRIC.ALL` to retrieve a list of supported metrics.\\n\",\n    \"\\n\",\n    \"`ServiceStats` retrieves values for all service stats metrics; `ServiceStatsOverTime` can be used to fetch how one single metric changes over time.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"from datetime import datetime\\n\",\n    \"from datarobot.enums import SERVICE_STAT_METRIC\\n\",\n    \"from datarobot.helpers.partitioning_methods import construct_duration_string\\n\",\n    \"from datarobot.models import Deployment\\n\",\n    \"\\n\",\n    \"deployment = Deployment.get(deployment_id='<deployment_id>')\\n\",\n    \"service_stats = deployment.get_service_stats(\\n\",\n    \"    start_time=datetime(2019, 8, 1, hour=15),\\n\",\n    \"    end_time=datetime(2019, 8, 8, hour=15)\\n\",\n    \")\\n\",\n    \"service_stats[SERVICE_STAT_METRIC.TOTAL_PREDICTIONS]\\n\",\n    \"\\n\",\n    \"total_predictions = deployment.get_service_stats_over_time(\\n\",\n    \"    start_time=datetime(2019, 8, 1, hour=15),\\n\",\n    \"    end_time=datetime(2019, 8, 8, hour=15),\\n\",\n    \"    bucket_size=construct_duration_string(days=1),\\n\",\n    \"    metric=SERVICE_STAT_METRIC.TOTAL_PREDICTIONS\\n\",\n    \")\\n\",\n    \"total_predictions.bucket_values\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Data drift\\n\",\n    \"\\n\",\n    \"As training and production data change over time, a deployed model loses predictive power. The data surrounding the model is said to be drifting. By leveraging the training data and prediction data (also known as inference data) that is added to your deployment, data drift helps you to analyze a model's performance after it has been deployed.\\n\",\n    \"\\n\",\n    \"Deployment’s target drift and feature drift can be retrieved separately using `datarobot.models.TargetDrift` and `datarobot.models.FeatureDrift`. Use `DATA_DRIFT_METRIC.ALL` to retrieve a list of supported metrics.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"from datetime import datetime\\n\",\n    \"from datarobot.enums import DATA_DRIFT_METRIC\\n\",\n    \"from datarobot.models import Deployment, FeatureDrift\\n\",\n    \"\\n\",\n    \"deployment = Deployment.get(deployment_id='<deployment_id>')\\n\",\n    \"target_drift = deployment.get_target_drift(\\n\",\n    \"    start_time=datetime(2019, 8, 1, hour=15),\\n\",\n    \"    end_time=datetime(2019, 8, 8, hour=15)\\n\",\n    \")\\n\",\n    \"feature_drift_data = FeatureDrift.list(\\n\",\n    \"    deployment_id='<deployment_id>',\\n\",\n    \"    start_time=datetime(2019, 8, 1, hour=15),\\n\",\n    \"    end_time=datetime(2019, 8, 8, hour=15),\\n\",\n    \"    metric=DATA_DRIFT_METRIC.HELLINGER\\n\",\n    \")\\n\",\n    \"feature_drift = feature_drift_data[0]\\n\",\n    \"feature_drift.name\\n\",\n    \"feature_drift.drift_score\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"tags\": []\n   },\n   \"source\": [\n    \"### Accuracy\\n\",\n    \"\\n\",\n    \"Accuracy metrics help determine whether a model's quality is decaying and if you should consider replacing it. A collection of metrics are provided to measure the accuracy of a deployment’s predictions. For deployments with classification models, use `ACCURACY_METRIC.ALL_CLASSIFICATION` for all supported metrics. For deployments with regression models, use `ACCURACY_METRIC.ALL_REGRESSION` instead.\\n\",\n    \"\\n\",\n    \"`Accuracy` and `AccuracyOverTime` are provided to retrieve all default accuracy metrics and how one single metric change over time.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"tags\": []\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"from datetime import datetime\\n\",\n    \"from datarobot.enums import ACCURACY_METRIC\\n\",\n    \"from datarobot.helpers.partitioning_methods import construct_duration_string\\n\",\n    \"from datarobot.models import Deployment\\n\",\n    \"\\n\",\n    \"deployment = Deployment.get(deployment_id='<deployment_id>')\\n\",\n    \"accuracy = deployment.get_accuracy(\\n\",\n    \"    start_time=datetime(2021, 8, 1, hour=15),\\n\",\n    \"    end_time=datetime(2021, 8, 1, 15, 0)\\n\",\n    \")\\n\",\n    \"accuracy[ACCURACY_METRIC.RMSE]\\n\",\n    \"\\n\",\n    \"rmse = deployment.get_accuracy_over_time(\\n\",\n    \"    start_time=datetime(2021, 12, 1),\\n\",\n    \"    end_time=datetime(2021, 12, 3),\\n\",\n    \"    bucket_size=construct_duration_string(days=1),\\n\",\n    \"    metric=ACCURACY_METRIC.RMSE\\n\",\n    \")\\n\",\n    \"rmse.bucket_values\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3 (ipykernel)\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.8.12\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 4\n}\n",
    "url": "https://github.com/datarobot-community/examples-for-data-scientists/blob/master/Model%20Management/Python/Manage-models-in-production.ipynb",
    "size": 14769,
    "description": "Jupyter notebook: Manage-models-in-production",
    "tags": []
  },
  {
    "repo_name": "examples-for-data-scientists",
    "file_path": "Model Management/Python/Reuse Retrain Deploy.ipynb",
    "file_name": "Reuse Retrain Deploy.ipynb",
    "file_type": "notebook",
    "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"source\": [\n    \"## REUSING BLUEPRINTS, HYPERPARAMETERS and DEPLOYING MODELS via API\\n\",\n    \"\\n\",\n    \"**Author**: Tim Whittaker\\n\",\n    \"\\n\",\n    \"The point of this script is to illustrate the following\\n\",\n    \"<a id=\\\"toc\\\"></a>\\n\",\n    \"1. [Pull blueprint for a model from an existing project](#ebp)\\n\",\n    \"2. [Train that blueprint in a new project with a new data set](#tbp)\\n\",\n    \"3. [Deploy the model (or replace in a current deployment)](#deploy)\\n\",\n    \"4. [Keep the hyper parameters for step 2](#savehp)\"\n   ],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"source\": [\n    \"## Requirements\\n\",\n    \"* DataRobot Modeling API\\n\",\n    \"Please us `pip install datarobot --upgrade` to get latest and greatest.  \\n\",\n    \"\\n\",\n    \"__This example assumes that you have built a project using the wine quality dataset, and the project id and a specific model id are available.  If not, see wine_autopilot.py__\"\n   ],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 1,\n   \"source\": [\n    \"# # DataRobot upgrade command below if needed\\n\",\n    \"# !pip install datarobot --upgrade\"\n   ],\n   \"outputs\": [],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"source\": [\n    \"import pandas as pd\\n\",\n    \"import datarobot as dr\\n\",\n    \"from config import *\\n\",\n    \"from datetime import datetime\\n\",\n    \"import numpy as np\\n\",\n    \"import yaml\"\n   ],\n   \"outputs\": [\n    {\n     \"output_type\": \"stream\",\n     \"name\": \"stderr\",\n     \"text\": [\n      \"/anaconda3/lib/python3.7/site-packages/requests/__init__.py:91: RequestsDependencyWarning: urllib3 (1.25.2) or chardet (3.0.4) doesn't match a supported version!\\n\",\n      \"  RequestsDependencyWarning)\\n\"\n     ]\n    }\n   ],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"source\": [\n    \"## Get Data\"\n   ],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 3,\n   \"source\": [\n    \"## get data\\n\",\n    \"## we are actually going to break this up and use half as new data\\n\",\n    \"## the project we are pulling from was built on the entire wine-quality dataset.\\n\",\n    \"wine = pd.read_csv(\\\"https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv\\\", delimiter=\\\";\\\")\\n\",\n    \"np.random.seed(1)\\n\",\n    \"msk = np.random.rand(len(wine)) < 0.75\\n\",\n    \"old_data = wine[msk]\\n\",\n    \"new_data = wine[~msk]\"\n   ],\n   \"outputs\": [],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 4,\n   \"source\": [\n    \"new_data.describe()\"\n   ],\n   \"outputs\": [\n    {\n     \"output_type\": \"execute_result\",\n     \"data\": {\n      \"text/plain\": [\n       \"       fixed acidity  volatile acidity  citric acid  residual sugar  \\\\\\n\",\n       \"count    1219.000000       1219.000000  1219.000000     1219.000000   \\n\",\n       \"mean        6.845406          0.276948     0.336678        6.399754   \\n\",\n       \"std         0.861629          0.096943     0.126456        5.078021   \\n\",\n       \"min         3.800000          0.080000     0.000000        0.600000   \\n\",\n       \"25%         6.300000          0.210000     0.270000        1.700000   \\n\",\n       \"50%         6.800000          0.260000     0.320000        5.200000   \\n\",\n       \"75%         7.400000          0.320000     0.390000       10.000000   \\n\",\n       \"max        11.800000          1.005000     1.660000       31.600000   \\n\",\n       \"\\n\",\n       \"         chlorides  free sulfur dioxide  total sulfur dioxide      density  \\\\\\n\",\n       \"count  1219.000000          1219.000000           1219.000000  1219.000000   \\n\",\n       \"mean      0.045771            35.106235            137.548811     0.993951   \\n\",\n       \"std       0.022840            16.396451             42.710354     0.003004   \\n\",\n       \"min       0.014000             3.000000             18.000000     0.987130   \\n\",\n       \"25%       0.035000            23.000000            107.000000     0.991665   \\n\",\n       \"50%       0.042000            33.000000            133.000000     0.993700   \\n\",\n       \"75%       0.050000            45.000000            167.000000     0.995920   \\n\",\n       \"max       0.301000           118.500000            366.500000     1.010300   \\n\",\n       \"\\n\",\n       \"                pH    sulphates      alcohol      quality  \\n\",\n       \"count  1219.000000  1219.000000  1219.000000  1219.000000  \\n\",\n       \"mean      3.187916     0.484668    10.564731     5.922888  \\n\",\n       \"std       0.149502     0.107361     1.246939     0.902811  \\n\",\n       \"min       2.790000     0.230000     8.400000     3.000000  \\n\",\n       \"25%       3.090000     0.400000     9.500000     5.000000  \\n\",\n       \"50%       3.180000     0.470000    10.400000     6.000000  \\n\",\n       \"75%       3.280000     0.540000    11.400000     6.000000  \\n\",\n       \"max       3.810000     1.000000    14.000000     9.000000  \"\n      ],\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>fixed acidity</th>\\n\",\n       \"      <th>volatile acidity</th>\\n\",\n       \"      <th>citric acid</th>\\n\",\n       \"      <th>residual sugar</th>\\n\",\n       \"      <th>chlorides</th>\\n\",\n       \"      <th>free sulfur dioxide</th>\\n\",\n       \"      <th>total sulfur dioxide</th>\\n\",\n       \"      <th>density</th>\\n\",\n       \"      <th>pH</th>\\n\",\n       \"      <th>sulphates</th>\\n\",\n       \"      <th>alcohol</th>\\n\",\n       \"      <th>quality</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>count</th>\\n\",\n       \"      <td>1219.000000</td>\\n\",\n       \"      <td>1219.000000</td>\\n\",\n       \"      <td>1219.000000</td>\\n\",\n       \"      <td>1219.000000</td>\\n\",\n       \"      <td>1219.000000</td>\\n\",\n       \"      <td>1219.000000</td>\\n\",\n       \"      <td>1219.000000</td>\\n\",\n       \"      <td>1219.000000</td>\\n\",\n       \"      <td>1219.000000</td>\\n\",\n       \"      <td>1219.000000</td>\\n\",\n       \"      <td>1219.000000</td>\\n\",\n       \"      <td>1219.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>mean</th>\\n\",\n       \"      <td>6.845406</td>\\n\",\n       \"      <td>0.276948</td>\\n\",\n       \"      <td>0.336678</td>\\n\",\n       \"      <td>6.399754</td>\\n\",\n       \"      <td>0.045771</td>\\n\",\n       \"      <td>35.106235</td>\\n\",\n       \"      <td>137.548811</td>\\n\",\n       \"      <td>0.993951</td>\\n\",\n       \"      <td>3.187916</td>\\n\",\n       \"      <td>0.484668</td>\\n\",\n       \"      <td>10.564731</td>\\n\",\n       \"      <td>5.922888</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>std</th>\\n\",\n       \"      <td>0.861629</td>\\n\",\n       \"      <td>0.096943</td>\\n\",\n       \"      <td>0.126456</td>\\n\",\n       \"      <td>5.078021</td>\\n\",\n       \"      <td>0.022840</td>\\n\",\n       \"      <td>16.396451</td>\\n\",\n       \"      <td>42.710354</td>\\n\",\n       \"      <td>0.003004</td>\\n\",\n       \"      <td>0.149502</td>\\n\",\n       \"      <td>0.107361</td>\\n\",\n       \"      <td>1.246939</td>\\n\",\n       \"      <td>0.902811</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>min</th>\\n\",\n       \"      <td>3.800000</td>\\n\",\n       \"      <td>0.080000</td>\\n\",\n       \"      <td>0.000000</td>\\n\",\n       \"      <td>0.600000</td>\\n\",\n       \"      <td>0.014000</td>\\n\",\n       \"      <td>3.000000</td>\\n\",\n       \"      <td>18.000000</td>\\n\",\n       \"      <td>0.987130</td>\\n\",\n       \"      <td>2.790000</td>\\n\",\n       \"      <td>0.230000</td>\\n\",\n       \"      <td>8.400000</td>\\n\",\n       \"      <td>3.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>25%</th>\\n\",\n       \"      <td>6.300000</td>\\n\",\n       \"      <td>0.210000</td>\\n\",\n       \"      <td>0.270000</td>\\n\",\n       \"      <td>1.700000</td>\\n\",\n       \"      <td>0.035000</td>\\n\",\n       \"      <td>23.000000</td>\\n\",\n       \"      <td>107.000000</td>\\n\",\n       \"      <td>0.991665</td>\\n\",\n       \"      <td>3.090000</td>\\n\",\n       \"      <td>0.400000</td>\\n\",\n       \"      <td>9.500000</td>\\n\",\n       \"      <td>5.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>50%</th>\\n\",\n       \"      <td>6.800000</td>\\n\",\n       \"      <td>0.260000</td>\\n\",\n       \"      <td>0.320000</td>\\n\",\n       \"      <td>5.200000</td>\\n\",\n       \"      <td>0.042000</td>\\n\",\n       \"      <td>33.000000</td>\\n\",\n       \"      <td>133.000000</td>\\n\",\n       \"      <td>0.993700</td>\\n\",\n       \"      <td>3.180000</td>\\n\",\n       \"      <td>0.470000</td>\\n\",\n       \"      <td>10.400000</td>\\n\",\n       \"      <td>6.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>75%</th>\\n\",\n       \"      <td>7.400000</td>\\n\",\n       \"      <td>0.320000</td>\\n\",\n       \"      <td>0.390000</td>\\n\",\n       \"      <td>10.000000</td>\\n\",\n       \"      <td>0.050000</td>\\n\",\n       \"      <td>45.000000</td>\\n\",\n       \"      <td>167.000000</td>\\n\",\n       \"      <td>0.995920</td>\\n\",\n       \"      <td>3.280000</td>\\n\",\n       \"      <td>0.540000</td>\\n\",\n       \"      <td>11.400000</td>\\n\",\n       \"      <td>6.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>max</th>\\n\",\n       \"      <td>11.800000</td>\\n\",\n       \"      <td>1.005000</td>\\n\",\n       \"      <td>1.660000</td>\\n\",\n       \"      <td>31.600000</td>\\n\",\n       \"      <td>0.301000</td>\\n\",\n       \"      <td>118.500000</td>\\n\",\n       \"      <td>366.500000</td>\\n\",\n       \"      <td>1.010300</td>\\n\",\n       \"      <td>3.810000</td>\\n\",\n       \"      <td>1.000000</td>\\n\",\n       \"      <td>14.000000</td>\\n\",\n       \"      <td>9.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ]\n     },\n     \"metadata\": {},\n     \"execution_count\": 4\n    }\n   ],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"source\": [\n    \"<a id=\\\"ebp\\\"></a>\\n\",\n    \"## Get an existing blueprint\\n\",\n    \"[Table of Contents](#toc) \"\n   ],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 5,\n   \"source\": [\n    \"## config datarobot Client\\n\",\n    \"## Don't keep api token in script.  Place your token in a config file\\n\",\n    \"## so there is no concern of accidentally sharing.  See config.py\\n\",\n    \"dr.Client(token=DATAROBOT_API_TOKEN, endpoint=DATAROBOT_ENDPOINT)\\n\",\n    \"\\n\",\n    \"## original project id and original model id are accessible from the gui url\\n\",\n    \"## just click on desired model in leaderboard and pull approapriate ids from url\\n\",\n    \"## for example.\\n\",\n    \"## https://app.datarobot.com/projects/<project_id>/models/<model_id>/blueprint\\n\",\n    \"original_pid = \\\"5cf71ab5d9436e2c4d0c7a7b\\\"\\n\",\n    \"original_mid = \\\"5cf71c005ff3772856c2a81b\\\"\\n\",\n    \"\\n\",\n    \"## ============================================================================#\\n\",\n    \"## 1. Pull blueprint for a model from an existing project\\n\",\n    \"## all we now at this point is the original project id\\n\",\n    \"## as well as the model id we want to use.\\n\",\n    \"## the project id and model id are available in gui by clicking on the model\\n\",\n    \"## and pulling info from url, for example\\n\",\n    \"## https://app.datarobot.com/projects/<project_id>/models/<model_id>/blueprint\\n\",\n    \"\\n\",\n    \"re_orig_project = dr.Project.get(project_id=original_pid)\\n\",\n    \"blueprints = re_orig_project.get_blueprints()\\n\",\n    \"models = re_orig_project.get_models()\\n\",\n    \"\\n\",\n    \"xgb_model = [m for m in models if m.id == original_mid].pop()\\n\",\n    \"\\n\",\n    \"xgb_blueprint = [bp for bp in blueprints if bp.id == xgb_model.blueprint_id].pop()\\n\",\n    \"## instead of finding the particular blueprint, we could just use\\n\",\n    \"# xgb_blueprint = xgb_model.blueprint_id\\n\",\n    \"## be advised this returns a string and not an actual Blueprint object.\\n\",\n    \"## ============================================================================#\\n\"\n   ],\n   \"outputs\": [],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"source\": [\n    \"<a id=\\\"tbp\\\"></a>\\n\",\n    \"## Train that blueprint in a new project with a new data set\\n\",\n    \"[Table of Contents](#toc)\"\n   ],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 6,\n   \"source\": [\n    \"## ============================================================================#\\n\",\n    \"## 2. Train on that blueprint in a new project with a new data set\\n\",\n    \"## one thing to consider - do we want the same exact set of hyperparameters and blueprint\\n\",\n    \"## used in the previous project (case a), or do we just want the same blue print (case b)\\n\",\n    \"## and let DataRobot figure out the new set of best hyperparameters for the data?\\n\",\n    \"## there is a chance it will learn the same hyperparameters on the new data.  \\n\",\n    \"\\n\",\n    \"## create a new project\\n\",\n    \"new_project = dr.Project.create(sourcedata=new_data,\\n\",\n    \"                           project_name='new wine data {}'.format(datetime.now()))\\n\",\n    \"new_project.set_target(target=\\\"quality\\\", mode=\\\"manual\\\")\\n\",\n    \"\\n\",\n    \"## here we are using the blueprint only.\\n\",\n    \"## as DataRobot runs the model is will select the best hyperparameters based on the\\n\",\n    \"## data.  It is entirely possible that DataRobot will select the same hyperparameters \\n\",\n    \"## as in the original project.  \\n\",\n    \"new_project.train(xgb_blueprint, source_project_id=original_pid, sample_pct=64)\\n\",\n    \"## the following would also have worked\\n\",\n    \"# new_project.train(xgb_model.blueprint_id, source_project_id=original_pid, sample_pct=43)\\n\",\n    \"model_job = new_project.get_model_jobs()\\n\",\n    \"done = model_job[0].get_result_when_complete()\"\n   ],\n   \"outputs\": [],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 13,\n   \"source\": [\n    \"new_features = new_project.get_features()\\n\",\n    \"orig_features = re_orig_project.get_features()\\n\",\n    \"\\n\",\n    \"new_features = set( [ (f.name, f.feature_type) for f in new_features])\\n\",\n    \"orig_features = set( [ (f.name, f.feature_type) for f in orig_features])\\n\"\n   ],\n   \"outputs\": [],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 17,\n   \"source\": [\n    \"if orig_features.difference(new_features) != set():\\n\",\n    \"    print(\\\"features in new project are different from old project on basis of name and type\\\")\"\n   ],\n   \"outputs\": [],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"source\": [\n    \"### Reuse hyperparameters from original project\"\n   ],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 7,\n   \"source\": [\n    \"## now suppose that I wanted to use the same exact set of hyperparameters as used\\n\",\n    \"## in the original project.\\n\",\n    \"hyper_params = xgb_model.get_advanced_tuning_parameters()\\n\",\n    \"## PLEASE BE ADVISED: as of DR Python API 2.17, the \\\"default_value\\\" key contains\\n\",\n    \"## best of searched parameters.  This may change in a later version.\\n\",\n    \"## PLEASE BE ADVISED: some models aren't tunable, thus an exception will be tossed.\\n\",\n    \"## If `get_advanced_tuning_parameters` tosses an exception with a 500 internal\\n\",\n    \"## server error message, please reach out to support.\\n\",\n    \"\\n\",\n    \"## the best of searched hyperparameters.\\n\",\n    \"best_hyper_params = dict([(param[\\\"parameter_id\\\"], param[\\\"default_value\\\"]) for param in hyper_params[\\\"tuning_parameters\\\"]])\\n\",\n    \"new_xgb = new_project.get_models()[0]\\n\",\n    \"model_job = new_xgb.advanced_tune(best_hyper_params, description=\\\"hyperparameters from original project {}\\\".format(original_pid))\\n\",\n    \"## PLEASE BE ADVISED: an exception will be tossed if a model on the leaderboard with sameblueprint has the\\n\",\n    \"## same set of hyperparameters.  This means that when we trainined on the blueprint, and let DR learn they \\n\",\n    \"## hyperparameters, it learned the same set.  \\n\",\n    \"new_xgb_tuned = model_job.get_result_when_complete()\\n\",\n    \"\\n\",\n    \"## next open the leaderboard browser to view the models.\\n\",\n    \"## the model with the old hyperparameters will have a description as set above.\\n\",\n    \"new_project.open_leaderboard_browser()\"\n   ],\n   \"outputs\": [\n    {\n     \"output_type\": \"execute_result\",\n     \"data\": {\n      \"text/plain\": [\n       \"True\"\n      ]\n     },\n     \"metadata\": {},\n     \"execution_count\": 7\n    }\n   ],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"source\": [\n    \"<a id=\\\"deploy\\\"></a>\\n\",\n    \"## Deploy\\n\",\n    \"[Table of Contents](#toc)\"\n   ],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 8,\n   \"source\": [\n    \"## 3. Deploy the model (or replace in a current deployment)\\n\",\n    \"## model deployment is available in python api 2.17.0 and this script will be\\n\",\n    \"## updated soon.\\n\",\n    \"print(\\\"=\\\")\\n\",\n    \"prediction_server = dr.PredictionServer.list()[0]\\n\",\n    \"prediction_server.id\\n\",\n    \"\\n\",\n    \"## grab current deployments\\n\",\n    \"deployments = dr.Deployment.list()\\n\",\n    \"\\n\",\n    \"## let's deploy the xgboost from the original project\\n\",\n    \"deployment = dr.Deployment.create_from_learning_model(\\n\",\n    \"    xgb_model.id, label='xgBoost Model', description='A new deployment',\\n\",\n    \"    default_prediction_server_id=prediction_server.id)\\n\",\n    \"\\n\",\n    \"print(deployment.id)  ## this is also available via gui url\\n\",\n    \"deployment_id = deployment.id\\n\",\n    \"## clean up\\n\",\n    \"del deployment, deployments\"\n   ],\n   \"outputs\": [\n    {\n     \"output_type\": \"stream\",\n     \"name\": \"stdout\",\n     \"text\": [\n      \"=\\n\",\n      \"5cf913b787cf0a073b663311\\n\"\n     ]\n    }\n   ],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"source\": [\n    \"### Replace Deployment\"\n   ],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 9,\n   \"source\": [\n    \"## oops, we should have deployed the new xgBoost model tuned with the\\n\",\n    \"## original models hyperparameters\\n\",\n    \"from datarobot.enums import MODEL_REPLACEMENT_REASON\\n\",\n    \"\\n\",\n    \"deployment = dr.Deployment.get(deployment_id=deployment_id)\\n\",\n    \"\\n\",\n    \"print(\\\"current deployment details\\\\n\\\\tmodel type:{}\\\\n\\\\tmodel id:{}\\\".format(deployment.model['type'],deployment.model['id']))\\n\",\n    \"\\n\",\n    \"deployment.replace_model(new_xgb_tuned.id, MODEL_REPLACEMENT_REASON.OTHER)\\n\",\n    \"\\n\",\n    \"print(\\\"new deployment details\\\\n\\\\tmodel type:{}\\\\n\\\\tmodel id:{}\\\".format(deployment.model['type'],deployment.model['id']))\"\n   ],\n   \"outputs\": [\n    {\n     \"output_type\": \"stream\",\n     \"name\": \"stdout\",\n     \"text\": [\n      \"current deployment details\\n\",\n      \"\\tmodel type:eXtreme Gradient Boosted Trees Regressor\\n\",\n      \"\\tmodel id:5cf71c005ff3772856c2a81b\\n\",\n      \"new deployment details\\n\",\n      \"\\tmodel type:eXtreme Gradient Boosted Trees Regressor (Least-Squares Loss)\\n\",\n      \"\\tmodel id:5cf91396d9436e76200c7ace\\n\"\n     ]\n    }\n   ],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"source\": [\n    \"Example of the new model on the leaderboard as well as a description.\\n\",\n    \"<img src=\\\"img/scree-grab.png\\\"></img>\"\n   ],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"source\": [\n    \"<a id=\\\"savehp\\\"></a>\\n\",\n    \"## Stash hyperparameters\\n\",\n    \"[Table of Contents](#toc)\"\n   ],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 18,\n   \"source\": [\n    \"try:\\n\",\n    \"    assert(yaml.__version__ == \\\"5.1\\\")\\n\",\n    \"except:\\n\",\n    \"    print(\\\"loading hyperparameters from yaml may throw and exception.  Try setting Loader=None\\\")\"\n   ],\n   \"outputs\": [],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 19,\n   \"source\": [\n    \"## 4. Keep the hyper parameters for step 2\\n\",\n    \"## In any event, regardless of which model we want to keep we can easily store hyperparameters on disk\\n\",\n    \"## options include yaml, pickle, etc.  Yaml example below.\\n\",\n    \"\\n\",\n    \"with open(\\\"model_hyperparameters.yaml\\\", \\\"w\\\") as f:\\n\",\n    \"    f.write( yaml.dump(hyper_params))\\n\",\n    \"\\n\",\n    \"## load hyperparameters back into python dictionary.\\n\",\n    \"with open(\\\"model_hyperparameters.yaml\\\", \\\"r\\\") as f:\\n\",\n    \"    hyperparams_dict = yaml.load(f, Loader=yaml.FullLoader)\"\n   ],\n   \"outputs\": [],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"source\": [],\n   \"outputs\": [],\n   \"metadata\": {}\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.7.3\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}",
    "url": "https://github.com/datarobot-community/examples-for-data-scientists/blob/master/Model%20Management/Python/Reuse%20Retrain%20Deploy.ipynb",
    "size": 21249,
    "description": "Jupyter notebook: Reuse Retrain Deploy",
    "tags": []
  },
  {
    "repo_name": "examples-for-data-scientists",
    "file_path": "Model Management/Python/Sharing Projects.ipynb",
    "file_name": "Sharing Projects.ipynb",
    "file_type": "notebook",
    "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Sharing Projects\\n\",\n    \"\\n\",\n    \"**Author**: Peter Simon\\n\",\n    \"\\n\",\n    \"### Scope\\n\",\n    \"\\n\",\n    \"The scope of this notebook is to provide instructions on how to share projects with colleagues through the Python API.\\n\",\n    \"\\n\",\n    \"### Requirements\\n\",\n    \"\\n\",\n    \"- Python version 3.7.3\\n\",\n    \"-  DataRobot API version 2.19.0. \\n\",\n    \"Small adjustments might be needed depending on the Python version and DataRobot API version you are using.\\n\",\n    \"\\n\",\n    \"Full documentation of the Python package can be found here: https://datarobot-public-api-client.readthedocs-hosted.com\\n\",\n    \"\\n\",\n    \"It is assumed you already have a DataRobot <code>Project</code> object.\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Import libraries\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 13,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import datarobot as dr\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Define people to share projects with\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 25,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# who to share the project(s). Make sure the emails are valid.\\n\",\n    \"share_targets = ['name.surname@datarobot.com', 'name.surname_2@datarobot.com']\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Share project\\n\",\n    \"You can share the project using the <code>datarobot.SharingAccess></code> command. There are multiple sharing roles:\\n\",\n    \"\\n\",\n    \"- <code> dr.enums.SHARING_ROLE.CONSUMER</code>\\n\",\n    \"- <code> dr.enums.SHARING_ROLE.OWNER</code>\\n\",\n    \"- <code> dr.enums.SHARING_ROLE.USER</code>\\n\",\n    \"\\n\",\n    \"so pick one according to your needs.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 24,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"try:\\n\",\n    \"    for u in share_targets:\\n\",\n    \"        new_access = dr.SharingAccess(username=u, role=dr.enums.SHARING_ROLE.OWNER) #Multiple sharing roles exist\\n\",\n    \"        project.share([new_access])\\n\",\n    \"\\n\",\n    \"except dr.errors.ClientError as e:\\n\",\n    \"    print('skipped')\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.7.3\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n",
    "url": "https://github.com/datarobot-community/examples-for-data-scientists/blob/master/Model%20Management/Python/Sharing%20Projects.ipynb",
    "size": 2736,
    "description": "Jupyter notebook: Sharing Projects",
    "tags": []
  },
  {
    "repo_name": "examples-for-data-scientists",
    "file_path": "Model Management/Python/Uploading Actuals to a DataRobot Deployment.ipynb",
    "file_name": "Uploading Actuals to a DataRobot Deployment.ipynb",
    "file_type": "notebook",
    "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Uploading Actuals to a DataRobot Deployment\\n\",\n    \"\\n\",\n    \"**Author**: Thodoris Petropoulos\\n\",\n    \"\\n\",\n    \"**Label**: Model Deployment\\n\",\n    \"\\n\",\n    \"### Scope\\n\",\n    \"The scope of this notebook is to provide instructions on how to upload actuals into the DataRobot platform in order to calculate accuracy metrics.\\n\",\n    \"\\n\",\n    \"### Requirements\\n\",\n    \"\\n\",\n    \"- Python version 3.7.3\\n\",\n    \"-  DataRobot API version 2.19.0. \\n\",\n    \"Small adjustments might be needed depending on the Python version and DataRobot API version you are using.\\n\",\n    \"\\n\",\n    \"Full documentation of the Python package can be found here: https://datarobot-public-api-client.readthedocs-hosted.com\\n\",\n    \"\\n\",\n    \"It is assumed you already have a deployed model and you know the id of the deployment.\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Import Libraries\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 25,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import datarobot as dr\\n\",\n    \"import pandas as pd\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Data Structure\\n\",\n    \"The data that will be uploaded should have the below format:\\n\",\n    \"\\n\",\n    \"| association_id | actual_value |\\n\",\n    \"|----------------|--------------|\\n\",\n    \"| ΑΑΑ            | 0            |\\n\",\n    \"| AAB            | 1            |\\n\",\n    \"| AAC            | 0            |\\n\",\n    \"| AAD            | 0            |\\n\",\n    \"| AAE            | 0            |\\n\",\n    \"| AAF            | 1            |\\n\",\n    \"| AAG            | 1            |\\n\",\n    \"| AAH            | 0            |\\n\",\n    \"\\n\",\n    \"With the **exact** column names.\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Uploading data\\n\",\n    \"We will be using the <code>submit_actuals</code> method of the DataRobot <code>deployment</code> object to upload the actuals into the platform. DataRobot will calculate accuracy using the predicted values and the actual values just uploaded.\\n\",\n    \"\\n\",\n    \"Fill in the deployment of your model\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"deployment_id = 'YOUR_DEPLOYMENT_ID'\\n\",\n    \"actuals = pd.read_csv('.path_to_file/file.csv')\\n\",\n    \"\\n\",\n    \"deployment = dr.Deployment.get(deployment_id=deployment_id)\\n\",\n    \"deployment.submit_actuals(actuals)\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.7.3\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n",
    "url": "https://github.com/datarobot-community/examples-for-data-scientists/blob/master/Model%20Management/Python/Uploading%20Actuals%20to%20a%20DataRobot%20Deployment.ipynb",
    "size": 3032,
    "description": "Jupyter notebook: Uploading Actuals to a DataRobot Deployment",
    "tags": [
      "datarobot",
      "deployment"
    ]
  },
  {
    "repo_name": "examples-for-data-scientists",
    "file_path": "Advanced Tuning and Partitioning/Python/Advanced Tuning.ipynb",
    "file_name": "Advanced Tuning.ipynb",
    "file_type": "notebook",
    "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Advanced Tuning\\n\",\n    \"**Author**: Thodoris Petropoulos\\n\",\n    \"\\n\",\n    \"**Label**: Modeling Options\\n\",\n    \"### Scope\\n\",\n    \"The scope of this notebook is to provide instructions on how to do advanced tuning using the Python API.\\n\",\n    \"\\n\",\n    \"### Background\\n\",\n    \"\\n\",\n    \"DataRobot is very good at choosing optimal hyperparameters for models to maximize speed and accuracy. However, sometimes we wish to change those hyperparameters ourselves.  This could be because we know something that DataRobot does not, we want to experiment with different approaches, or we have some other reason to use a particular parameter.\\n\",\n    \"\\n\",\n    \"### Requirements\\n\",\n    \"\\n\",\n    \"- Python version 3.7.3\\n\",\n    \"-  DataRobot API version 2.19.0. \\n\",\n    \"Small adjustments might be needed depending on the Python version and DataRobot API version you are using.\\n\",\n    \"\\n\",\n    \"Full documentation of the Python package can be found here: https://datarobot-public-api-client.readthedocs-hosted.com\\n\",\n    \"\\n\",\n    \"It is assumed you already have a DataRobot <code>Project</code> object and a DataRobot <code>Model</code> object.\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Import Libraries\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import datarobot as dr\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Advanced Tuning Interface\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"The easiest way to do advanced tuning is to set up a model and use the <code>start_advanced_tunning_session</code> method.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 4,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"tune = model.start_advanced_tuning_session()\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"This function returns an object that you can use to see the default, current value, and possible values for each one of the parameters you can change.\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Get Data on Parameters Available for Tuning\\n\",\n    \"If you wish to see the underlying data of which parameters are available for tuning for a model and what their default, current, and possible values are, then you can turn to <code>get_parameters</code>:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 5,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"{'tuning_description': None,\\n\",\n       \" 'tuning_parameters': [{'parameter_name': 'enet_alpha',\\n\",\n       \"   'parameter_id': 'eyJhcmciOiJlbmV0X2FscGhhIiwidmlkIjoiMTEifQ',\\n\",\n       \"   'default_value': 0.5,\\n\",\n       \"   'current_value': 0.5,\\n\",\n       \"   'task_name': 'Elastic-Net Classifier (mixing alpha=0.5 / Binomial Deviance) with Unsupervised Learning Features',\\n\",\n       \"   'constraints': {'select': {'values': ['auto']},\\n\",\n       \"    'float': {'min': 0.0, 'max': 1.0, 'supports_grid_search': True}},\\n\",\n       \"   'value': None},\\n\",\n       \"  {'parameter_name': 'enet_lambda',\\n\",\n       \"   'parameter_id': 'eyJhcmciOiJlbmV0X2xhbWJkYSIsInZpZCI6IjExIn0',\\n\",\n       \"   'default_value': 0.00809400121608,\\n\",\n       \"   'current_value': 0.00809400121608,\\n\",\n       \"   'task_name': 'Elastic-Net Classifier (mixing alpha=0.5 / Binomial Deviance) with Unsupervised Learning Features',\\n\",\n       \"   'constraints': {'select': {'values': ['auto']},\\n\",\n       \"    'float': {'min': 1e-10,\\n\",\n       \"     'max': 0.9999999999,\\n\",\n       \"     'supports_grid_search': True}},\\n\",\n       \"   'value': None},\\n\",\n       \"  {'parameter_name': 'fit_alpha_scaler',\\n\",\n       \"   'parameter_id': 'eyJhcmciOiJmaXRfYWxwaGFfc2NhbGVyIiwidmlkIjoiMTEifQ',\\n\",\n       \"   'default_value': 'True',\\n\",\n       \"   'current_value': 'True',\\n\",\n       \"   'task_name': 'Elastic-Net Classifier (mixing alpha=0.5 / Binomial Deviance) with Unsupervised Learning Features',\\n\",\n       \"   'constraints': {'select': {'values': ['False', 'True']}},\\n\",\n       \"   'value': None},\\n\",\n       \"  {'parameter_name': 'fit_intercept',\\n\",\n       \"   'parameter_id': 'eyJhcmciOiJmaXRfaW50ZXJjZXB0IiwidmlkIjoiMTEifQ',\\n\",\n       \"   'default_value': 'True',\\n\",\n       \"   'current_value': 'True',\\n\",\n       \"   'task_name': 'Elastic-Net Classifier (mixing alpha=0.5 / Binomial Deviance) with Unsupervised Learning Features',\\n\",\n       \"   'constraints': {'select': {'values': ['False', 'True']}},\\n\",\n       \"   'value': None},\\n\",\n       \"  {'parameter_name': 'max_iter',\\n\",\n       \"   'parameter_id': 'eyJhcmciOiJtYXhfaXRlciIsInZpZCI6IjExIn0',\\n\",\n       \"   'default_value': 100,\\n\",\n       \"   'current_value': 100,\\n\",\n       \"   'task_name': 'Elastic-Net Classifier (mixing alpha=0.5 / Binomial Deviance) with Unsupervised Learning Features',\\n\",\n       \"   'constraints': {'int': {'min': 1,\\n\",\n       \"     'max': 1000000,\\n\",\n       \"     'supports_grid_search': False}},\\n\",\n       \"   'value': None},\\n\",\n       \"  {'parameter_name': 'random_state',\\n\",\n       \"   'parameter_id': 'eyJhcmciOiJyYW5kb21fc3RhdGUiLCJ2aWQiOiIxMSJ9',\\n\",\n       \"   'default_value': 1234,\\n\",\n       \"   'current_value': 1234,\\n\",\n       \"   'task_name': 'Elastic-Net Classifier (mixing alpha=0.5 / Binomial Deviance) with Unsupervised Learning Features',\\n\",\n       \"   'constraints': {'int': {'min': 0,\\n\",\n       \"     'max': 1000000000,\\n\",\n       \"     'supports_grid_search': False}},\\n\",\n       \"   'value': None},\\n\",\n       \"  {'parameter_name': 'sigma',\\n\",\n       \"   'parameter_id': 'eyJhcmciOiJzaWdtYSIsInZpZCI6IjExIn0',\\n\",\n       \"   'default_value': 1e-06,\\n\",\n       \"   'current_value': 1e-06,\\n\",\n       \"   'task_name': 'Elastic-Net Classifier (mixing alpha=0.5 / Binomial Deviance) with Unsupervised Learning Features',\\n\",\n       \"   'constraints': {'float': {'min': 0.0,\\n\",\n       \"     'max': 1e-06,\\n\",\n       \"     'supports_grid_search': False}},\\n\",\n       \"   'value': None},\\n\",\n       \"  {'parameter_name': 'tol',\\n\",\n       \"   'parameter_id': 'eyJhcmciOiJ0b2wiLCJ2aWQiOiIxMSJ9',\\n\",\n       \"   'default_value': 0.0001,\\n\",\n       \"   'current_value': 0.0001,\\n\",\n       \"   'task_name': 'Elastic-Net Classifier (mixing alpha=0.5 / Binomial Deviance) with Unsupervised Learning Features',\\n\",\n       \"   'constraints': {'float': {'min': 1e-10,\\n\",\n       \"     'max': 10000000000.0,\\n\",\n       \"     'supports_grid_search': False}},\\n\",\n       \"   'value': None},\\n\",\n       \"  {'parameter_name': 'n_clusters',\\n\",\n       \"   'parameter_id': 'eyJhcmciOiJuX2NsdXN0ZXJzIiwidmlkIjoiOSJ9',\\n\",\n       \"   'default_value': 'auto',\\n\",\n       \"   'current_value': 'auto',\\n\",\n       \"   'task_name': 'K-Means Clustering',\\n\",\n       \"   'constraints': {'select': {'values': ['auto', 'pham']},\\n\",\n       \"    'int': {'min': 2, 'max': 10000, 'supports_grid_search': False}},\\n\",\n       \"   'value': None},\\n\",\n       \"  {'parameter_name': 'analyzer',\\n\",\n       \"   'parameter_id': 'eyJhcmciOiJhbmFseXplciIsInZpZCI6IjIifQ',\\n\",\n       \"   'default_value': 'word',\\n\",\n       \"   'current_value': 'word',\\n\",\n       \"   'task_name': 'Matrix of word-grams occurrences',\\n\",\n       \"   'constraints': {'select': {'values': ['word', 'char']}},\\n\",\n       \"   'value': None},\\n\",\n       \"  {'parameter_name': 'binary',\\n\",\n       \"   'parameter_id': 'eyJhcmciOiJiaW5hcnkiLCJ2aWQiOiIyIn0',\\n\",\n       \"   'default_value': 'True',\\n\",\n       \"   'current_value': 'True',\\n\",\n       \"   'task_name': 'Matrix of word-grams occurrences',\\n\",\n       \"   'constraints': {'select': {'values': ['False', 'True']}},\\n\",\n       \"   'value': None},\\n\",\n       \"  {'parameter_name': 'language',\\n\",\n       \"   'parameter_id': 'eyJhcmciOiJsYW5ndWFnZSIsInZpZCI6IjIifQ',\\n\",\n       \"   'default_value': 'english',\\n\",\n       \"   'current_value': 'english',\\n\",\n       \"   'task_name': 'Matrix of word-grams occurrences',\\n\",\n       \"   'constraints': {'select': {'values': ['english',\\n\",\n       \"      'danish',\\n\",\n       \"      'dutch',\\n\",\n       \"      'finnish',\\n\",\n       \"      'french',\\n\",\n       \"      'german',\\n\",\n       \"      'hungarian',\\n\",\n       \"      'italian',\\n\",\n       \"      'norwegian',\\n\",\n       \"      'portuguese',\\n\",\n       \"      'romanian',\\n\",\n       \"      'russian',\\n\",\n       \"      'spanish',\\n\",\n       \"      'swedish',\\n\",\n       \"      'japanese',\\n\",\n       \"      'turkish']}},\\n\",\n       \"   'value': None},\\n\",\n       \"  {'parameter_name': 'lowercase',\\n\",\n       \"   'parameter_id': 'eyJhcmciOiJsb3dlcmNhc2UiLCJ2aWQiOiIyIn0',\\n\",\n       \"   'default_value': 'True',\\n\",\n       \"   'current_value': 'True',\\n\",\n       \"   'task_name': 'Matrix of word-grams occurrences',\\n\",\n       \"   'constraints': {'select': {'values': ['False', 'True']}},\\n\",\n       \"   'value': None},\\n\",\n       \"  {'parameter_name': 'max_df',\\n\",\n       \"   'parameter_id': 'eyJhcmciOiJtYXhfZGYiLCJ2aWQiOiIyIn0',\\n\",\n       \"   'default_value': 0.5,\\n\",\n       \"   'current_value': 0.5,\\n\",\n       \"   'task_name': 'Matrix of word-grams occurrences',\\n\",\n       \"   'constraints': {'int': {'min': 1,\\n\",\n       \"     'max': 99999,\\n\",\n       \"     'supports_grid_search': False},\\n\",\n       \"    'float': {'min': 0.0, 'max': 1.0, 'supports_grid_search': False}},\\n\",\n       \"   'value': None},\\n\",\n       \"  {'parameter_name': 'max_features',\\n\",\n       \"   'parameter_id': 'eyJhcmciOiJtYXhfZmVhdHVyZXMiLCJ2aWQiOiIyIn0',\\n\",\n       \"   'default_value': 200000,\\n\",\n       \"   'current_value': 200000,\\n\",\n       \"   'task_name': 'Matrix of word-grams occurrences',\\n\",\n       \"   'constraints': {'select': {'values': ['None']},\\n\",\n       \"    'int': {'min': 1,\\n\",\n       \"     'max': 1000000000000000019884624838656,\\n\",\n       \"     'supports_grid_search': False}},\\n\",\n       \"   'value': None},\\n\",\n       \"  {'parameter_name': 'max_ngram',\\n\",\n       \"   'parameter_id': 'eyJhcmciOiJtYXhfbmdyYW0iLCJ2aWQiOiIyIn0',\\n\",\n       \"   'default_value': 2,\\n\",\n       \"   'current_value': 2,\\n\",\n       \"   'task_name': 'Matrix of word-grams occurrences',\\n\",\n       \"   'constraints': {'int': {'min': 0,\\n\",\n       \"     'max': 99,\\n\",\n       \"     'supports_grid_search': False}},\\n\",\n       \"   'value': None},\\n\",\n       \"  {'parameter_name': 'min_df',\\n\",\n       \"   'parameter_id': 'eyJhcmciOiJtaW5fZGYiLCJ2aWQiOiIyIn0',\\n\",\n       \"   'default_value': 2,\\n\",\n       \"   'current_value': 2,\\n\",\n       \"   'task_name': 'Matrix of word-grams occurrences',\\n\",\n       \"   'constraints': {'int': {'min': 1,\\n\",\n       \"     'max': 99999,\\n\",\n       \"     'supports_grid_search': False},\\n\",\n       \"    'float': {'min': 0.0, 'max': 1.0, 'supports_grid_search': False}},\\n\",\n       \"   'value': None},\\n\",\n       \"  {'parameter_name': 'min_ngram',\\n\",\n       \"   'parameter_id': 'eyJhcmciOiJtaW5fbmdyYW0iLCJ2aWQiOiIyIn0',\\n\",\n       \"   'default_value': 1,\\n\",\n       \"   'current_value': 1,\\n\",\n       \"   'task_name': 'Matrix of word-grams occurrences',\\n\",\n       \"   'constraints': {'int': {'min': 0,\\n\",\n       \"     'max': 99,\\n\",\n       \"     'supports_grid_search': False}},\\n\",\n       \"   'value': None},\\n\",\n       \"  {'parameter_name': 'norm',\\n\",\n       \"   'parameter_id': 'eyJhcmciOiJub3JtIiwidmlkIjoiMiJ9',\\n\",\n       \"   'default_value': 'l2',\\n\",\n       \"   'current_value': 'l2',\\n\",\n       \"   'task_name': 'Matrix of word-grams occurrences',\\n\",\n       \"   'constraints': {'select': {'values': ['None', 'l1', 'l2']}},\\n\",\n       \"   'value': None},\\n\",\n       \"  {'parameter_name': 'smooth_idf',\\n\",\n       \"   'parameter_id': 'eyJhcmciOiJzbW9vdGhfaWRmIiwidmlkIjoiMiJ9',\\n\",\n       \"   'default_value': 'True',\\n\",\n       \"   'current_value': 'True',\\n\",\n       \"   'task_name': 'Matrix of word-grams occurrences',\\n\",\n       \"   'constraints': {'select': {'values': ['False', 'True']}},\\n\",\n       \"   'value': None},\\n\",\n       \"  {'parameter_name': 'stemmer',\\n\",\n       \"   'parameter_id': 'eyJhcmciOiJzdGVtbWVyIiwidmlkIjoiMiJ9',\\n\",\n       \"   'default_value': 'None',\\n\",\n       \"   'current_value': 'None',\\n\",\n       \"   'task_name': 'Matrix of word-grams occurrences',\\n\",\n       \"   'constraints': {'select': {'values': ['None',\\n\",\n       \"      'snowball',\\n\",\n       \"      'lancaster',\\n\",\n       \"      'porter',\\n\",\n       \"      'wordnet']}},\\n\",\n       \"   'value': None},\\n\",\n       \"  {'parameter_name': 'sublinear_tf',\\n\",\n       \"   'parameter_id': 'eyJhcmciOiJzdWJsaW5lYXJfdGYiLCJ2aWQiOiIyIn0',\\n\",\n       \"   'default_value': 'False',\\n\",\n       \"   'current_value': 'False',\\n\",\n       \"   'task_name': 'Matrix of word-grams occurrences',\\n\",\n       \"   'constraints': {'select': {'values': ['False', 'True']}},\\n\",\n       \"   'value': None},\\n\",\n       \"  {'parameter_name': 'tokenizer',\\n\",\n       \"   'parameter_id': 'eyJhcmciOiJ0b2tlbml6ZXIiLCJ2aWQiOiIyIn0',\\n\",\n       \"   'default_value': 'None',\\n\",\n       \"   'current_value': 'None',\\n\",\n       \"   'task_name': 'Matrix of word-grams occurrences',\\n\",\n       \"   'constraints': {'select': {'values': ['None',\\n\",\n       \"      'space',\\n\",\n       \"      'wordpunct',\\n\",\n       \"      'tweet',\\n\",\n       \"      'treebank',\\n\",\n       \"      'japtiny',\\n\",\n       \"      'mecab']}},\\n\",\n       \"   'value': None},\\n\",\n       \"  {'parameter_name': 'use_idf',\\n\",\n       \"   'parameter_id': 'eyJhcmciOiJ1c2VfaWRmIiwidmlkIjoiMiJ9',\\n\",\n       \"   'default_value': 'False',\\n\",\n       \"   'current_value': 'False',\\n\",\n       \"   'task_name': 'Matrix of word-grams occurrences',\\n\",\n       \"   'constraints': {'select': {'values': ['False', 'True']}},\\n\",\n       \"   'value': None},\\n\",\n       \"  {'parameter_name': 'max_features',\\n\",\n       \"   'parameter_id': 'eyJhcmciOiJtYXhfZmVhdHVyZXMiLCJ2aWQiOiI3In0',\\n\",\n       \"   'default_value': 'None',\\n\",\n       \"   'current_value': 'None',\\n\",\n       \"   'task_name': 'One-Hot Encoding',\\n\",\n       \"   'constraints': {'select': {'values': ['None']},\\n\",\n       \"    'int': {'min': 1, 'max': 999999, 'supports_grid_search': False}},\\n\",\n       \"   'value': None},\\n\",\n       \"  {'parameter_name': 'max_features',\\n\",\n       \"   'parameter_id': 'eyJhcmciOiJtYXhfZmVhdHVyZXMiLCJ2aWQiOiIxIn0',\\n\",\n       \"   'default_value': 'None',\\n\",\n       \"   'current_value': 'None',\\n\",\n       \"   'task_name': 'One-Hot Encoding',\\n\",\n       \"   'constraints': {'select': {'values': ['None']},\\n\",\n       \"    'int': {'min': 1, 'max': 999999, 'supports_grid_search': False}},\\n\",\n       \"   'value': None},\\n\",\n       \"  {'parameter_name': 'max_features',\\n\",\n       \"   'parameter_id': 'eyJhcmciOiJtYXhfZmVhdHVyZXMiLCJ2aWQiOiIxMCJ9',\\n\",\n       \"   'default_value': 'None',\\n\",\n       \"   'current_value': 'None',\\n\",\n       \"   'task_name': 'One-Hot Encoding',\\n\",\n       \"   'constraints': {'select': {'values': ['None']},\\n\",\n       \"    'int': {'min': 1, 'max': 999999, 'supports_grid_search': False}},\\n\",\n       \"   'value': None},\\n\",\n       \"  {'parameter_name': 'min_support',\\n\",\n       \"   'parameter_id': 'eyJhcmciOiJtaW5fc3VwcG9ydCIsInZpZCI6IjEifQ',\\n\",\n       \"   'default_value': 10,\\n\",\n       \"   'current_value': 10,\\n\",\n       \"   'task_name': 'One-Hot Encoding',\\n\",\n       \"   'constraints': {'int': {'min': 1,\\n\",\n       \"     'max': 99999,\\n\",\n       \"     'supports_grid_search': False}},\\n\",\n       \"   'value': None},\\n\",\n       \"  {'parameter_name': 'min_support',\\n\",\n       \"   'parameter_id': 'eyJhcmciOiJtaW5fc3VwcG9ydCIsInZpZCI6IjEwIn0',\\n\",\n       \"   'default_value': 1,\\n\",\n       \"   'current_value': 1,\\n\",\n       \"   'task_name': 'One-Hot Encoding',\\n\",\n       \"   'constraints': {'int': {'min': 1,\\n\",\n       \"     'max': 99999,\\n\",\n       \"     'supports_grid_search': False}},\\n\",\n       \"   'value': None},\\n\",\n       \"  {'parameter_name': 'min_support',\\n\",\n       \"   'parameter_id': 'eyJhcmciOiJtaW5fc3VwcG9ydCIsInZpZCI6IjcifQ',\\n\",\n       \"   'default_value': 10,\\n\",\n       \"   'current_value': 10,\\n\",\n       \"   'task_name': 'One-Hot Encoding',\\n\",\n       \"   'constraints': {'int': {'min': 1,\\n\",\n       \"     'max': 99999,\\n\",\n       \"     'supports_grid_search': False}},\\n\",\n       \"   'value': None},\\n\",\n       \"  {'parameter_name': 'k',\\n\",\n       \"   'parameter_id': 'eyJhcmciOiJrIiwidmlkIjoiOCJ9',\\n\",\n       \"   'default_value': 250,\\n\",\n       \"   'current_value': 250,\\n\",\n       \"   'task_name': 'Partial Principal Components Analysis',\\n\",\n       \"   'constraints': {'select': {'values': ['auto']},\\n\",\n       \"    'int': {'min': 1, 'max': 100000, 'supports_grid_search': False}},\\n\",\n       \"   'value': None}]}\"\n      ]\n     },\n     \"execution_count\": 5,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"tune.get_parameters()\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Each model’s blueprint consists of a series of tasks including both preprocessing steps and the model itself. Each task contains tunable parameters. Let’s take a look at the available (tunable) tasks:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 6,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"['Elastic-Net Classifier (mixing alpha=0.5 / Binomial Deviance) with Unsupervised Learning Features',\\n\",\n       \" 'K-Means Clustering',\\n\",\n       \" 'Matrix of word-grams occurrences',\\n\",\n       \" 'One-Hot Encoding',\\n\",\n       \" 'Partial Principal Components Analysis']\"\n      ]\n     },\n     \"execution_count\": 6,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"tune.get_task_names()\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"To see all of the available hyperparameter options for the particular task, use the get_parameter_names method on the tune object:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 7,\n   \"metadata\": {\n    \"scrolled\": true\n   },\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"['analyzer',\\n\",\n       \" 'binary',\\n\",\n       \" 'language',\\n\",\n       \" 'lowercase',\\n\",\n       \" 'max_df',\\n\",\n       \" 'max_features',\\n\",\n       \" 'max_ngram',\\n\",\n       \" 'min_df',\\n\",\n       \" 'min_ngram',\\n\",\n       \" 'norm',\\n\",\n       \" 'smooth_idf',\\n\",\n       \" 'stemmer',\\n\",\n       \" 'sublinear_tf',\\n\",\n       \" 'tokenizer',\\n\",\n       \" 'use_idf']\"\n      ]\n     },\n     \"execution_count\": 7,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"task_name = tune.get_task_names()[2] #Save a task name by chance\\n\",\n    \"tune.get_parameter_names(task_name) # Get all of the hypermarameter options\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"set_parameter is a method used on the tune object that lets you fill in all the hyperparameters for your particular model. If you pass an XGB model, RunTune will have the hyperparameters to tune XGB (e.g., colsample_bytree), whereas if you pass an Elastic Net model, the function will instead have hyperparameters for Elastic Nets (e.g., lambda) instead.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 8,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"parameter_name = tune.get_parameter_names(task_name)[0] #Save a parameter name by chance\\n\",\n    \"\\n\",\n    \"tune.set_parameter(\\n\",\n    \"    task_name=task_name,\\n\",\n    \"    parameter_name=parameter_name,\\n\",\n    \"    value=1)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"When you are finished setting all the different parameters you want to chance, start tuning with the run method\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 9,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"ModelJob(Elastic-Net Classifier (mixing alpha=0.5 / Binomial Deviance) with Unsupervised Learning Features, status=inprogress)\"\n      ]\n     },\n     \"execution_count\": 9,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"tune.run()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.7.3\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n",
    "url": "https://github.com/datarobot-community/examples-for-data-scientists/blob/master/Advanced%20Tuning%20and%20Partitioning/Python/Advanced%20Tuning.ipynb",
    "size": 20737,
    "description": "Jupyter notebook: Advanced Tuning",
    "tags": []
  },
  {
    "repo_name": "examples-for-data-scientists",
    "file_path": "Advanced Tuning and Partitioning/Python/AdvancedOptions object.ipynb",
    "file_name": "AdvancedOptions object.ipynb",
    "file_type": "notebook",
    "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Using the AdvancedOptions object\\n\",\n    \"**Author:** Thodoris Petropoulos\\n\",\n    \"\\n\",\n    \"**Label:** Modeling Options\\n\",\n    \"\\n\",\n    \"Scope\\n\",\n    \"The scope of this notebook is to provide instructions on how to initiate a DataRobot project taking advantage of the `AdvancedOptions` object. The object has multiple options so refer to the official API documentation for a full overview.\\n\",\n    \"\\n\",\n    \"DataRobot API version >= 2.22.0. \\n\",\n    \"\\n\",\n    \"Small adjustments might be needed depending on the Python version and DataRobot API version you are using.\\n\",\n    \"Full documentation of the Python package can be found here: https://datarobot-public-api-client.readthedocs-hosted.com\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 1,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"<datarobot.rest.RESTClientObject at 0x7f94d9075e10>\"\n      ]\n     },\n     \"execution_count\": 1,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"#Import datarobot library (make sure >=2.22.0)\\n\",\n    \"import datarobot as dr\\n\",\n    \"import pandas as pd\\n\",\n    \"\\n\",\n    \"#Connect to DataRobot\\n\",\n    \"dr.Client(token='YOUR_API_TOKEN',\\n\",\n    \"          endpoint = 'YOUR_API_ENDPOINT')\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"#Create an advanced options object\\n\",\n    \"advanced_options = dr.AdvancedOptions(accuracy_optimized_mb=True,\\n\",\n    \"                                      consider_blenders_in_recommendation=True)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 3,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"#Load data\\n\",\n    \"dataset = pd.read_excel('readmissions.xlsx')\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"In progress: 2, queued: 11 (waited: 0s)\\n\",\n      \"In progress: 2, queued: 11 (waited: 1s)\\n\",\n      \"In progress: 2, queued: 11 (waited: 2s)\\n\",\n      \"In progress: 2, queued: 11 (waited: 4s)\\n\",\n      \"In progress: 2, queued: 11 (waited: 6s)\\n\",\n      \"In progress: 2, queued: 11 (waited: 8s)\\n\",\n      \"In progress: 2, queued: 11 (waited: 13s)\\n\",\n      \"In progress: 2, queued: 11 (waited: 20s)\\n\",\n      \"In progress: 2, queued: 11 (waited: 34s)\\n\",\n      \"In progress: 1, queued: 11 (waited: 55s)\\n\",\n      \"In progress: 2, queued: 10 (waited: 76s)\\n\",\n      \"In progress: 2, queued: 9 (waited: 97s)\\n\",\n      \"In progress: 2, queued: 8 (waited: 118s)\\n\",\n      \"In progress: 2, queued: 8 (waited: 139s)\\n\",\n      \"In progress: 2, queued: 8 (waited: 160s)\\n\",\n      \"In progress: 2, queued: 6 (waited: 181s)\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"#Create project\\n\",\n    \"project = dr.Project.create(project_name='MyBinaryClassificationProject',\\n\",\n    \"                        sourcedata= dataset)\\n\",\n    \"\\n\",\n    \"#Set target and pass on the AdvancedOptions object\\n\",\n    \"project.set_target('readmitted', advanced_options=advanced_options)\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"project.wait_for_autopilot() #Wait for autopilot to complete\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.7.0\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 4\n}\n",
    "url": "https://github.com/datarobot-community/examples-for-data-scientists/blob/master/Advanced%20Tuning%20and%20Partitioning/Python/AdvancedOptions%20object.ipynb",
    "size": 3743,
    "description": "Jupyter notebook: AdvancedOptions object",
    "tags": []
  },
  {
    "repo_name": "examples-for-data-scientists",
    "file_path": "Advanced Tuning and Partitioning/Python/DataRobot_Optimizer/Optimizing Through API.ipynb",
    "file_name": "Optimizing Through API.ipynb",
    "file_type": "notebook",
    "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"pycharm\": {\n     \"is_executing\": false\n    }\n   },\n   \"source\": [\n    \"\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Controlling DataRobot Optimizer Through Python\\n\",\n    \"\\n\",\n    \"This code shows how to interact to DataRobot Optimizer App using the example Lending Club dataset **\\\"Lending Club Sample 30.csv\\\"**.\\n\",\n    \"In this example, we are trying to find the best combination of values for revol_util, inq_last_6mths, loan_amnt, and dti that minimizes the probability of a loan going bad.  \\n\",\n    \"\\n\",\n    \"### Result\\n\",\n    \"\\n\",\n    \"A dataframe with the original features, prediction, and the optimized features.  The optimized features have the prefix **opt_**\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"### Assumptions\\n\",\n    \"\\n\",\n    \"1. A model has been deployed \\n\",\n    \"2. An Optimization App has been created\\n\",\n    \"3. The dataset and Jupyter notebook are in the same folder\\n\",\n    \"4. The outcome of the optimization is added to the original dataframe\\n\",\n    \"\\n\",\n    \"### Steps\\n\",\n    \"\\n\",\n    \"1. Change key_dict \\n\",\n    \"    1. Get the URL from the application (see figure below)\\n\",\n    \"    2. Put the values in key_dict\\n\",\n    \"    3. Put the name of the dataset in ts_settings[\\\"filename\\\"]\\n\",\n    \"2. Read file into a dataframe\\n\",\n    \"3. result_df = perform_optimization(data_df)\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"### Functions\\n\",\n    \"\\n\",\n    \"*get_optimization* : makes a post request to perform optimization.  It returns optimized values for the constraint features, and the predicted target\\n\",\n    \"\\n\",\n    \"*get_constraints*  : accesses the constraint features and their ranges from the Optimizer App\\n\",\n    \"\\n\",\n    \"*create_constrain_from_df* : if you want to decide which features to constrain, change the  \\\"cfeatures\\\" list in ts_settings and provide a file to estimate the min and the max for these features\\n\",\n    \"\\n\",\n    \"*set_optimizer* : prepares the elements required by the Optimizer App\\n\",\n    \"\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Get the URL with application id, and the token id from\\n\",\n    \"The URL is available from the share icon in the top menu of the Optimization App.\\n\",\n    \"\\n\",\n    \"<img src=\\\"Picture1.gif\\\">\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 62,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import requests  # you could also use aiohttp instead of requests to make calls asynchronously\\n\",\n    \"import json\\n\",\n    \"import pandas as pd\\n\",\n    \"\\n\",\n    \"'''\\n\",\n    \"You get the ID and Token from the Optimizer App by clicking the share triangle (in the top menu of the UI)\\n\",\n    \"'''\\n\",\n    \"#https://606c32b7462514a41c85c492.apps.datarobot.com/settings?token=xMdWLVsq2C2dNvMCTMlbDzbZ6IcF_GwA4E76iYtJTGs&lang=en&theme=light\\n\",\n    \"\\n\",\n    \"key_dict = {\\n\",\n    \"    'Complete_data': (\\n\",\n    \"                 '',  # ID\\n\",\n    \"                 '',  # Token\\n\",\n    \"                ),\\n\",\n    \"}\\n\",\n    \"#Set constraint features, and filename\\n\",\n    \"\\n\",\n    \"ts_settings = {\\\"cfeatures\\\" :['revol_util','inq_last_6mths','loan_amnt','dti'],\\n\",\n    \"              \\\"filename\\\":\\\"Lending Club Sample 30.csv\\\"}\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 63,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"def get_optimization(app, constraints):\\n\",\n    \"    '''\\n\",\n    \"    Given the credentials and data, get the best target under the constrained features\\n\",\n    \"    :param app: 'Complete_data' in key_dict\\n\",\n    \"    :param constraints: a dict containing the constrained features, the data, and the optimization type\\n\",\n    \"    :return: optimization performance, and values tried for each constrained feature\\n\",\n    \"    '''\\n\",\n    \"    app_id, token = key_dict[app]\\n\",\n    \"    url = f'https://{app_id}.apps.datarobot.com/api/optimize'\\n\",\n    \"    headers = {\\\"Authorization\\\": f\\\"Bearer {token}\\\"}\\n\",\n    \"    return requests.post(url, json=constraints, headers=headers).json()\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 64,\n   \"metadata\": {\n    \"pycharm\": {\n     \"is_executing\": false\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"def get_constraints(key_dict):\\n\",\n    \"    '''\\n\",\n    \"    Get a list of constraint features and their minimum and maximum values from the Optimization App  \\n\",\n    \"    :param key_dict: the dictionary with the required app id and token\\n\",\n    \"    :return: a list of constraint features and their min and max\\n\",\n    \"    '''\\n\",\n    \"    app_id, token = key_dict['Complete_data']\\n\",\n    \"    url = f'https://{app_id}.apps.datarobot.com/api/application'\\n\",\n    \"    headers = {\\\"Authorization\\\": f\\\"Bearer {token}\\\"}\\n\",\n    \"    constraints = requests.get(url,headers=headers).json()\\n\",\n    \"    constrain_list = constraints['constraints']\\n\",\n    \"    [x.pop('feature_type') for x in constrain_list]\\n\",\n    \"    return constrain_list\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 65,\n   \"metadata\": {\n    \"pycharm\": {\n     \"is_executing\": false\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"#You can build your constraint list from full dataset\\n\",\n    \"#The min and the max are calculated from the full dataset\\n\",\n    \"def create_constrain_from_df(df_tmp,cfeatures):\\n\",\n    \"    '''\\n\",\n    \"    Create a list of constraint features and their minimum and maximum values.  We assume we get the minimum and maximum \\n\",\n    \"    of the constraint features from a dataset\\n\",\n    \"    :param df_tmp: dataframe \\n\",\n    \"    :param cfeatures: the name of the constrained features\\n\",\n    \"    :return: a list of constraint features and their min and max\\n\",\n    \"    '''\\n\",\n    \"    constrain_list = []\\n\",\n    \"    for c_name in cfeatures:\\n\",\n    \"        c_dict = {'feature': c_name,'info':{'min': df_tmp[c_name].min(),'max':df_tmp[c_name].max(),'is_int':False}}\\n\",\n    \"        constrain_list.append(c_dict)\\n\",\n    \"    return constrain_list\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 66,\n   \"metadata\": {\n    \"pycharm\": {\n     \"is_executing\": false\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"def set_optimizer(constrain_list,tmp1):\\n\",\n    \"    '''\\n\",\n    \"    Create the constraints dictionary:  It has to have the constraint list, and a row that need to be optimized\\n\",\n    \"    :param constrain_list: list of features and their constraints\\n\",\n    \"    :param tmp1: a row that has been changed to a JSON format\\n\",\n    \"    :return: a dict\\n\",\n    \"    '''\\n\",\n    \"    constraints = {\\n\",\n    \"        'settings': {\\n\",\n    \"        # Specify if you want to maximize or minimize\\n\",\n    \"            \\\"targetDirection\\\": 'max',\\n\",\n    \"\\n\",\n    \"            # Specify your flex feature ranges\\n\",\n    \"            'constraints': constrain_list,\\n\",\n    \"        },\\n\",\n    \"    #    'optimization': {'method': 'exhaust'},  # optional\\n\",\n    \"\\n\",\n    \"        # Specify your fixed values\\n\",\n    \"        'datapoint': tmp1,\\n\",\n    \"    }\\n\",\n    \"    return constraints\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 67,\n   \"metadata\": {\n    \"pycharm\": {\n     \"is_executing\": false\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"def perform_optimization(df):\\n\",\n    \"    '''\\n\",\n    \"    Perform a batch optimization.  Add the results to the original dataframe\\n\",\n    \"    :param df: dataframe with the dataset to be optimized \\n\",\n    \"    :return: a dataframe with the original dataframe with the predicted and optimized features.  The optimized features  \\n\",\n    \"             name are prefixed with opt_ \\n\",\n    \"    '''\\n\",\n    \"    #create constrain_list\\n\",\n    \"    constrain_list = get_constraints(key_dict)\\n\",\n    \"    #create new features and set them to 0.00\\n\",\n    \"    df[\\\"opt_prediction\\\"] = 0.00\\n\",\n    \"    for feature in ts_settings[\\\"cfeatures\\\"]:\\n\",\n    \"        df[\\\"opt_\\\"+feature] = 0.00\\n\",\n    \"\\n\",\n    \"    #For create a constraints for each row and request optimization from DataRobot Optimizer App\\n\",\n    \"    for index, row in df.iterrows():\\n\",\n    \"        tmp1 = json.loads(row.to_json())\\n\",\n    \"        constraints =set_optimizer(constrain_list,tmp1)\\n\",\n    \"        for app in key_dict:  # if using aiohttp, you could start multiple optimizations and have them run simultaneously\\n\",\n    \"            results = get_optimization(app, constraints)\\n\",\n    \"            #Get the optimized target: prediction, and the values of the constrained features that resulted in the optimized target\\n\",\n    \"            tp = results['optimized_simulation']\\n\",\n    \"            df.loc[index,\\\"opt_prediction\\\"] = tp['prediction']\\n\",\n    \"            for feature in tp['features']:\\n\",\n    \"                f_name = feature[\\\"name\\\"]\\n\",\n    \"                df.loc[index,\\\"opt_\\\"+f_name] = feature[\\\"value\\\"]\\n\",\n    \"    return df\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# RUN THIS \"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"data_df = pd.read_csv(ts_settings[\\\"filename\\\"])\\n\",\n    \"result_df = perform_optimization(data_df)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 55,\n   \"metadata\": {\n    \"pycharm\": {\n     \"is_executing\": false\n    }\n   },\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>opt_prediction</th>\\n\",\n       \"      <th>opt_revol_util</th>\\n\",\n       \"      <th>opt_inq_last_6mths</th>\\n\",\n       \"      <th>opt_loan_amnt</th>\\n\",\n       \"      <th>opt_dti</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0.048569</td>\\n\",\n       \"      <td>1.383494</td>\\n\",\n       \"      <td>8.192054</td>\\n\",\n       \"      <td>27291.322287</td>\\n\",\n       \"      <td>0.134797</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>0.291327</td>\\n\",\n       \"      <td>48.439644</td>\\n\",\n       \"      <td>3.468059</td>\\n\",\n       \"      <td>28272.498063</td>\\n\",\n       \"      <td>1.917662</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>2</td>\\n\",\n       \"      <td>0.213890</td>\\n\",\n       \"      <td>94.653879</td>\\n\",\n       \"      <td>2.516591</td>\\n\",\n       \"      <td>1048.202766</td>\\n\",\n       \"      <td>7.263397</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>0.276012</td>\\n\",\n       \"      <td>89.474905</td>\\n\",\n       \"      <td>1.336023</td>\\n\",\n       \"      <td>29563.737299</td>\\n\",\n       \"      <td>19.058788</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>4</td>\\n\",\n       \"      <td>0.053004</td>\\n\",\n       \"      <td>46.291825</td>\\n\",\n       \"      <td>1.916218</td>\\n\",\n       \"      <td>27783.824290</td>\\n\",\n       \"      <td>18.628171</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>5</td>\\n\",\n       \"      <td>0.379326</td>\\n\",\n       \"      <td>92.367910</td>\\n\",\n       \"      <td>2.879611</td>\\n\",\n       \"      <td>24905.041876</td>\\n\",\n       \"      <td>22.379689</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>6</td>\\n\",\n       \"      <td>0.379326</td>\\n\",\n       \"      <td>92.367910</td>\\n\",\n       \"      <td>2.879611</td>\\n\",\n       \"      <td>24905.041876</td>\\n\",\n       \"      <td>22.379689</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>7</td>\\n\",\n       \"      <td>0.379326</td>\\n\",\n       \"      <td>92.367910</td>\\n\",\n       \"      <td>2.879611</td>\\n\",\n       \"      <td>24905.041876</td>\\n\",\n       \"      <td>22.379689</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>8</td>\\n\",\n       \"      <td>0.379326</td>\\n\",\n       \"      <td>92.367910</td>\\n\",\n       \"      <td>2.879611</td>\\n\",\n       \"      <td>24905.041876</td>\\n\",\n       \"      <td>22.379689</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>9</td>\\n\",\n       \"      <td>0.379326</td>\\n\",\n       \"      <td>92.367910</td>\\n\",\n       \"      <td>2.879611</td>\\n\",\n       \"      <td>24905.041876</td>\\n\",\n       \"      <td>22.379689</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>10</td>\\n\",\n       \"      <td>0.379326</td>\\n\",\n       \"      <td>92.367910</td>\\n\",\n       \"      <td>2.879611</td>\\n\",\n       \"      <td>24905.041876</td>\\n\",\n       \"      <td>22.379689</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>11</td>\\n\",\n       \"      <td>0.379326</td>\\n\",\n       \"      <td>92.367910</td>\\n\",\n       \"      <td>2.879611</td>\\n\",\n       \"      <td>24905.041876</td>\\n\",\n       \"      <td>22.379689</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>12</td>\\n\",\n       \"      <td>0.379326</td>\\n\",\n       \"      <td>92.367910</td>\\n\",\n       \"      <td>2.879611</td>\\n\",\n       \"      <td>24905.041876</td>\\n\",\n       \"      <td>22.379689</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>13</td>\\n\",\n       \"      <td>0.379326</td>\\n\",\n       \"      <td>92.367910</td>\\n\",\n       \"      <td>2.879611</td>\\n\",\n       \"      <td>24905.041876</td>\\n\",\n       \"      <td>22.379689</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>14</td>\\n\",\n       \"      <td>0.379326</td>\\n\",\n       \"      <td>92.367910</td>\\n\",\n       \"      <td>2.879611</td>\\n\",\n       \"      <td>24905.041876</td>\\n\",\n       \"      <td>22.379689</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>15</td>\\n\",\n       \"      <td>0.379326</td>\\n\",\n       \"      <td>92.367910</td>\\n\",\n       \"      <td>2.879611</td>\\n\",\n       \"      <td>24905.041876</td>\\n\",\n       \"      <td>22.379689</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>16</td>\\n\",\n       \"      <td>0.379326</td>\\n\",\n       \"      <td>92.367910</td>\\n\",\n       \"      <td>2.879611</td>\\n\",\n       \"      <td>24905.041876</td>\\n\",\n       \"      <td>22.379689</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>17</td>\\n\",\n       \"      <td>0.379326</td>\\n\",\n       \"      <td>92.367910</td>\\n\",\n       \"      <td>2.879611</td>\\n\",\n       \"      <td>24905.041876</td>\\n\",\n       \"      <td>22.379689</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>18</td>\\n\",\n       \"      <td>0.379326</td>\\n\",\n       \"      <td>92.367910</td>\\n\",\n       \"      <td>2.879611</td>\\n\",\n       \"      <td>24905.041876</td>\\n\",\n       \"      <td>22.379689</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>19</td>\\n\",\n       \"      <td>0.379326</td>\\n\",\n       \"      <td>92.367910</td>\\n\",\n       \"      <td>2.879611</td>\\n\",\n       \"      <td>24905.041876</td>\\n\",\n       \"      <td>22.379689</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>20</td>\\n\",\n       \"      <td>0.379326</td>\\n\",\n       \"      <td>92.367910</td>\\n\",\n       \"      <td>2.879611</td>\\n\",\n       \"      <td>24905.041876</td>\\n\",\n       \"      <td>22.379689</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>21</td>\\n\",\n       \"      <td>0.379326</td>\\n\",\n       \"      <td>92.367910</td>\\n\",\n       \"      <td>2.879611</td>\\n\",\n       \"      <td>24905.041876</td>\\n\",\n       \"      <td>22.379689</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>22</td>\\n\",\n       \"      <td>0.379326</td>\\n\",\n       \"      <td>92.367910</td>\\n\",\n       \"      <td>2.879611</td>\\n\",\n       \"      <td>24905.041876</td>\\n\",\n       \"      <td>22.379689</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>23</td>\\n\",\n       \"      <td>0.379326</td>\\n\",\n       \"      <td>92.367910</td>\\n\",\n       \"      <td>2.879611</td>\\n\",\n       \"      <td>24905.041876</td>\\n\",\n       \"      <td>22.379689</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>24</td>\\n\",\n       \"      <td>0.379326</td>\\n\",\n       \"      <td>92.367910</td>\\n\",\n       \"      <td>2.879611</td>\\n\",\n       \"      <td>24905.041876</td>\\n\",\n       \"      <td>22.379689</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>25</td>\\n\",\n       \"      <td>0.379326</td>\\n\",\n       \"      <td>92.367910</td>\\n\",\n       \"      <td>2.879611</td>\\n\",\n       \"      <td>24905.041876</td>\\n\",\n       \"      <td>22.379689</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>26</td>\\n\",\n       \"      <td>0.379326</td>\\n\",\n       \"      <td>92.367910</td>\\n\",\n       \"      <td>2.879611</td>\\n\",\n       \"      <td>24905.041876</td>\\n\",\n       \"      <td>22.379689</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>27</td>\\n\",\n       \"      <td>0.379326</td>\\n\",\n       \"      <td>92.367910</td>\\n\",\n       \"      <td>2.879611</td>\\n\",\n       \"      <td>24905.041876</td>\\n\",\n       \"      <td>22.379689</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>28</td>\\n\",\n       \"      <td>0.379326</td>\\n\",\n       \"      <td>92.367910</td>\\n\",\n       \"      <td>2.879611</td>\\n\",\n       \"      <td>24905.041876</td>\\n\",\n       \"      <td>22.379689</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"    opt_prediction  opt_revol_util  opt_inq_last_6mths  opt_loan_amnt  \\\\\\n\",\n       \"0         0.048569        1.383494            8.192054   27291.322287   \\n\",\n       \"1         0.291327       48.439644            3.468059   28272.498063   \\n\",\n       \"2         0.213890       94.653879            2.516591    1048.202766   \\n\",\n       \"3         0.276012       89.474905            1.336023   29563.737299   \\n\",\n       \"4         0.053004       46.291825            1.916218   27783.824290   \\n\",\n       \"5         0.379326       92.367910            2.879611   24905.041876   \\n\",\n       \"6         0.379326       92.367910            2.879611   24905.041876   \\n\",\n       \"7         0.379326       92.367910            2.879611   24905.041876   \\n\",\n       \"8         0.379326       92.367910            2.879611   24905.041876   \\n\",\n       \"9         0.379326       92.367910            2.879611   24905.041876   \\n\",\n       \"10        0.379326       92.367910            2.879611   24905.041876   \\n\",\n       \"11        0.379326       92.367910            2.879611   24905.041876   \\n\",\n       \"12        0.379326       92.367910            2.879611   24905.041876   \\n\",\n       \"13        0.379326       92.367910            2.879611   24905.041876   \\n\",\n       \"14        0.379326       92.367910            2.879611   24905.041876   \\n\",\n       \"15        0.379326       92.367910            2.879611   24905.041876   \\n\",\n       \"16        0.379326       92.367910            2.879611   24905.041876   \\n\",\n       \"17        0.379326       92.367910            2.879611   24905.041876   \\n\",\n       \"18        0.379326       92.367910            2.879611   24905.041876   \\n\",\n       \"19        0.379326       92.367910            2.879611   24905.041876   \\n\",\n       \"20        0.379326       92.367910            2.879611   24905.041876   \\n\",\n       \"21        0.379326       92.367910            2.879611   24905.041876   \\n\",\n       \"22        0.379326       92.367910            2.879611   24905.041876   \\n\",\n       \"23        0.379326       92.367910            2.879611   24905.041876   \\n\",\n       \"24        0.379326       92.367910            2.879611   24905.041876   \\n\",\n       \"25        0.379326       92.367910            2.879611   24905.041876   \\n\",\n       \"26        0.379326       92.367910            2.879611   24905.041876   \\n\",\n       \"27        0.379326       92.367910            2.879611   24905.041876   \\n\",\n       \"28        0.379326       92.367910            2.879611   24905.041876   \\n\",\n       \"\\n\",\n       \"      opt_dti  \\n\",\n       \"0    0.134797  \\n\",\n       \"1    1.917662  \\n\",\n       \"2    7.263397  \\n\",\n       \"3   19.058788  \\n\",\n       \"4   18.628171  \\n\",\n       \"5   22.379689  \\n\",\n       \"6   22.379689  \\n\",\n       \"7   22.379689  \\n\",\n       \"8   22.379689  \\n\",\n       \"9   22.379689  \\n\",\n       \"10  22.379689  \\n\",\n       \"11  22.379689  \\n\",\n       \"12  22.379689  \\n\",\n       \"13  22.379689  \\n\",\n       \"14  22.379689  \\n\",\n       \"15  22.379689  \\n\",\n       \"16  22.379689  \\n\",\n       \"17  22.379689  \\n\",\n       \"18  22.379689  \\n\",\n       \"19  22.379689  \\n\",\n       \"20  22.379689  \\n\",\n       \"21  22.379689  \\n\",\n       \"22  22.379689  \\n\",\n       \"23  22.379689  \\n\",\n       \"24  22.379689  \\n\",\n       \"25  22.379689  \\n\",\n       \"26  22.379689  \\n\",\n       \"27  22.379689  \\n\",\n       \"28  22.379689  \"\n      ]\n     },\n     \"execution_count\": 55,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"result_df[['opt_prediction','opt_revol_util','opt_inq_last_6mths','opt_loan_amnt','opt_dti']]\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 8,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"{'non_flexible_features': {'Target (1)': None,\\n\",\n       \"  'Target (1) Prediction Value': None,\\n\",\n       \"  'addr_state': None,\\n\",\n       \"  'annual_inc': None,\\n\",\n       \"  'custom_id': None,\\n\",\n       \"  'delinq_2yrs': None,\\n\",\n       \"  'desc': None,\\n\",\n       \"  'earliest_cr_line': None,\\n\",\n       \"  'emp_length': None,\\n\",\n       \"  'emp_title': None,\\n\",\n       \"  'funded_amnt': None,\\n\",\n       \"  'grade': None,\\n\",\n       \"  'home_ownership': None,\\n\",\n       \"  'initial_list_status': None,\\n\",\n       \"  'installment': None,\\n\",\n       \"  'int_rate': None,\\n\",\n       \"  'is_bad': None,\\n\",\n       \"  'mths_since_last_delinq': None,\\n\",\n       \"  'mths_since_last_major_derog': None,\\n\",\n       \"  'mths_since_last_record': None,\\n\",\n       \"  'open_acc': None,\\n\",\n       \"  'opt_dti': 0.0,\\n\",\n       \"  'opt_inq_last_6mths': 0.0,\\n\",\n       \"  'opt_loan_amnt': 0.0,\\n\",\n       \"  'opt_prediction': 0.0,\\n\",\n       \"  'opt_revol_util': 0.0,\\n\",\n       \"  'policy_code': None,\\n\",\n       \"  'pub_rec': None,\\n\",\n       \"  'purpose': None,\\n\",\n       \"  'pymnt_plan': None,\\n\",\n       \"  'revol_bal': None,\\n\",\n       \"  'sub_grade': None,\\n\",\n       \"  'term': None,\\n\",\n       \"  'title': None,\\n\",\n       \"  'total_acc': None,\\n\",\n       \"  'url': None,\\n\",\n       \"  'verification_status': None,\\n\",\n       \"  'zip_code': None},\\n\",\n       \" 'target': 'max',\\n\",\n       \" 'constraints': [{'feature': 'revol_util',\\n\",\n       \"   'feature_type': 'Numeric',\\n\",\n       \"   'info': {'min': 11.1, 'max': 95.9, 'is_int': False}},\\n\",\n       \"  {'feature': 'inq_last_6mths',\\n\",\n       \"   'feature_type': 'Numeric',\\n\",\n       \"   'info': {'min': 0.0, 'max': 2.0, 'is_int': False}},\\n\",\n       \"  {'feature': 'loan_amnt',\\n\",\n       \"   'feature_type': 'Numeric',\\n\",\n       \"   'info': {'min': 3975.0, 'max': 25000.0, 'is_int': False}},\\n\",\n       \"  {'feature': 'dti',\\n\",\n       \"   'feature_type': 'Numeric',\\n\",\n       \"   'info': {'min': 6.48, 'max': 17.11, 'is_int': False}}],\\n\",\n       \" 'id': '606f24e1a2e6400001fe51ae',\\n\",\n       \" 'created_at': '2021-04-08 15:44:33.292224',\\n\",\n       \" 'updated_at': '2021-04-08 15:44:33.292224',\\n\",\n       \" 'dataset_id': '606f24dea2e6400001fe51ad',\\n\",\n       \" 'prediction': 0.2213493262,\\n\",\n       \" 'simulations': [{'features': [{'name': 'revol_util', 'value': 75.3089183286},\\n\",\n       \"    {'name': 'inq_last_6mths', 'value': 0.0121556267},\\n\",\n       \"    {'name': 'loan_amnt', 'value': 6351.9309600558},\\n\",\n       \"    {'name': 'dti', 'value': 15.7508365181}],\\n\",\n       \"   'prediction': 0.2213493262},\\n\",\n       \"  {'features': [{'name': 'revol_util', 'value': 45.9898803965},\\n\",\n       \"    {'name': 'inq_last_6mths', 'value': 0.3715467761},\\n\",\n       \"    {'name': 'loan_amnt', 'value': 22986.0407729629},\\n\",\n       \"    {'name': 'dti', 'value': 15.3598988959}],\\n\",\n       \"   'prediction': 0.2698968901},\\n\",\n       \"  {'features': [{'name': 'revol_util', 'value': 45.0049151077},\\n\",\n       \"    {'name': 'inq_last_6mths', 'value': 1.5283001672},\\n\",\n       \"    {'name': 'loan_amnt', 'value': 9895.0358223131},\\n\",\n       \"    {'name': 'dti', 'value': 16.9994890472}],\\n\",\n       \"   'prediction': 0.2325089264},\\n\",\n       \"  {'features': [{'name': 'revol_util', 'value': 36.8989496084},\\n\",\n       \"    {'name': 'inq_last_6mths', 'value': 0.1108333666},\\n\",\n       \"    {'name': 'loan_amnt', 'value': 20323.6183619076},\\n\",\n       \"    {'name': 'dti', 'value': 15.2680203057}],\\n\",\n       \"   'prediction': 0.2442418462},\\n\",\n       \"  {'features': [{'name': 'revol_util', 'value': 85.1210025953},\\n\",\n       \"    {'name': 'inq_last_6mths', 'value': 0.3916550035},\\n\",\n       \"    {'name': 'loan_amnt', 'value': 10287.7796167758},\\n\",\n       \"    {'name': 'dti', 'value': 16.3798095382}],\\n\",\n       \"   'prediction': 0.2599748296},\\n\",\n       \"  {'features': [{'name': 'revol_util', 'value': 13.7351761687},\\n\",\n       \"    {'name': 'inq_last_6mths', 'value': 0.9472639234},\\n\",\n       \"    {'name': 'loan_amnt', 'value': 24852.813391656},\\n\",\n       \"    {'name': 'dti', 'value': 6.9202648842}],\\n\",\n       \"   'prediction': 0.2267111463},\\n\",\n       \"  {'features': [{'name': 'revol_util', 'value': 21.6605689716},\\n\",\n       \"    {'name': 'inq_last_6mths', 'value': 1.9671320113},\\n\",\n       \"    {'name': 'loan_amnt', 'value': 19354.6466687579},\\n\",\n       \"    {'name': 'dti', 'value': 10.9410355775}],\\n\",\n       \"   'prediction': 0.2125952129},\\n\",\n       \"  {'features': [{'name': 'revol_util', 'value': 65.4168828772},\\n\",\n       \"    {'name': 'inq_last_6mths', 'value': 0.7640812989},\\n\",\n       \"    {'name': 'loan_amnt', 'value': 24879.2163814019},\\n\",\n       \"    {'name': 'dti', 'value': 12.1032434364}],\\n\",\n       \"   'prediction': 0.3100661141},\\n\",\n       \"  {'features': [{'name': 'revol_util', 'value': 63.494167749},\\n\",\n       \"    {'name': 'inq_last_6mths', 'value': 1.0271427436},\\n\",\n       \"    {'name': 'loan_amnt', 'value': 15272.5814180599},\\n\",\n       \"    {'name': 'dti', 'value': 10.6046142827}],\\n\",\n       \"   'prediction': 0.282925596},\\n\",\n       \"  {'features': [{'name': 'revol_util', 'value': 95.2447203999},\\n\",\n       \"    {'name': 'inq_last_6mths', 'value': 0.9683800954},\\n\",\n       \"    {'name': 'loan_amnt', 'value': 15141.2260745965},\\n\",\n       \"    {'name': 'dti', 'value': 7.3096336485}],\\n\",\n       \"   'prediction': 0.328156173},\\n\",\n       \"  {'features': [{'name': 'revol_util', 'value': 91.8879784118},\\n\",\n       \"    {'name': 'inq_last_6mths', 'value': 1.4543316415},\\n\",\n       \"    {'name': 'loan_amnt', 'value': 14666.3643678597},\\n\",\n       \"    {'name': 'dti', 'value': 6.537568976}],\\n\",\n       \"   'prediction': 0.3402189938},\\n\",\n       \"  {'features': [{'name': 'revol_util', 'value': 93.4833953214},\\n\",\n       \"    {'name': 'inq_last_6mths', 'value': 1.719366406},\\n\",\n       \"    {'name': 'loan_amnt', 'value': 5284.9371912345},\\n\",\n       \"    {'name': 'dti', 'value': 9.0186622784}],\\n\",\n       \"   'prediction': 0.2634209666},\\n\",\n       \"  {'features': [{'name': 'revol_util', 'value': 81.302248179},\\n\",\n       \"    {'name': 'inq_last_6mths', 'value': 1.42669039},\\n\",\n       \"    {'name': 'loan_amnt', 'value': 10855.2764557074},\\n\",\n       \"    {'name': 'dti', 'value': 13.3538904502}],\\n\",\n       \"   'prediction': 0.263408821},\\n\",\n       \"  {'features': [{'name': 'revol_util', 'value': 28.3946935177},\\n\",\n       \"    {'name': 'inq_last_6mths', 'value': 1.998260119},\\n\",\n       \"    {'name': 'loan_amnt', 'value': 18682.1257710116},\\n\",\n       \"    {'name': 'dti', 'value': 8.6154779801}],\\n\",\n       \"   'prediction': 0.2269842384},\\n\",\n       \"  {'features': [{'name': 'revol_util', 'value': 60.6111956391},\\n\",\n       \"    {'name': 'inq_last_6mths', 'value': 1.3745211203},\\n\",\n       \"    {'name': 'loan_amnt', 'value': 13419.2829805506},\\n\",\n       \"    {'name': 'dti', 'value': 8.5898111212}],\\n\",\n       \"   'prediction': 0.2780002195},\\n\",\n       \"  {'features': [{'name': 'revol_util', 'value': 72.8254576367},\\n\",\n       \"    {'name': 'inq_last_6mths', 'value': 0.631396001},\\n\",\n       \"    {'name': 'loan_amnt', 'value': 7783.3731939254},\\n\",\n       \"    {'name': 'dti', 'value': 13.7967193744}],\\n\",\n       \"   'prediction': 0.2625659994},\\n\",\n       \"  {'features': [{'name': 'revol_util', 'value': 89.9255202212},\\n\",\n       \"    {'name': 'inq_last_6mths', 'value': 1.2450507362},\\n\",\n       \"    {'name': 'loan_amnt', 'value': 4098.8064712948},\\n\",\n       \"    {'name': 'dti', 'value': 9.7129157475}],\\n\",\n       \"   'prediction': 0.2669822627},\\n\",\n       \"  {'features': [{'name': 'revol_util', 'value': 95.8907305848},\\n\",\n       \"    {'name': 'inq_last_6mths', 'value': 1.1257277157},\\n\",\n       \"    {'name': 'loan_amnt', 'value': 15905.7444754588},\\n\",\n       \"    {'name': 'dti', 'value': 7.0186165398}],\\n\",\n       \"   'prediction': 0.3309333302},\\n\",\n       \"  {'features': [{'name': 'revol_util', 'value': 95.3579001537},\\n\",\n       \"    {'name': 'inq_last_6mths', 'value': 1.7136108728},\\n\",\n       \"    {'name': 'loan_amnt', 'value': 17177.6830400163},\\n\",\n       \"    {'name': 'dti', 'value': 6.6291989201}],\\n\",\n       \"   'prediction': 0.3376584341},\\n\",\n       \"  {'features': [{'name': 'revol_util', 'value': 83.1111257531},\\n\",\n       \"    {'name': 'inq_last_6mths', 'value': 1.7352386171},\\n\",\n       \"    {'name': 'loan_amnt', 'value': 17303.6851475088},\\n\",\n       \"    {'name': 'dti', 'value': 6.5152202818}],\\n\",\n       \"   'prediction': 0.3039716097},\\n\",\n       \"  {'features': [{'name': 'revol_util', 'value': 76.3538211344},\\n\",\n       \"    {'name': 'inq_last_6mths', 'value': 1.7419517757},\\n\",\n       \"    {'name': 'loan_amnt', 'value': 12855.7429681084},\\n\",\n       \"    {'name': 'dti', 'value': 8.0394714525}],\\n\",\n       \"   'prediction': 0.2867518176},\\n\",\n       \"  {'features': [{'name': 'revol_util', 'value': 88.3424954986},\\n\",\n       \"    {'name': 'inq_last_6mths', 'value': 1.5999148834},\\n\",\n       \"    {'name': 'loan_amnt', 'value': 21410.0910474588},\\n\",\n       \"    {'name': 'dti', 'value': 9.7613512478}],\\n\",\n       \"   'prediction': 0.287835768},\\n\",\n       \"  {'features': [{'name': 'revol_util', 'value': 52.3656133662},\\n\",\n       \"    {'name': 'inq_last_6mths', 'value': 1.9132520497},\\n\",\n       \"    {'name': 'loan_amnt', 'value': 17216.0914850069},\\n\",\n       \"    {'name': 'dti', 'value': 7.6645625285}],\\n\",\n       \"   'prediction': 0.2742213185},\\n\",\n       \"  {'features': [{'name': 'revol_util', 'value': 71.5883788679},\\n\",\n       \"    {'name': 'inq_last_6mths', 'value': 1.2808733752},\\n\",\n       \"    {'name': 'loan_amnt', 'value': 12825.0088693607},\\n\",\n       \"    {'name': 'dti', 'value': 6.5025125975}],\\n\",\n       \"   'prediction': 0.2949951277},\\n\",\n       \"  {'features': [{'name': 'revol_util', 'value': 56.0550031723},\\n\",\n       \"    {'name': 'inq_last_6mths', 'value': 1.8177252078},\\n\",\n       \"    {'name': 'loan_amnt', 'value': 22110.8957829512},\\n\",\n       \"    {'name': 'dti', 'value': 12.0713823746}],\\n\",\n       \"   'prediction': 0.2863530612},\\n\",\n       \"  {'features': [{'name': 'revol_util', 'value': 80.4193213513},\\n\",\n       \"    {'name': 'inq_last_6mths', 'value': 1.5606480175},\\n\",\n       \"    {'name': 'loan_amnt', 'value': 17385.2476504224},\\n\",\n       \"    {'name': 'dti', 'value': 9.6313559924}],\\n\",\n       \"   'prediction': 0.2815199426},\\n\",\n       \"  {'features': [{'name': 'revol_util', 'value': 95.8681400578},\\n\",\n       \"    {'name': 'inq_last_6mths', 'value': 1.1793427686},\\n\",\n       \"    {'name': 'loan_amnt', 'value': 11792.2758850103},\\n\",\n       \"    {'name': 'dti', 'value': 10.6775069252}],\\n\",\n       \"   'prediction': 0.3243969569},\\n\",\n       \"  {'features': [{'name': 'revol_util', 'value': 68.2527480122},\\n\",\n       \"    {'name': 'inq_last_6mths', 'value': 1.3989299088},\\n\",\n       \"    {'name': 'loan_amnt', 'value': 16194.995032345},\\n\",\n       \"    {'name': 'dti', 'value': 8.0347125036}],\\n\",\n       \"   'prediction': 0.2864079621},\\n\",\n       \"  {'features': [{'name': 'revol_util', 'value': 76.6352413331},\\n\",\n       \"    {'name': 'inq_last_6mths', 'value': 1.5854440744},\\n\",\n       \"    {'name': 'loan_amnt', 'value': 7205.5260752878},\\n\",\n       \"    {'name': 'dti', 'value': 13.2010113217}],\\n\",\n       \"   'prediction': 0.2238153512},\\n\",\n       \"  {'features': [{'name': 'revol_util', 'value': 89.2444415711},\\n\",\n       \"    {'name': 'inq_last_6mths', 'value': 0.8099329154},\\n\",\n       \"    {'name': 'loan_amnt', 'value': 13953.9001852581},\\n\",\n       \"    {'name': 'dti', 'value': 6.6726280516}],\\n\",\n       \"   'prediction': 0.292055332},\\n\",\n       \"  {'features': [{'name': 'revol_util', 'value': 46.3403679924},\\n\",\n       \"    {'name': 'inq_last_6mths', 'value': 1.8765845798},\\n\",\n       \"    {'name': 'loan_amnt', 'value': 9100.961419054},\\n\",\n       \"    {'name': 'dti', 'value': 7.6825839762}],\\n\",\n       \"   'prediction': 0.2351267062},\\n\",\n       \"  {'features': [{'name': 'revol_util', 'value': 36.799456647},\\n\",\n       \"    {'name': 'inq_last_6mths', 'value': 1.4622552189},\\n\",\n       \"    {'name': 'loan_amnt', 'value': 18696.9157106096},\\n\",\n       \"    {'name': 'dti', 'value': 11.2982050211}],\\n\",\n       \"   'prediction': 0.2380610019},\\n\",\n       \"  {'features': [{'name': 'revol_util', 'value': 58.4759230445},\\n\",\n       \"    {'name': 'inq_last_6mths', 'value': 1.6733721591},\\n\",\n       \"    {'name': 'loan_amnt', 'value': 23236.067635923},\\n\",\n       \"    {'name': 'dti', 'value': 15.0312296444}],\\n\",\n       \"   'prediction': 0.2982348448},\\n\",\n       \"  {'features': [{'name': 'revol_util', 'value': 87.3967794833},\\n\",\n       \"    {'name': 'inq_last_6mths', 'value': 0.0327203476},\\n\",\n       \"    {'name': 'loan_amnt', 'value': 11536.5000507494},\\n\",\n       \"    {'name': 'dti', 'value': 10.214204467}],\\n\",\n       \"   'prediction': 0.2729464737},\\n\",\n       \"  {'features': [{'name': 'revol_util', 'value': 51.1122485101},\\n\",\n       \"    {'name': 'inq_last_6mths', 'value': 0.4304121949},\\n\",\n       \"    {'name': 'loan_amnt', 'value': 20826.0344615887},\\n\",\n       \"    {'name': 'dti', 'value': 8.986912674}],\\n\",\n       \"   'prediction': 0.2775705212},\\n\",\n       \"  {'features': [{'name': 'revol_util', 'value': 37.5025140363},\\n\",\n       \"    {'name': 'inq_last_6mths', 'value': 1.3301253022},\\n\",\n       \"    {'name': 'loan_amnt', 'value': 9075.2595962895},\\n\",\n       \"    {'name': 'dti', 'value': 14.1425715185}],\\n\",\n       \"   'prediction': 0.2135976787},\\n\",\n       \"  {'features': [{'name': 'revol_util', 'value': 77.7597681003},\\n\",\n       \"    {'name': 'inq_last_6mths', 'value': 1.0682114702},\\n\",\n       \"    {'name': 'loan_amnt', 'value': 19679.1629395437},\\n\",\n       \"    {'name': 'dti', 'value': 7.3256514118}],\\n\",\n       \"   'prediction': 0.2961062396},\\n\",\n       \"  {'features': [{'name': 'revol_util', 'value': 68.6355773141},\\n\",\n       \"    {'name': 'inq_last_6mths', 'value': 0.8158646827},\\n\",\n       \"    {'name': 'loan_amnt', 'value': 23547.2122722988},\\n\",\n       \"    {'name': 'dti', 'value': 12.5688089451}],\\n\",\n       \"   'prediction': 0.3007942532},\\n\",\n       \"  {'features': [{'name': 'revol_util', 'value': 92.1976329168},\\n\",\n       \"    {'name': 'inq_last_6mths', 'value': 1.4925243546},\\n\",\n       \"    {'name': 'loan_amnt', 'value': 18172.928352835},\\n\",\n       \"    {'name': 'dti', 'value': 11.2991337404}],\\n\",\n       \"   'prediction': 0.3375831517},\\n\",\n       \"  {'features': [{'name': 'revol_util', 'value': 13.2394185304},\\n\",\n       \"    {'name': 'inq_last_6mths', 'value': 1.8161104625},\\n\",\n       \"    {'name': 'loan_amnt', 'value': 14944.8526552772},\\n\",\n       \"    {'name': 'dti', 'value': 8.3542370952}],\\n\",\n       \"   'prediction': 0.1592060287}],\\n\",\n       \" 'row': {'revol_util': None,\\n\",\n       \"  'inq_last_6mths': None,\\n\",\n       \"  'loan_amnt': None,\\n\",\n       \"  'dti': None},\\n\",\n       \" 'optimized_simulation': {'features': [{'name': 'revol_util',\\n\",\n       \"    'value': 91.8879784118},\\n\",\n       \"   {'name': 'inq_last_6mths', 'value': 1.4543316415},\\n\",\n       \"   {'name': 'loan_amnt', 'value': 14666.3643678597},\\n\",\n       \"   {'name': 'dti', 'value': 6.537568976}],\\n\",\n       \"  'prediction': 0.3402189938,\\n\",\n       \"  'index': 10},\\n\",\n       \" 'feature_histograms': {},\\n\",\n       \" 'step_line': [0.2213493262,\\n\",\n       \"  0.2698968901,\\n\",\n       \"  0.2698968901,\\n\",\n       \"  0.2698968901,\\n\",\n       \"  0.2698968901,\\n\",\n       \"  0.2698968901,\\n\",\n       \"  0.2698968901,\\n\",\n       \"  0.3100661141,\\n\",\n       \"  0.3100661141,\\n\",\n       \"  0.328156173,\\n\",\n       \"  0.3402189938,\\n\",\n       \"  0.3402189938,\\n\",\n       \"  0.3402189938,\\n\",\n       \"  0.3402189938,\\n\",\n       \"  0.3402189938,\\n\",\n       \"  0.3402189938,\\n\",\n       \"  0.3402189938,\\n\",\n       \"  0.3402189938,\\n\",\n       \"  0.3402189938,\\n\",\n       \"  0.3402189938,\\n\",\n       \"  0.3402189938,\\n\",\n       \"  0.3402189938,\\n\",\n       \"  0.3402189938,\\n\",\n       \"  0.3402189938,\\n\",\n       \"  0.3402189938,\\n\",\n       \"  0.3402189938,\\n\",\n       \"  0.3402189938,\\n\",\n       \"  0.3402189938,\\n\",\n       \"  0.3402189938,\\n\",\n       \"  0.3402189938,\\n\",\n       \"  0.3402189938,\\n\",\n       \"  0.3402189938,\\n\",\n       \"  0.3402189938,\\n\",\n       \"  0.3402189938,\\n\",\n       \"  0.3402189938,\\n\",\n       \"  0.3402189938,\\n\",\n       \"  0.3402189938,\\n\",\n       \"  0.3402189938,\\n\",\n       \"  0.3402189938,\\n\",\n       \"  0.3402189938],\\n\",\n       \" 'custom_expr': None}\"\n      ]\n     },\n     \"execution_count\": 8,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"# See example of output from the optimizer\\n\",\n    \"results\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 9,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"0.2709511209\"\n      ]\n     },\n     \"execution_count\": 9,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"df.loc[3,\\\"opt_prediction\\\"]\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 61,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>custom_id</th>\\n\",\n       \"      <th>loan_amnt</th>\\n\",\n       \"      <th>funded_amnt</th>\\n\",\n       \"      <th>term</th>\\n\",\n       \"      <th>int_rate</th>\\n\",\n       \"      <th>installment</th>\\n\",\n       \"      <th>grade</th>\\n\",\n       \"      <th>sub_grade</th>\\n\",\n       \"      <th>emp_title</th>\\n\",\n       \"      <th>emp_length</th>\\n\",\n       \"      <th>...</th>\\n\",\n       \"      <th>mths_since_last_major_derog</th>\\n\",\n       \"      <th>policy_code</th>\\n\",\n       \"      <th>is_bad</th>\\n\",\n       \"      <th>Target (1)</th>\\n\",\n       \"      <th>Target (1) Prediction Value</th>\\n\",\n       \"      <th>opt_prediction</th>\\n\",\n       \"      <th>opt_revol_util</th>\\n\",\n       \"      <th>opt_inq_last_6mths</th>\\n\",\n       \"      <th>opt_loan_amnt</th>\\n\",\n       \"      <th>opt_dti</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>7.0</td>\\n\",\n       \"      <td>14000.0</td>\\n\",\n       \"      <td>8725.0</td>\\n\",\n       \"      <td>60 months</td>\\n\",\n       \"      <td>7.51%</td>\\n\",\n       \"      <td>174.88</td>\\n\",\n       \"      <td>A</td>\\n\",\n       \"      <td>A4</td>\\n\",\n       \"      <td>Peninsula Counseling Center</td>\\n\",\n       \"      <td>10+ years</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>1.0</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"      <td>0.998740</td>\\n\",\n       \"      <td>0.048569</td>\\n\",\n       \"      <td>1.383494</td>\\n\",\n       \"      <td>8.192054</td>\\n\",\n       \"      <td>27291.322287</td>\\n\",\n       \"      <td>0.134797</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>8.0</td>\\n\",\n       \"      <td>3975.0</td>\\n\",\n       \"      <td>3975.0</td>\\n\",\n       \"      <td>60 months</td>\\n\",\n       \"      <td>17.58%</td>\\n\",\n       \"      <td>100.04</td>\\n\",\n       \"      <td>D</td>\\n\",\n       \"      <td>D4</td>\\n\",\n       \"      <td>Health Plan of Nevada</td>\\n\",\n       \"      <td>6 years</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>1.0</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"      <td>0.910816</td>\\n\",\n       \"      <td>0.291327</td>\\n\",\n       \"      <td>48.439644</td>\\n\",\n       \"      <td>3.468059</td>\\n\",\n       \"      <td>28272.498063</td>\\n\",\n       \"      <td>1.917662</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>2</td>\\n\",\n       \"      <td>9.0</td>\\n\",\n       \"      <td>25000.0</td>\\n\",\n       \"      <td>25000.0</td>\\n\",\n       \"      <td>36 months</td>\\n\",\n       \"      <td>15.58%</td>\\n\",\n       \"      <td>873.76</td>\\n\",\n       \"      <td>D</td>\\n\",\n       \"      <td>D3</td>\\n\",\n       \"      <td>John Deere</td>\\n\",\n       \"      <td>2 years</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>1.0</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"      <td>0.722703</td>\\n\",\n       \"      <td>0.213890</td>\\n\",\n       \"      <td>94.653879</td>\\n\",\n       \"      <td>2.516591</td>\\n\",\n       \"      <td>1048.202766</td>\\n\",\n       \"      <td>7.263397</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>10.0</td>\\n\",\n       \"      <td>10000.0</td>\\n\",\n       \"      <td>10000.0</td>\\n\",\n       \"      <td>36 months</td>\\n\",\n       \"      <td>8.00%</td>\\n\",\n       \"      <td>313.37</td>\\n\",\n       \"      <td>A</td>\\n\",\n       \"      <td>A3</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>&lt; 1 year</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>1.0</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"      <td>0.953509</td>\\n\",\n       \"      <td>0.276012</td>\\n\",\n       \"      <td>89.474905</td>\\n\",\n       \"      <td>1.336023</td>\\n\",\n       \"      <td>29563.737299</td>\\n\",\n       \"      <td>19.058788</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>4</td>\\n\",\n       \"      <td>11.0</td>\\n\",\n       \"      <td>10000.0</td>\\n\",\n       \"      <td>10000.0</td>\\n\",\n       \"      <td>36 months</td>\\n\",\n       \"      <td>6.62%</td>\\n\",\n       \"      <td>307.04</td>\\n\",\n       \"      <td>A</td>\\n\",\n       \"      <td>A2</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>3 years</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>1.0</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"      <td>0.988155</td>\\n\",\n       \"      <td>0.053004</td>\\n\",\n       \"      <td>46.291825</td>\\n\",\n       \"      <td>1.916218</td>\\n\",\n       \"      <td>27783.824290</td>\\n\",\n       \"      <td>18.628171</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>5</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>0.379326</td>\\n\",\n       \"      <td>92.367910</td>\\n\",\n       \"      <td>2.879611</td>\\n\",\n       \"      <td>24905.041876</td>\\n\",\n       \"      <td>22.379689</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>6</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>0.379326</td>\\n\",\n       \"      <td>92.367910</td>\\n\",\n       \"      <td>2.879611</td>\\n\",\n       \"      <td>24905.041876</td>\\n\",\n       \"      <td>22.379689</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>7</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>0.379326</td>\\n\",\n       \"      <td>92.367910</td>\\n\",\n       \"      <td>2.879611</td>\\n\",\n       \"      <td>24905.041876</td>\\n\",\n       \"      <td>22.379689</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>8</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>0.379326</td>\\n\",\n       \"      <td>92.367910</td>\\n\",\n       \"      <td>2.879611</td>\\n\",\n       \"      <td>24905.041876</td>\\n\",\n       \"      <td>22.379689</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>9</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>0.379326</td>\\n\",\n       \"      <td>92.367910</td>\\n\",\n       \"      <td>2.879611</td>\\n\",\n       \"      <td>24905.041876</td>\\n\",\n       \"      <td>22.379689</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>10</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>0.379326</td>\\n\",\n       \"      <td>92.367910</td>\\n\",\n       \"      <td>2.879611</td>\\n\",\n       \"      <td>24905.041876</td>\\n\",\n       \"      <td>22.379689</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>11</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>0.379326</td>\\n\",\n       \"      <td>92.367910</td>\\n\",\n       \"      <td>2.879611</td>\\n\",\n       \"      <td>24905.041876</td>\\n\",\n       \"      <td>22.379689</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>12</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>0.379326</td>\\n\",\n       \"      <td>92.367910</td>\\n\",\n       \"      <td>2.879611</td>\\n\",\n       \"      <td>24905.041876</td>\\n\",\n       \"      <td>22.379689</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>13</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>0.379326</td>\\n\",\n       \"      <td>92.367910</td>\\n\",\n       \"      <td>2.879611</td>\\n\",\n       \"      <td>24905.041876</td>\\n\",\n       \"      <td>22.379689</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>14</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>0.379326</td>\\n\",\n       \"      <td>92.367910</td>\\n\",\n       \"      <td>2.879611</td>\\n\",\n       \"      <td>24905.041876</td>\\n\",\n       \"      <td>22.379689</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>15</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>0.379326</td>\\n\",\n       \"      <td>92.367910</td>\\n\",\n       \"      <td>2.879611</td>\\n\",\n       \"      <td>24905.041876</td>\\n\",\n       \"      <td>22.379689</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>16</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>0.379326</td>\\n\",\n       \"      <td>92.367910</td>\\n\",\n       \"      <td>2.879611</td>\\n\",\n       \"      <td>24905.041876</td>\\n\",\n       \"      <td>22.379689</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>17</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>0.379326</td>\\n\",\n       \"      <td>92.367910</td>\\n\",\n       \"      <td>2.879611</td>\\n\",\n       \"      <td>24905.041876</td>\\n\",\n       \"      <td>22.379689</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>18</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>0.379326</td>\\n\",\n       \"      <td>92.367910</td>\\n\",\n       \"      <td>2.879611</td>\\n\",\n       \"      <td>24905.041876</td>\\n\",\n       \"      <td>22.379689</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>19</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>0.379326</td>\\n\",\n       \"      <td>92.367910</td>\\n\",\n       \"      <td>2.879611</td>\\n\",\n       \"      <td>24905.041876</td>\\n\",\n       \"      <td>22.379689</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>20</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>0.379326</td>\\n\",\n       \"      <td>92.367910</td>\\n\",\n       \"      <td>2.879611</td>\\n\",\n       \"      <td>24905.041876</td>\\n\",\n       \"      <td>22.379689</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>21</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>0.379326</td>\\n\",\n       \"      <td>92.367910</td>\\n\",\n       \"      <td>2.879611</td>\\n\",\n       \"      <td>24905.041876</td>\\n\",\n       \"      <td>22.379689</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>22</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>0.379326</td>\\n\",\n       \"      <td>92.367910</td>\\n\",\n       \"      <td>2.879611</td>\\n\",\n       \"      <td>24905.041876</td>\\n\",\n       \"      <td>22.379689</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>23</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>0.379326</td>\\n\",\n       \"      <td>92.367910</td>\\n\",\n       \"      <td>2.879611</td>\\n\",\n       \"      <td>24905.041876</td>\\n\",\n       \"      <td>22.379689</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>24</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>0.379326</td>\\n\",\n       \"      <td>92.367910</td>\\n\",\n       \"      <td>2.879611</td>\\n\",\n       \"      <td>24905.041876</td>\\n\",\n       \"      <td>22.379689</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>25</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>0.379326</td>\\n\",\n       \"      <td>92.367910</td>\\n\",\n       \"      <td>2.879611</td>\\n\",\n       \"      <td>24905.041876</td>\\n\",\n       \"      <td>22.379689</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>26</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>0.379326</td>\\n\",\n       \"      <td>92.367910</td>\\n\",\n       \"      <td>2.879611</td>\\n\",\n       \"      <td>24905.041876</td>\\n\",\n       \"      <td>22.379689</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>27</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>0.379326</td>\\n\",\n       \"      <td>92.367910</td>\\n\",\n       \"      <td>2.879611</td>\\n\",\n       \"      <td>24905.041876</td>\\n\",\n       \"      <td>22.379689</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <td>28</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>0.379326</td>\\n\",\n       \"      <td>92.367910</td>\\n\",\n       \"      <td>2.879611</td>\\n\",\n       \"      <td>24905.041876</td>\\n\",\n       \"      <td>22.379689</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"<p>29 rows × 42 columns</p>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"    custom_id  loan_amnt  funded_amnt        term int_rate  installment grade  \\\\\\n\",\n       \"0         7.0    14000.0       8725.0   60 months    7.51%       174.88     A   \\n\",\n       \"1         8.0     3975.0       3975.0   60 months   17.58%       100.04     D   \\n\",\n       \"2         9.0    25000.0      25000.0   36 months   15.58%       873.76     D   \\n\",\n       \"3        10.0    10000.0      10000.0   36 months    8.00%       313.37     A   \\n\",\n       \"4        11.0    10000.0      10000.0   36 months    6.62%       307.04     A   \\n\",\n       \"5         NaN        NaN          NaN         NaN      NaN          NaN   NaN   \\n\",\n       \"6         NaN        NaN          NaN         NaN      NaN          NaN   NaN   \\n\",\n       \"7         NaN        NaN          NaN         NaN      NaN          NaN   NaN   \\n\",\n       \"8         NaN        NaN          NaN         NaN      NaN          NaN   NaN   \\n\",\n       \"9         NaN        NaN          NaN         NaN      NaN          NaN   NaN   \\n\",\n       \"10        NaN        NaN          NaN         NaN      NaN          NaN   NaN   \\n\",\n       \"11        NaN        NaN          NaN         NaN      NaN          NaN   NaN   \\n\",\n       \"12        NaN        NaN          NaN         NaN      NaN          NaN   NaN   \\n\",\n       \"13        NaN        NaN          NaN         NaN      NaN          NaN   NaN   \\n\",\n       \"14        NaN        NaN          NaN         NaN      NaN          NaN   NaN   \\n\",\n       \"15        NaN        NaN          NaN         NaN      NaN          NaN   NaN   \\n\",\n       \"16        NaN        NaN          NaN         NaN      NaN          NaN   NaN   \\n\",\n       \"17        NaN        NaN          NaN         NaN      NaN          NaN   NaN   \\n\",\n       \"18        NaN        NaN          NaN         NaN      NaN          NaN   NaN   \\n\",\n       \"19        NaN        NaN          NaN         NaN      NaN          NaN   NaN   \\n\",\n       \"20        NaN        NaN          NaN         NaN      NaN          NaN   NaN   \\n\",\n       \"21        NaN        NaN          NaN         NaN      NaN          NaN   NaN   \\n\",\n       \"22        NaN        NaN          NaN         NaN      NaN          NaN   NaN   \\n\",\n       \"23        NaN        NaN          NaN         NaN      NaN          NaN   NaN   \\n\",\n       \"24        NaN        NaN          NaN         NaN      NaN          NaN   NaN   \\n\",\n       \"25        NaN        NaN          NaN         NaN      NaN          NaN   NaN   \\n\",\n       \"26        NaN        NaN          NaN         NaN      NaN          NaN   NaN   \\n\",\n       \"27        NaN        NaN          NaN         NaN      NaN          NaN   NaN   \\n\",\n       \"28        NaN        NaN          NaN         NaN      NaN          NaN   NaN   \\n\",\n       \"\\n\",\n       \"   sub_grade                    emp_title emp_length  ...  \\\\\\n\",\n       \"0         A4  Peninsula Counseling Center  10+ years  ...   \\n\",\n       \"1         D4        Health Plan of Nevada    6 years  ...   \\n\",\n       \"2         D3                   John Deere    2 years  ...   \\n\",\n       \"3         A3                          NaN   < 1 year  ...   \\n\",\n       \"4         A2                          NaN    3 years  ...   \\n\",\n       \"5        NaN                          NaN        NaN  ...   \\n\",\n       \"6        NaN                          NaN        NaN  ...   \\n\",\n       \"7        NaN                          NaN        NaN  ...   \\n\",\n       \"8        NaN                          NaN        NaN  ...   \\n\",\n       \"9        NaN                          NaN        NaN  ...   \\n\",\n       \"10       NaN                          NaN        NaN  ...   \\n\",\n       \"11       NaN                          NaN        NaN  ...   \\n\",\n       \"12       NaN                          NaN        NaN  ...   \\n\",\n       \"13       NaN                          NaN        NaN  ...   \\n\",\n       \"14       NaN                          NaN        NaN  ...   \\n\",\n       \"15       NaN                          NaN        NaN  ...   \\n\",\n       \"16       NaN                          NaN        NaN  ...   \\n\",\n       \"17       NaN                          NaN        NaN  ...   \\n\",\n       \"18       NaN                          NaN        NaN  ...   \\n\",\n       \"19       NaN                          NaN        NaN  ...   \\n\",\n       \"20       NaN                          NaN        NaN  ...   \\n\",\n       \"21       NaN                          NaN        NaN  ...   \\n\",\n       \"22       NaN                          NaN        NaN  ...   \\n\",\n       \"23       NaN                          NaN        NaN  ...   \\n\",\n       \"24       NaN                          NaN        NaN  ...   \\n\",\n       \"25       NaN                          NaN        NaN  ...   \\n\",\n       \"26       NaN                          NaN        NaN  ...   \\n\",\n       \"27       NaN                          NaN        NaN  ...   \\n\",\n       \"28       NaN                          NaN        NaN  ...   \\n\",\n       \"\\n\",\n       \"   mths_since_last_major_derog  policy_code is_bad Target (1)  \\\\\\n\",\n       \"0                          NaN          1.0    0.0        0.0   \\n\",\n       \"1                          NaN          1.0    0.0        0.0   \\n\",\n       \"2                          NaN          1.0    0.0        0.0   \\n\",\n       \"3                          NaN          1.0    0.0        0.0   \\n\",\n       \"4                          NaN          1.0    0.0        0.0   \\n\",\n       \"5                          NaN          NaN    NaN        NaN   \\n\",\n       \"6                          NaN          NaN    NaN        NaN   \\n\",\n       \"7                          NaN          NaN    NaN        NaN   \\n\",\n       \"8                          NaN          NaN    NaN        NaN   \\n\",\n       \"9                          NaN          NaN    NaN        NaN   \\n\",\n       \"10                         NaN          NaN    NaN        NaN   \\n\",\n       \"11                         NaN          NaN    NaN        NaN   \\n\",\n       \"12                         NaN          NaN    NaN        NaN   \\n\",\n       \"13                         NaN          NaN    NaN        NaN   \\n\",\n       \"14                         NaN          NaN    NaN        NaN   \\n\",\n       \"15                         NaN          NaN    NaN        NaN   \\n\",\n       \"16                         NaN          NaN    NaN        NaN   \\n\",\n       \"17                         NaN          NaN    NaN        NaN   \\n\",\n       \"18                         NaN          NaN    NaN        NaN   \\n\",\n       \"19                         NaN          NaN    NaN        NaN   \\n\",\n       \"20                         NaN          NaN    NaN        NaN   \\n\",\n       \"21                         NaN          NaN    NaN        NaN   \\n\",\n       \"22                         NaN          NaN    NaN        NaN   \\n\",\n       \"23                         NaN          NaN    NaN        NaN   \\n\",\n       \"24                         NaN          NaN    NaN        NaN   \\n\",\n       \"25                         NaN          NaN    NaN        NaN   \\n\",\n       \"26                         NaN          NaN    NaN        NaN   \\n\",\n       \"27                         NaN          NaN    NaN        NaN   \\n\",\n       \"28                         NaN          NaN    NaN        NaN   \\n\",\n       \"\\n\",\n       \"   Target (1) Prediction Value opt_prediction opt_revol_util  \\\\\\n\",\n       \"0                     0.998740       0.048569       1.383494   \\n\",\n       \"1                     0.910816       0.291327      48.439644   \\n\",\n       \"2                     0.722703       0.213890      94.653879   \\n\",\n       \"3                     0.953509       0.276012      89.474905   \\n\",\n       \"4                     0.988155       0.053004      46.291825   \\n\",\n       \"5                          NaN       0.379326      92.367910   \\n\",\n       \"6                          NaN       0.379326      92.367910   \\n\",\n       \"7                          NaN       0.379326      92.367910   \\n\",\n       \"8                          NaN       0.379326      92.367910   \\n\",\n       \"9                          NaN       0.379326      92.367910   \\n\",\n       \"10                         NaN       0.379326      92.367910   \\n\",\n       \"11                         NaN       0.379326      92.367910   \\n\",\n       \"12                         NaN       0.379326      92.367910   \\n\",\n       \"13                         NaN       0.379326      92.367910   \\n\",\n       \"14                         NaN       0.379326      92.367910   \\n\",\n       \"15                         NaN       0.379326      92.367910   \\n\",\n       \"16                         NaN       0.379326      92.367910   \\n\",\n       \"17                         NaN       0.379326      92.367910   \\n\",\n       \"18                         NaN       0.379326      92.367910   \\n\",\n       \"19                         NaN       0.379326      92.367910   \\n\",\n       \"20                         NaN       0.379326      92.367910   \\n\",\n       \"21                         NaN       0.379326      92.367910   \\n\",\n       \"22                         NaN       0.379326      92.367910   \\n\",\n       \"23                         NaN       0.379326      92.367910   \\n\",\n       \"24                         NaN       0.379326      92.367910   \\n\",\n       \"25                         NaN       0.379326      92.367910   \\n\",\n       \"26                         NaN       0.379326      92.367910   \\n\",\n       \"27                         NaN       0.379326      92.367910   \\n\",\n       \"28                         NaN       0.379326      92.367910   \\n\",\n       \"\\n\",\n       \"   opt_inq_last_6mths opt_loan_amnt    opt_dti  \\n\",\n       \"0            8.192054  27291.322287   0.134797  \\n\",\n       \"1            3.468059  28272.498063   1.917662  \\n\",\n       \"2            2.516591   1048.202766   7.263397  \\n\",\n       \"3            1.336023  29563.737299  19.058788  \\n\",\n       \"4            1.916218  27783.824290  18.628171  \\n\",\n       \"5            2.879611  24905.041876  22.379689  \\n\",\n       \"6            2.879611  24905.041876  22.379689  \\n\",\n       \"7            2.879611  24905.041876  22.379689  \\n\",\n       \"8            2.879611  24905.041876  22.379689  \\n\",\n       \"9            2.879611  24905.041876  22.379689  \\n\",\n       \"10           2.879611  24905.041876  22.379689  \\n\",\n       \"11           2.879611  24905.041876  22.379689  \\n\",\n       \"12           2.879611  24905.041876  22.379689  \\n\",\n       \"13           2.879611  24905.041876  22.379689  \\n\",\n       \"14           2.879611  24905.041876  22.379689  \\n\",\n       \"15           2.879611  24905.041876  22.379689  \\n\",\n       \"16           2.879611  24905.041876  22.379689  \\n\",\n       \"17           2.879611  24905.041876  22.379689  \\n\",\n       \"18           2.879611  24905.041876  22.379689  \\n\",\n       \"19           2.879611  24905.041876  22.379689  \\n\",\n       \"20           2.879611  24905.041876  22.379689  \\n\",\n       \"21           2.879611  24905.041876  22.379689  \\n\",\n       \"22           2.879611  24905.041876  22.379689  \\n\",\n       \"23           2.879611  24905.041876  22.379689  \\n\",\n       \"24           2.879611  24905.041876  22.379689  \\n\",\n       \"25           2.879611  24905.041876  22.379689  \\n\",\n       \"26           2.879611  24905.041876  22.379689  \\n\",\n       \"27           2.879611  24905.041876  22.379689  \\n\",\n       \"28           2.879611  24905.041876  22.379689  \\n\",\n       \"\\n\",\n       \"[29 rows x 42 columns]\"\n      ]\n     },\n     \"execution_count\": 61,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"resuld_df\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.8.5\"\n  },\n  \"pycharm\": {\n   \"stem_cell\": {\n    \"cell_type\": \"raw\",\n    \"metadata\": {\n     \"collapsed\": false\n    },\n    \"source\": []\n   }\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 4\n}\n",
    "url": "https://github.com/datarobot-community/examples-for-data-scientists/blob/master/Advanced%20Tuning%20and%20Partitioning/Python/DataRobot_Optimizer/Optimizing%20Through%20API.ipynb",
    "size": 74676,
    "description": "Jupyter notebook: Optimizing Through API",
    "tags": [
      "datarobot",
      "api"
    ]
  },
  {
    "repo_name": "examples-for-data-scientists",
    "file_path": "Advanced Tuning and Partitioning/Python/Datetime Partitioning.ipynb",
    "file_name": "Datetime Partitioning.ipynb",
    "file_type": "notebook",
    "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Datetime Partitioning\\n\",\n    \"\\n\",\n    \"**Author**: Thodoris Petropoulos\\n\",\n    \"\\n\",\n    \"**Label**: Modeling Options\\n\",\n    \"\\n\",\n    \"### Scope\\n\",\n    \"\\n\",\n    \"The scope of this notebook is to provide instructions on how to do datetime partitioning using the Python API.\\n\",\n    \"\\n\",\n    \"### Background\\n\",\n    \"\\n\",\n    \"When dividing your data for model training and validation, DataRobot will randomly choose a set of rows from your dataset to assign amongst different cross validation folds. This will verify that you have not overfit your model to the training set and that the model can perform well on new data. However when your data has an intrinsic time based component, then you have to be even more careful about target leakage.  DataRobot now posseses datetime partitioning which will be diligent within model training & validation to guard against this, but you should always use your domain exerptise to evaluate your features prior to modeling.\\n\",\n    \"\\n\",\n    \"Let’s look at how we would frame a problem with a time component within DataRobot. This project basically simulated what you would get if you tried \\\"Out of Time Validation\\\" within DataRobot interface which is **not the same as Time Series projects**, even though the way we define backtests is very similar.\\n\",\n    \"\\n\",\n    \"### Requirements\\n\",\n    \"\\n\",\n    \"- Python version 3.7.3\\n\",\n    \"-  DataRobot API version 2.20.0. \\n\",\n    \"Small adjustments might be needed depending on the Python version and DataRobot API version you are using.\\n\",\n    \"\\n\",\n    \"Full documentation of the Python package can be found here: https://datarobot-public-api-client.readthedocs-hosted.com\\n\",\n    \"\\n\",\n    \"It is assumed you already have a DataRobot <code>Project</code> object and a DataRobot <code>Model </code> object.\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Import Libraries\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import datarobot as dr\\n\",\n    \"from datetime import datetime\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Running a DataRobot Project with a datetime partition\\n\",\n    \"The durations need to be specified in string using the format of the <code>dr.helpers.partitioning_methods.construct_duration_string()</code> method.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"spec = dr.DatetimePartitioningSpecification(datetime_partition_column = 'Date',\\n\",\n    \"                                            holdout_start_date=datetime(2017,1,2),\\n\",\n    \"                                            holdout_duration='P1Y0M0DT0H0M0S',\\n\",\n    \"                                            number_of_backtests = 2,\\n\",\n    \"                                            use_time_series = False)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"We took advantage of DataRobot’s automated partition date selection after we specified the number of backtests to use. DataRobot allows further control, where we can further specify the validation start date as well as duration. Let’s look at an example below.\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Create Backtest Specifications\\n\",\n    \"The below method would work for both Time Series and Out of Time Validation projects. Currently, we have specified that <code>use_time_series = False</code> in the <code>dr.DatetimePartitioningSpecification()</code> method so this would be initiated as an OTV project.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# Dates are not project specific but rather example dates\\n\",\n    \"spec.backtests=[dr.BacktestSpecification(0,gap_duration = 'P0Y0M0DT0H0M0S',\\n\",\n    \"                                         validation_start_date = datetime(2016,1,2), \\n\",\n    \"                                         validation_duration = 'P1Y0M0DT0H0M0S'),\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"                dr.BacktestSpecification(1,gap_duration = 'P0Y0M0DT0H0M0S',\\n\",\n    \"                                         validation_start_date = datetime(2015,1,2), \\n\",\n    \"                                         validation_duration = 'P1Y0M0DT0H0M0S')]\\n\",\n    \"\\n\",\n    \"#To start the project\\n\",\n    \"project = dr.Project.create(sourcedata = df, project_name = 'Project Name')\\n\",\n    \"project.set_target('target_column',partitioning_method = spec)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"The above methods will change the backtest specification for the first and second backtests.\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.7.3\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n",
    "url": "https://github.com/datarobot-community/examples-for-data-scientists/blob/master/Advanced%20Tuning%20and%20Partitioning/Python/Datetime%20Partitioning.ipynb",
    "size": 5329,
    "description": "Jupyter notebook: Datetime Partitioning",
    "tags": []
  }
]