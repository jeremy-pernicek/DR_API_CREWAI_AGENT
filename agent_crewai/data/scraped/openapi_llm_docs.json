{
  "api_info": {
    "title": "OpenAI API",
    "version": "2.3.0",
    "description": "The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.",
    "base_url": "https://api.openai.com/v1"
  },
  "endpoints_by_category": {
    "Assistants": [
      {
        "path": "/assistants",
        "method": "GET",
        "operation_id": "listAssistants",
        "summary": "List assistants",
        "description": "Returns a list of assistants.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n",
            "example": null,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n",
            "example": null,
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/ListAssistantsResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Assistants"
        ],
        "examples": []
      },
      {
        "path": "/assistants",
        "method": "POST",
        "operation_id": "createAssistant",
        "summary": "Create assistant",
        "description": "Create an assistant with a model and instructions.",
        "parameters": [],
        "request_body": {
          "description": "",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/CreateAssistantRequest"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/AssistantObject"
            },
            "examples": {}
          }
        },
        "tags": [
          "Assistants"
        ],
        "examples": []
      },
      {
        "path": "/assistants/{assistant_id}",
        "method": "GET",
        "operation_id": "getAssistant",
        "summary": "Retrieve assistant",
        "description": "Retrieves an assistant.",
        "parameters": [
          {
            "name": "assistant_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the assistant to retrieve.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/AssistantObject"
            },
            "examples": {}
          }
        },
        "tags": [
          "Assistants"
        ],
        "examples": []
      },
      {
        "path": "/assistants/{assistant_id}",
        "method": "POST",
        "operation_id": "modifyAssistant",
        "summary": "Modify assistant",
        "description": "Modifies an assistant.",
        "parameters": [
          {
            "name": "assistant_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the assistant to modify.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": {
          "description": "",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ModifyAssistantRequest"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/AssistantObject"
            },
            "examples": {}
          }
        },
        "tags": [
          "Assistants"
        ],
        "examples": []
      },
      {
        "path": "/assistants/{assistant_id}",
        "method": "DELETE",
        "operation_id": "deleteAssistant",
        "summary": "Delete assistant",
        "description": "Delete an assistant.",
        "parameters": [
          {
            "name": "assistant_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the assistant to delete.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/DeleteAssistantResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Assistants"
        ],
        "examples": []
      },
      {
        "path": "/threads",
        "method": "POST",
        "operation_id": "createThread",
        "summary": "Create thread",
        "description": "Create a thread.",
        "parameters": [],
        "request_body": {
          "description": "",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/CreateThreadRequest"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/ThreadObject"
            },
            "examples": {}
          }
        },
        "tags": [
          "Assistants"
        ],
        "examples": []
      },
      {
        "path": "/threads/runs",
        "method": "POST",
        "operation_id": "createThreadAndRun",
        "summary": "Create thread and run",
        "description": "Create a thread and run it in one request.",
        "parameters": [],
        "request_body": {
          "description": "",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/CreateThreadAndRunRequest"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/RunObject"
            },
            "examples": {}
          }
        },
        "tags": [
          "Assistants"
        ],
        "examples": []
      },
      {
        "path": "/threads/{thread_id}",
        "method": "GET",
        "operation_id": "getThread",
        "summary": "Retrieve thread",
        "description": "Retrieves a thread.",
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the thread to retrieve.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/ThreadObject"
            },
            "examples": {}
          }
        },
        "tags": [
          "Assistants"
        ],
        "examples": []
      },
      {
        "path": "/threads/{thread_id}",
        "method": "POST",
        "operation_id": "modifyThread",
        "summary": "Modify thread",
        "description": "Modifies a thread.",
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the thread to modify. Only the `metadata` can be modified.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": {
          "description": "",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ModifyThreadRequest"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/ThreadObject"
            },
            "examples": {}
          }
        },
        "tags": [
          "Assistants"
        ],
        "examples": []
      },
      {
        "path": "/threads/{thread_id}",
        "method": "DELETE",
        "operation_id": "deleteThread",
        "summary": "Delete thread",
        "description": "Delete a thread.",
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the thread to delete.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/DeleteThreadResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Assistants"
        ],
        "examples": []
      },
      {
        "path": "/threads/{thread_id}/messages",
        "method": "GET",
        "operation_id": "listMessages",
        "summary": "List messages",
        "description": "Returns a list of messages for a given thread.",
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the [thread](https://platform.openai.com/docs/api-reference/threads) the messages belong to.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n",
            "example": null,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n",
            "example": null,
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "run_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter messages by the run ID that generated them.\n",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/ListMessagesResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Assistants"
        ],
        "examples": []
      },
      {
        "path": "/threads/{thread_id}/messages",
        "method": "POST",
        "operation_id": "createMessage",
        "summary": "Create message",
        "description": "Create a message.",
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the [thread](https://platform.openai.com/docs/api-reference/threads) to create a message for.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": {
          "description": "",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/CreateMessageRequest"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/MessageObject"
            },
            "examples": {}
          }
        },
        "tags": [
          "Assistants"
        ],
        "examples": []
      },
      {
        "path": "/threads/{thread_id}/messages/{message_id}",
        "method": "GET",
        "operation_id": "getMessage",
        "summary": "Retrieve message",
        "description": "Retrieve a message.",
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the [thread](https://platform.openai.com/docs/api-reference/threads) to which this message belongs.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "message_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the message to retrieve.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/MessageObject"
            },
            "examples": {}
          }
        },
        "tags": [
          "Assistants"
        ],
        "examples": []
      },
      {
        "path": "/threads/{thread_id}/messages/{message_id}",
        "method": "POST",
        "operation_id": "modifyMessage",
        "summary": "Modify message",
        "description": "Modifies a message.",
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the thread to which this message belongs.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "message_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the message to modify.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": {
          "description": "",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ModifyMessageRequest"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/MessageObject"
            },
            "examples": {}
          }
        },
        "tags": [
          "Assistants"
        ],
        "examples": []
      },
      {
        "path": "/threads/{thread_id}/messages/{message_id}",
        "method": "DELETE",
        "operation_id": "deleteMessage",
        "summary": "Delete message",
        "description": "Deletes a message.",
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the thread to which this message belongs.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "message_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the message to delete.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/DeleteMessageResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Assistants"
        ],
        "examples": []
      },
      {
        "path": "/threads/{thread_id}/runs",
        "method": "GET",
        "operation_id": "listRuns",
        "summary": "List runs",
        "description": "Returns a list of runs belonging to a thread.",
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the thread the run belongs to.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n",
            "example": null,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n",
            "example": null,
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/ListRunsResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Assistants"
        ],
        "examples": []
      },
      {
        "path": "/threads/{thread_id}/runs",
        "method": "POST",
        "operation_id": "createRun",
        "summary": "Create run",
        "description": "Create a run.",
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the thread to run.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include[]",
            "in": "query",
            "required": false,
            "type": "array[string]",
            "description": "A list of additional fields to include in the response. Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content.\n\nSee the [file search tool documentation](https://platform.openai.com/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "step_details.tool_calls[*].file_search.results[*].content"
                ]
              }
            }
          }
        ],
        "request_body": {
          "description": "",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/CreateRunRequest"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/RunObject"
            },
            "examples": {}
          }
        },
        "tags": [
          "Assistants"
        ],
        "examples": []
      },
      {
        "path": "/threads/{thread_id}/runs/{run_id}",
        "method": "GET",
        "operation_id": "getRun",
        "summary": "Retrieve run",
        "description": "Retrieves a run.",
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the [thread](https://platform.openai.com/docs/api-reference/threads) that was run.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the run to retrieve.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/RunObject"
            },
            "examples": {}
          }
        },
        "tags": [
          "Assistants"
        ],
        "examples": []
      },
      {
        "path": "/threads/{thread_id}/runs/{run_id}",
        "method": "POST",
        "operation_id": "modifyRun",
        "summary": "Modify run",
        "description": "Modifies a run.",
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the [thread](https://platform.openai.com/docs/api-reference/threads) that was run.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the run to modify.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": {
          "description": "",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ModifyRunRequest"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/RunObject"
            },
            "examples": {}
          }
        },
        "tags": [
          "Assistants"
        ],
        "examples": []
      },
      {
        "path": "/threads/{thread_id}/runs/{run_id}/cancel",
        "method": "POST",
        "operation_id": "cancelRun",
        "summary": "Cancel a run",
        "description": "Cancels a run that is `in_progress`.",
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the thread to which this run belongs.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the run to cancel.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/RunObject"
            },
            "examples": {}
          }
        },
        "tags": [
          "Assistants"
        ],
        "examples": []
      },
      {
        "path": "/threads/{thread_id}/runs/{run_id}/steps",
        "method": "GET",
        "operation_id": "listRunSteps",
        "summary": "List run steps",
        "description": "Returns a list of run steps belonging to a run.",
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the thread the run and run steps belong to.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the run the run steps belong to.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n",
            "example": null,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n",
            "example": null,
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include[]",
            "in": "query",
            "required": false,
            "type": "array[string]",
            "description": "A list of additional fields to include in the response. Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content.\n\nSee the [file search tool documentation](https://platform.openai.com/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "step_details.tool_calls[*].file_search.results[*].content"
                ]
              }
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/ListRunStepsResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Assistants"
        ],
        "examples": []
      },
      {
        "path": "/threads/{thread_id}/runs/{run_id}/steps/{step_id}",
        "method": "GET",
        "operation_id": "getRunStep",
        "summary": "Retrieve run step",
        "description": "Retrieves a run step.",
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the thread to which the run and run step belongs.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the run to which the run step belongs.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "step_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the run step to retrieve.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include[]",
            "in": "query",
            "required": false,
            "type": "array[string]",
            "description": "A list of additional fields to include in the response. Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content.\n\nSee the [file search tool documentation](https://platform.openai.com/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "step_details.tool_calls[*].file_search.results[*].content"
                ]
              }
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/RunStepObject"
            },
            "examples": {}
          }
        },
        "tags": [
          "Assistants"
        ],
        "examples": []
      },
      {
        "path": "/threads/{thread_id}/runs/{run_id}/submit_tool_outputs",
        "method": "POST",
        "operation_id": "submitToolOuputsToRun",
        "summary": "Submit tool outputs to run",
        "description": "When a run has the `status: \"requires_action\"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request.\n",
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the [thread](https://platform.openai.com/docs/api-reference/threads) to which this run belongs.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the run that requires the tool output submission.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": {
          "description": "",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SubmitToolOutputsRunRequest"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/RunObject"
            },
            "examples": {}
          }
        },
        "tags": [
          "Assistants"
        ],
        "examples": []
      }
    ],
    "Audio": [
      {
        "path": "/audio/speech",
        "method": "POST",
        "operation_id": "createSpeech",
        "summary": "Create speech",
        "description": "Generates audio from the input text.",
        "parameters": [],
        "request_body": {
          "description": "",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/CreateSpeechRequest"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {},
            "examples": {}
          }
        },
        "tags": [
          "Audio"
        ],
        "examples": []
      },
      {
        "path": "/audio/transcriptions",
        "method": "POST",
        "operation_id": "createTranscription",
        "summary": "Create transcription",
        "description": "Transcribes audio into the input language.",
        "parameters": [],
        "request_body": {
          "description": "",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/CreateTranscriptionRequest"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/CreateTranscriptionResponseJson"
                },
                {
                  "$ref": "#/components/schemas/CreateTranscriptionResponseVerboseJson",
                  "x-stainless-skip": [
                    "go"
                  ]
                }
              ]
            },
            "examples": {}
          }
        },
        "tags": [
          "Audio"
        ],
        "examples": []
      },
      {
        "path": "/audio/translations",
        "method": "POST",
        "operation_id": "createTranslation",
        "summary": "Create translation",
        "description": "Translates audio into English.",
        "parameters": [],
        "request_body": {
          "description": "",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/CreateTranslationRequest"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/CreateTranslationResponseJson"
                },
                {
                  "$ref": "#/components/schemas/CreateTranslationResponseVerboseJson",
                  "x-stainless-skip": [
                    "go"
                  ]
                }
              ]
            },
            "examples": {}
          }
        },
        "tags": [
          "Audio"
        ],
        "examples": []
      }
    ],
    "Batch": [
      {
        "path": "/batches",
        "method": "POST",
        "operation_id": "createBatch",
        "summary": "Create batch",
        "description": "Creates and executes a batch from an uploaded file of requests",
        "parameters": [],
        "request_body": {
          "description": "",
          "required": true,
          "schema": {
            "type": "object",
            "required": [
              "input_file_id",
              "endpoint",
              "completion_window"
            ],
            "properties": {
              "input_file_id": {
                "type": "string",
                "description": "The ID of an uploaded file that contains requests for the new batch.\n\nSee [upload file](https://platform.openai.com/docs/api-reference/files/create) for how to upload a file.\n\nYour input file must be formatted as a [JSONL file](https://platform.openai.com/docs/api-reference/batch/request-input), and must be uploaded with the purpose `batch`. The file can contain up to 50,000 requests, and can be up to 200 MB in size.\n"
              },
              "endpoint": {
                "type": "string",
                "enum": [
                  "/v1/responses",
                  "/v1/chat/completions",
                  "/v1/embeddings",
                  "/v1/completions"
                ],
                "description": "The endpoint to be used for all requests in the batch. Currently `/v1/responses`, `/v1/chat/completions`, `/v1/embeddings`, and `/v1/completions` are supported. Note that `/v1/embeddings` batches are also restricted to a maximum of 50,000 embedding inputs across all requests in the batch."
              },
              "completion_window": {
                "type": "string",
                "enum": [
                  "24h"
                ],
                "description": "The time frame within which the batch should be processed. Currently only `24h` is supported."
              },
              "metadata": {
                "$ref": "#/components/schemas/Metadata"
              },
              "output_expires_after": {
                "$ref": "#/components/schemas/BatchFileExpirationAfter"
              }
            }
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "Batch created successfully.",
            "schema": {
              "$ref": "#/components/schemas/Batch"
            },
            "examples": {}
          }
        },
        "tags": [
          "Batch"
        ],
        "examples": []
      },
      {
        "path": "/batches",
        "method": "GET",
        "operation_id": "listBatches",
        "summary": "List batch",
        "description": "List your organization's batches.",
        "parameters": [
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n",
            "example": null,
            "schema": {
              "type": "integer",
              "default": 20
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "Batch listed successfully.",
            "schema": {
              "$ref": "#/components/schemas/ListBatchesResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Batch"
        ],
        "examples": []
      },
      {
        "path": "/batches/{batch_id}",
        "method": "GET",
        "operation_id": "retrieveBatch",
        "summary": "Retrieve batch",
        "description": "Retrieves a batch.",
        "parameters": [
          {
            "name": "batch_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the batch to retrieve.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "Batch retrieved successfully.",
            "schema": {
              "$ref": "#/components/schemas/Batch"
            },
            "examples": {}
          }
        },
        "tags": [
          "Batch"
        ],
        "examples": []
      },
      {
        "path": "/batches/{batch_id}/cancel",
        "method": "POST",
        "operation_id": "cancelBatch",
        "summary": "Cancel batch",
        "description": "Cancels an in-progress batch. The batch will be in status `cancelling` for up to 10 minutes, before changing to `cancelled`, where it will have partial results (if any) available in the output file.",
        "parameters": [
          {
            "name": "batch_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the batch to cancel.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "Batch is cancelling. Returns the cancelling batch's details.",
            "schema": {
              "$ref": "#/components/schemas/Batch"
            },
            "examples": {}
          }
        },
        "tags": [
          "Batch"
        ],
        "examples": []
      }
    ],
    "Chat": [
      {
        "path": "/chat/completions",
        "method": "GET",
        "operation_id": "listChatCompletions",
        "summary": "List Chat Completions",
        "description": "List stored Chat Completions. Only Chat Completions that have been stored\nwith the `store` parameter set to `true` will be returned.\n",
        "parameters": [
          {
            "name": "model",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The model used to generate the Chat Completions.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "metadata",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A list of metadata keys to filter the Chat Completions by. Example:\n\n`metadata[key1]=value1&metadata[key2]=value2`\n",
            "example": null,
            "schema": {
              "$ref": "#/components/schemas/Metadata"
            }
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Identifier for the last chat completion from the previous pagination request.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Number of Chat Completions to retrieve.",
            "example": null,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Sort order for Chat Completions by timestamp. Use `asc` for ascending order or `desc` for descending order. Defaults to `asc`.",
            "example": null,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "A list of Chat Completions",
            "schema": {
              "$ref": "#/components/schemas/ChatCompletionList"
            },
            "examples": {}
          }
        },
        "tags": [
          "Chat"
        ],
        "examples": []
      },
      {
        "path": "/chat/completions",
        "method": "POST",
        "operation_id": "createChatCompletion",
        "summary": "Create chat completion",
        "description": "**Starting a new project?** We recommend trying [Responses](https://platform.openai.com/docs/api-reference/responses) \nto take advantage of the latest OpenAI platform features. Compare\n[Chat Completions with Responses](https://platform.openai.com/docs/guides/responses-vs-chat-completions?api-mode=responses).\n\n---\n\nCreates a model response for the given chat conversation. Learn more in the\n[text generation](https://platform.openai.com/docs/guides/text-generation), [vision](https://platform.openai.com/docs/guides/vision),\nand [audio](https://platform.openai.com/docs/guides/audio) guides.\n\nParameter support can differ depending on the model used to generate the\nresponse, particularly for newer reasoning models. Parameters that are only\nsupported for reasoning models are noted below. For the current state of \nunsupported parameters in reasoning models, \n[refer to the reasoning guide](https://platform.openai.com/docs/guides/reasoning).\n",
        "parameters": [],
        "request_body": {
          "description": "",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/CreateChatCompletionRequest"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/CreateChatCompletionResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Chat"
        ],
        "examples": []
      },
      {
        "path": "/chat/completions/{completion_id}",
        "method": "GET",
        "operation_id": "getChatCompletion",
        "summary": "Get chat completion",
        "description": "Get a stored chat completion. Only Chat Completions that have been created\nwith the `store` parameter set to `true` will be returned.\n",
        "parameters": [
          {
            "name": "completion_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the chat completion to retrieve.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "A chat completion",
            "schema": {
              "$ref": "#/components/schemas/CreateChatCompletionResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Chat"
        ],
        "examples": []
      },
      {
        "path": "/chat/completions/{completion_id}",
        "method": "POST",
        "operation_id": "updateChatCompletion",
        "summary": "Update chat completion",
        "description": "Modify a stored chat completion. Only Chat Completions that have been\ncreated with the `store` parameter set to `true` can be modified. Currently,\nthe only supported modification is to update the `metadata` field.\n",
        "parameters": [
          {
            "name": "completion_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the chat completion to update.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": {
          "description": "",
          "required": true,
          "schema": {
            "type": "object",
            "required": [
              "metadata"
            ],
            "properties": {
              "metadata": {
                "$ref": "#/components/schemas/Metadata"
              }
            }
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "A chat completion",
            "schema": {
              "$ref": "#/components/schemas/CreateChatCompletionResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Chat"
        ],
        "examples": []
      },
      {
        "path": "/chat/completions/{completion_id}",
        "method": "DELETE",
        "operation_id": "deleteChatCompletion",
        "summary": "Delete chat completion",
        "description": "Delete a stored chat completion. Only Chat Completions that have been\ncreated with the `store` parameter set to `true` can be deleted.\n",
        "parameters": [
          {
            "name": "completion_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the chat completion to delete.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "The chat completion was deleted successfully.",
            "schema": {
              "$ref": "#/components/schemas/ChatCompletionDeleted"
            },
            "examples": {}
          }
        },
        "tags": [
          "Chat"
        ],
        "examples": []
      },
      {
        "path": "/chat/completions/{completion_id}/messages",
        "method": "GET",
        "operation_id": "getChatCompletionMessages",
        "summary": "Get chat messages",
        "description": "Get the messages in a stored chat completion. Only Chat Completions that\nhave been created with the `store` parameter set to `true` will be\nreturned.\n",
        "parameters": [
          {
            "name": "completion_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the chat completion to retrieve messages from.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Identifier for the last message from the previous pagination request.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Number of messages to retrieve.",
            "example": null,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Sort order for messages by timestamp. Use `asc` for ascending order or `desc` for descending order. Defaults to `asc`.",
            "example": null,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "A list of messages",
            "schema": {
              "$ref": "#/components/schemas/ChatCompletionMessageList"
            },
            "examples": {}
          }
        },
        "tags": [
          "Chat"
        ],
        "examples": []
      }
    ],
    "Completions": [
      {
        "path": "/completions",
        "method": "POST",
        "operation_id": "createCompletion",
        "summary": "Create completion",
        "description": "Creates a completion for the provided prompt and parameters.",
        "parameters": [],
        "request_body": {
          "description": "",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/CreateCompletionRequest"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/CreateCompletionResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Completions"
        ],
        "examples": []
      }
    ],
    "untagged": [
      {
        "path": "/containers",
        "method": "GET",
        "operation_id": "ListContainers",
        "summary": "List containers",
        "description": "List Containers",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n",
            "example": null,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n",
            "example": null,
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/components/schemas/ContainerListResource"
            },
            "examples": {}
          }
        },
        "tags": [],
        "examples": []
      },
      {
        "path": "/containers",
        "method": "POST",
        "operation_id": "CreateContainer",
        "summary": "Create container",
        "description": "Create Container",
        "parameters": [],
        "request_body": {
          "description": "",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/CreateContainerBody"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/components/schemas/ContainerResource"
            },
            "examples": {}
          }
        },
        "tags": [],
        "examples": []
      },
      {
        "path": "/containers/{container_id}",
        "method": "GET",
        "operation_id": "RetrieveContainer",
        "summary": "Retrieve container",
        "description": "Retrieve Container",
        "parameters": [
          {
            "name": "container_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/components/schemas/ContainerResource"
            },
            "examples": {}
          }
        },
        "tags": [],
        "examples": []
      },
      {
        "path": "/containers/{container_id}",
        "method": "DELETE",
        "operation_id": "DeleteContainer",
        "summary": "Delete a container",
        "description": "Delete Container",
        "parameters": [
          {
            "name": "container_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the container to delete.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {},
            "examples": {}
          }
        },
        "tags": [],
        "examples": []
      },
      {
        "path": "/containers/{container_id}/files",
        "method": "POST",
        "operation_id": "CreateContainerFile",
        "summary": "Create container file",
        "description": "Create a Container File\n\nYou can send either a multipart/form-data request with the raw file content, or a JSON request with a file ID.\n",
        "parameters": [
          {
            "name": "container_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": {
          "description": "",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/CreateContainerFileBody"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/components/schemas/ContainerFileResource"
            },
            "examples": {}
          }
        },
        "tags": [],
        "examples": []
      },
      {
        "path": "/containers/{container_id}/files",
        "method": "GET",
        "operation_id": "ListContainerFiles",
        "summary": "List container files",
        "description": "List Container files",
        "parameters": [
          {
            "name": "container_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n",
            "example": null,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n",
            "example": null,
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/components/schemas/ContainerFileListResource"
            },
            "examples": {}
          }
        },
        "tags": [],
        "examples": []
      },
      {
        "path": "/containers/{container_id}/files/{file_id}",
        "method": "GET",
        "operation_id": "RetrieveContainerFile",
        "summary": "Retrieve container file",
        "description": "Retrieve Container File",
        "parameters": [
          {
            "name": "container_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/components/schemas/ContainerFileResource"
            },
            "examples": {}
          }
        },
        "tags": [],
        "examples": []
      },
      {
        "path": "/containers/{container_id}/files/{file_id}",
        "method": "DELETE",
        "operation_id": "DeleteContainerFile",
        "summary": "Delete a container file",
        "description": "Delete Container File",
        "parameters": [
          {
            "name": "container_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {},
            "examples": {}
          }
        },
        "tags": [],
        "examples": []
      },
      {
        "path": "/containers/{container_id}/files/{file_id}/content",
        "method": "GET",
        "operation_id": "RetrieveContainerFileContent",
        "summary": "Retrieve container file content",
        "description": "Retrieve Container File Content",
        "parameters": [
          {
            "name": "container_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "Success",
            "schema": {},
            "examples": {}
          }
        },
        "tags": [],
        "examples": []
      },
      {
        "path": "/organization/admin_api_keys",
        "method": "GET",
        "operation_id": "admin-api-keys-list",
        "summary": "List all organization and project API keys.",
        "description": "List organization API keys",
        "parameters": [
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "",
            "example": null,
            "schema": {
              "type": "string",
              "nullable": true,
              "description": "Return keys with IDs that come after this ID in the pagination order."
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "",
            "example": null,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc",
              "description": "Order results by creation time, ascending or descending."
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "",
            "example": null,
            "schema": {
              "type": "integer",
              "default": 20,
              "description": "Maximum number of keys to return."
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "A list of organization API keys.",
            "schema": {
              "$ref": "#/components/schemas/ApiKeyList"
            },
            "examples": {}
          }
        },
        "tags": [],
        "examples": []
      },
      {
        "path": "/organization/admin_api_keys",
        "method": "POST",
        "operation_id": "admin-api-keys-create",
        "summary": "Create admin API key",
        "description": "Create an organization admin API key",
        "parameters": [],
        "request_body": {
          "description": "",
          "required": true,
          "schema": {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "type": "string",
                "example": "New Admin Key"
              }
            }
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "The newly created admin API key.",
            "schema": {
              "$ref": "#/components/schemas/AdminApiKey"
            },
            "examples": {}
          }
        },
        "tags": [],
        "examples": []
      },
      {
        "path": "/organization/admin_api_keys/{key_id}",
        "method": "GET",
        "operation_id": "admin-api-keys-get",
        "summary": "Retrieve admin API key",
        "description": "Retrieve a single organization API key",
        "parameters": [
          {
            "name": "key_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "",
            "example": null,
            "schema": {
              "type": "string",
              "description": "The ID of the API key."
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "Details of the requested API key.",
            "schema": {
              "$ref": "#/components/schemas/AdminApiKey"
            },
            "examples": {}
          }
        },
        "tags": [],
        "examples": []
      },
      {
        "path": "/organization/admin_api_keys/{key_id}",
        "method": "DELETE",
        "operation_id": "admin-api-keys-delete",
        "summary": "Delete admin API key",
        "description": "Delete an organization admin API key",
        "parameters": [
          {
            "name": "key_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "",
            "example": null,
            "schema": {
              "type": "string",
              "description": "The ID of the API key to be deleted."
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "Confirmation that the API key was deleted.",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "key_abc"
                },
                "object": {
                  "type": "string",
                  "example": "organization.admin_api_key.deleted"
                },
                "deleted": {
                  "type": "boolean",
                  "example": true
                }
              }
            },
            "examples": {}
          }
        },
        "tags": [],
        "examples": []
      }
    ],
    "Conversations": [
      {
        "path": "/conversations",
        "method": "POST",
        "operation_id": "createConversation",
        "summary": "Create a conversation",
        "description": "Create a conversation with the given ID.",
        "parameters": [],
        "request_body": {
          "description": "",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/CreateConversationRequest"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/ConversationResource"
            },
            "examples": {}
          }
        },
        "tags": [
          "Conversations"
        ],
        "examples": []
      },
      {
        "path": "/conversations/{conversation_id}",
        "method": "GET",
        "operation_id": "getConversation",
        "summary": "Retrieve a conversation",
        "description": "Get a conversation with the given ID.",
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the conversation to retrieve.",
            "example": null,
            "schema": {
              "type": "string",
              "example": "conv_123"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/ConversationResource"
            },
            "examples": {}
          }
        },
        "tags": [
          "Conversations"
        ],
        "examples": []
      },
      {
        "path": "/conversations/{conversation_id}",
        "method": "POST",
        "operation_id": "updateConversation",
        "summary": "Update a conversation",
        "description": "Update a conversation's metadata with the given ID.",
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the conversation to update.",
            "example": null,
            "schema": {
              "type": "string",
              "example": "conv_123"
            }
          }
        ],
        "request_body": {
          "description": "",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/UpdateConversationBody"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/ConversationResource"
            },
            "examples": {}
          }
        },
        "tags": [
          "Conversations"
        ],
        "examples": []
      },
      {
        "path": "/conversations/{conversation_id}",
        "method": "DELETE",
        "operation_id": "deleteConversation",
        "summary": "Delete a conversation",
        "description": "Delete a conversation with the given ID.",
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the conversation to delete.",
            "example": null,
            "schema": {
              "type": "string",
              "example": "conv_123"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/DeletedConversationResource"
            },
            "examples": {}
          }
        },
        "tags": [
          "Conversations"
        ],
        "examples": []
      },
      {
        "path": "/conversations/{conversation_id}/items",
        "method": "POST",
        "operation_id": "createConversationItems",
        "summary": "Create items",
        "description": "Create items in a conversation with the given ID.",
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the conversation to add the item to.",
            "example": null,
            "schema": {
              "type": "string",
              "example": "conv_123"
            }
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "type": "array[any]",
            "description": "Additional fields to include in the response. See the `include`\nparameter for [listing Conversation items above](https://platform.openai.com/docs/api-reference/conversations/list-items#conversations_list_items-include) for more information.\n",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Includable"
              }
            }
          }
        ],
        "request_body": {
          "description": "",
          "required": true,
          "schema": {
            "properties": {
              "items": {
                "type": "array",
                "description": "The items to add to the conversation. You may add up to 20 items at a time.\n",
                "items": {
                  "$ref": "#/components/schemas/InputItem"
                },
                "maxItems": 20
              }
            },
            "required": [
              "items"
            ]
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/ConversationItemList"
            },
            "examples": {}
          }
        },
        "tags": [
          "Conversations"
        ],
        "examples": []
      },
      {
        "path": "/conversations/{conversation_id}/items",
        "method": "GET",
        "operation_id": "listConversationItems",
        "summary": "List items",
        "description": "List all items for a conversation with the given ID.",
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the conversation to list items for.",
            "example": null,
            "schema": {
              "type": "string",
              "example": "conv_123"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "A limit on the number of objects to be returned. Limit can range between\n1 and 100, and the default is 20.\n",
            "example": null,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The order to return the input items in. Default is `desc`.\n- `asc`: Return the input items in ascending order.\n- `desc`: Return the input items in descending order.\n",
            "example": null,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "An item ID to list items after, used in pagination.\n",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "type": "array[any]",
            "description": "Specify additional output data to include in the model response. Currently\nsupported values are:\n- `code_interpreter_call.outputs`: Includes the outputs of python code execution\n  in code interpreter tool call items.\n- `computer_call_output.output.image_url`: Include image urls from the computer call output.\n- `file_search_call.results`: Include the search results of\n  the file search tool call.\n- `message.input_image.image_url`: Include image urls from the input message.\n- `message.output_text.logprobs`: Include logprobs with assistant messages.\n- `reasoning.encrypted_content`: Includes an encrypted version of reasoning\n  tokens in reasoning item outputs. This enables reasoning items to be used in\n  multi-turn conversations when using the Responses API statelessly (like\n  when the `store` parameter is set to `false`, or when an organization is\n  enrolled in the zero data retention program).\n",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Includable"
              }
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/ConversationItemList"
            },
            "examples": {}
          }
        },
        "tags": [
          "Conversations"
        ],
        "examples": []
      },
      {
        "path": "/conversations/{conversation_id}/items/{item_id}",
        "method": "GET",
        "operation_id": "getConversationItem",
        "summary": "Retrieve an item",
        "description": "Get a single item from a conversation with the given IDs.",
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the conversation that contains the item.",
            "example": null,
            "schema": {
              "type": "string",
              "example": "conv_123"
            }
          },
          {
            "name": "item_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the item to retrieve.",
            "example": null,
            "schema": {
              "type": "string",
              "example": "msg_abc"
            }
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "type": "array[any]",
            "description": "Additional fields to include in the response. See the `include`\nparameter for [listing Conversation items above](https://platform.openai.com/docs/api-reference/conversations/list-items#conversations_list_items-include) for more information.\n",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Includable"
              }
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/ConversationItem"
            },
            "examples": {}
          }
        },
        "tags": [
          "Conversations"
        ],
        "examples": []
      },
      {
        "path": "/conversations/{conversation_id}/items/{item_id}",
        "method": "DELETE",
        "operation_id": "deleteConversationItem",
        "summary": "Delete an item",
        "description": "Delete an item from a conversation with the given IDs.",
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the conversation that contains the item.",
            "example": null,
            "schema": {
              "type": "string",
              "example": "conv_123"
            }
          },
          {
            "name": "item_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the item to delete.",
            "example": null,
            "schema": {
              "type": "string",
              "example": "msg_abc"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/ConversationResource"
            },
            "examples": {}
          }
        },
        "tags": [
          "Conversations"
        ],
        "examples": []
      }
    ],
    "Embeddings": [
      {
        "path": "/embeddings",
        "method": "POST",
        "operation_id": "createEmbedding",
        "summary": "Create embeddings",
        "description": "Creates an embedding vector representing the input text.",
        "parameters": [],
        "request_body": {
          "description": "",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/CreateEmbeddingRequest"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/CreateEmbeddingResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Embeddings"
        ],
        "examples": []
      }
    ],
    "Evals": [
      {
        "path": "/evals",
        "method": "GET",
        "operation_id": "listEvals",
        "summary": "List evals",
        "description": "List evaluations for a project.\n",
        "parameters": [
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Identifier for the last eval from the previous pagination request.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Number of evals to retrieve.",
            "example": null,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Sort order for evals by timestamp. Use `asc` for ascending order or `desc` for descending order.",
            "example": null,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Evals can be ordered by creation time or last updated time. Use\n`created_at` for creation time or `updated_at` for last updated time.\n",
            "example": null,
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "updated_at"
              ],
              "default": "created_at"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "A list of evals",
            "schema": {
              "$ref": "#/components/schemas/EvalList"
            },
            "examples": {}
          }
        },
        "tags": [
          "Evals"
        ],
        "examples": []
      },
      {
        "path": "/evals",
        "method": "POST",
        "operation_id": "createEval",
        "summary": "Create eval",
        "description": "Create the structure of an evaluation that can be used to test a model's performance.\nAn evaluation is a set of testing criteria and the config for a data source, which dictates the schema of the data used in the evaluation. After creating an evaluation, you can run it on different models and model parameters. We support several types of graders and datasources.\nFor more information, see the [Evals guide](https://platform.openai.com/docs/guides/evals).\n",
        "parameters": [],
        "request_body": {
          "description": "",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/CreateEvalRequest"
          },
          "examples": {}
        },
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/Eval"
            },
            "examples": {}
          }
        },
        "tags": [
          "Evals"
        ],
        "examples": []
      },
      {
        "path": "/evals/{eval_id}",
        "method": "GET",
        "operation_id": "getEval",
        "summary": "Get an eval",
        "description": "Get an evaluation by ID.\n",
        "parameters": [
          {
            "name": "eval_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the evaluation to retrieve.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "The evaluation",
            "schema": {
              "$ref": "#/components/schemas/Eval"
            },
            "examples": {}
          }
        },
        "tags": [
          "Evals"
        ],
        "examples": []
      },
      {
        "path": "/evals/{eval_id}",
        "method": "POST",
        "operation_id": "updateEval",
        "summary": "Update an eval",
        "description": "Update certain properties of an evaluation.\n",
        "parameters": [
          {
            "name": "eval_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the evaluation to update.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": {
          "description": "Request to update an evaluation",
          "required": true,
          "schema": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Rename the evaluation."
              },
              "metadata": {
                "$ref": "#/components/schemas/Metadata"
              }
            }
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "The updated evaluation",
            "schema": {
              "$ref": "#/components/schemas/Eval"
            },
            "examples": {}
          }
        },
        "tags": [
          "Evals"
        ],
        "examples": []
      },
      {
        "path": "/evals/{eval_id}",
        "method": "DELETE",
        "operation_id": "deleteEval",
        "summary": "Delete an eval",
        "description": "Delete an evaluation.\n",
        "parameters": [
          {
            "name": "eval_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the evaluation to delete.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "Successfully deleted the evaluation.",
            "schema": {
              "type": "object",
              "properties": {
                "object": {
                  "type": "string",
                  "example": "eval.deleted"
                },
                "deleted": {
                  "type": "boolean",
                  "example": true
                },
                "eval_id": {
                  "type": "string",
                  "example": "eval_abc123"
                }
              },
              "required": [
                "object",
                "deleted",
                "eval_id"
              ]
            },
            "examples": {}
          },
          "404": {
            "description": "Evaluation not found.",
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {}
          }
        },
        "tags": [
          "Evals"
        ],
        "examples": []
      },
      {
        "path": "/evals/{eval_id}/runs",
        "method": "GET",
        "operation_id": "getEvalRuns",
        "summary": "Get eval runs",
        "description": "Get a list of runs for an evaluation.\n",
        "parameters": [
          {
            "name": "eval_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the evaluation to retrieve runs for.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Identifier for the last run from the previous pagination request.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Number of runs to retrieve.",
            "example": null,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Sort order for runs by timestamp. Use `asc` for ascending order or `desc` for descending order. Defaults to `asc`.",
            "example": null,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter runs by status. One of `queued` | `in_progress` | `failed` | `completed` | `canceled`.",
            "example": null,
            "schema": {
              "type": "string",
              "enum": [
                "queued",
                "in_progress",
                "completed",
                "canceled",
                "failed"
              ]
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "A list of runs for the evaluation",
            "schema": {
              "$ref": "#/components/schemas/EvalRunList"
            },
            "examples": {}
          }
        },
        "tags": [
          "Evals"
        ],
        "examples": []
      },
      {
        "path": "/evals/{eval_id}/runs",
        "method": "POST",
        "operation_id": "createEvalRun",
        "summary": "Create eval run",
        "description": "Kicks off a new run for a given evaluation, specifying the data source, and what model configuration to use to test. The datasource will be validated against the schema specified in the config of the evaluation.\n",
        "parameters": [
          {
            "name": "eval_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the evaluation to create a run for.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": {
          "description": "",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/CreateEvalRunRequest"
          },
          "examples": {}
        },
        "responses": {
          "201": {
            "description": "Successfully created a run for the evaluation",
            "schema": {
              "$ref": "#/components/schemas/EvalRun"
            },
            "examples": {}
          },
          "400": {
            "description": "Bad request (for example, missing eval object)",
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {}
          }
        },
        "tags": [
          "Evals"
        ],
        "examples": []
      },
      {
        "path": "/evals/{eval_id}/runs/{run_id}",
        "method": "GET",
        "operation_id": "getEvalRun",
        "summary": "Get an eval run",
        "description": "Get an evaluation run by ID.\n",
        "parameters": [
          {
            "name": "eval_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the evaluation to retrieve runs for.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the run to retrieve.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "The evaluation run",
            "schema": {
              "$ref": "#/components/schemas/EvalRun"
            },
            "examples": {}
          }
        },
        "tags": [
          "Evals"
        ],
        "examples": []
      },
      {
        "path": "/evals/{eval_id}/runs/{run_id}",
        "method": "POST",
        "operation_id": "cancelEvalRun",
        "summary": "Cancel eval run",
        "description": "Cancel an ongoing evaluation run.\n",
        "parameters": [
          {
            "name": "eval_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the evaluation whose run you want to cancel.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the run to cancel.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "The canceled eval run object",
            "schema": {
              "$ref": "#/components/schemas/EvalRun"
            },
            "examples": {}
          }
        },
        "tags": [
          "Evals"
        ],
        "examples": []
      },
      {
        "path": "/evals/{eval_id}/runs/{run_id}",
        "method": "DELETE",
        "operation_id": "deleteEvalRun",
        "summary": "Delete eval run",
        "description": "Delete an eval run.\n",
        "parameters": [
          {
            "name": "eval_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the evaluation to delete the run from.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the run to delete.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "Successfully deleted the eval run",
            "schema": {
              "type": "object",
              "properties": {
                "object": {
                  "type": "string",
                  "example": "eval.run.deleted"
                },
                "deleted": {
                  "type": "boolean",
                  "example": true
                },
                "run_id": {
                  "type": "string",
                  "example": "evalrun_677469f564d48190807532a852da3afb"
                }
              }
            },
            "examples": {}
          },
          "404": {
            "description": "Run not found",
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {}
          }
        },
        "tags": [
          "Evals"
        ],
        "examples": []
      },
      {
        "path": "/evals/{eval_id}/runs/{run_id}/output_items",
        "method": "GET",
        "operation_id": "getEvalRunOutputItems",
        "summary": "Get eval run output items",
        "description": "Get a list of output items for an evaluation run.\n",
        "parameters": [
          {
            "name": "eval_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the evaluation to retrieve runs for.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the run to retrieve output items for.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Identifier for the last output item from the previous pagination request.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Number of output items to retrieve.",
            "example": null,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter output items by status. Use `failed` to filter by failed output\nitems or `pass` to filter by passed output items.\n",
            "example": null,
            "schema": {
              "type": "string",
              "enum": [
                "fail",
                "pass"
              ]
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Sort order for output items by timestamp. Use `asc` for ascending order or `desc` for descending order. Defaults to `asc`.",
            "example": null,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "A list of output items for the evaluation run",
            "schema": {
              "$ref": "#/components/schemas/EvalRunOutputItemList"
            },
            "examples": {}
          }
        },
        "tags": [
          "Evals"
        ],
        "examples": []
      },
      {
        "path": "/evals/{eval_id}/runs/{run_id}/output_items/{output_item_id}",
        "method": "GET",
        "operation_id": "getEvalRunOutputItem",
        "summary": "Get an output item of an eval run",
        "description": "Get an evaluation run output item by ID.\n",
        "parameters": [
          {
            "name": "eval_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the evaluation to retrieve runs for.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the run to retrieve.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "output_item_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the output item to retrieve.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "The evaluation run output item",
            "schema": {
              "$ref": "#/components/schemas/EvalRunOutputItem"
            },
            "examples": {}
          }
        },
        "tags": [
          "Evals"
        ],
        "examples": []
      }
    ],
    "Files": [
      {
        "path": "/files",
        "method": "GET",
        "operation_id": "listFiles",
        "summary": "List files",
        "description": "Returns a list of files.",
        "parameters": [
          {
            "name": "purpose",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Only return files with the given purpose.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 10,000, and the default is 10,000.\n",
            "example": null,
            "schema": {
              "type": "integer",
              "default": 10000
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n",
            "example": null,
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/ListFilesResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Files"
        ],
        "examples": []
      },
      {
        "path": "/files",
        "method": "POST",
        "operation_id": "createFile",
        "summary": "Upload file",
        "description": "Upload a file that can be used across various endpoints. Individual files can be up to 512 MB, and the size of all files uploaded by one organization can be up to 1 TB.\n\nThe Assistants API supports files up to 2 million tokens and of specific file types. See the [Assistants Tools guide](https://platform.openai.com/docs/assistants/tools) for details.\n\nThe Fine-tuning API only supports `.jsonl` files. The input also has certain required formats for fine-tuning [chat](https://platform.openai.com/docs/api-reference/fine-tuning/chat-input) or [completions](https://platform.openai.com/docs/api-reference/fine-tuning/completions-input) models.\n\nThe Batch API only supports `.jsonl` files up to 200 MB in size. The input also has a specific required [format](https://platform.openai.com/docs/api-reference/batch/request-input).\n\nPlease [contact us](https://help.openai.com/) if you need to increase these storage limits.\n",
        "parameters": [],
        "request_body": {
          "description": "",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/CreateFileRequest"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/OpenAIFile"
            },
            "examples": {}
          }
        },
        "tags": [
          "Files"
        ],
        "examples": []
      },
      {
        "path": "/files/{file_id}",
        "method": "DELETE",
        "operation_id": "deleteFile",
        "summary": "Delete file",
        "description": "Delete a file.",
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the file to use for this request.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/DeleteFileResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Files"
        ],
        "examples": []
      },
      {
        "path": "/files/{file_id}",
        "method": "GET",
        "operation_id": "retrieveFile",
        "summary": "Retrieve file",
        "description": "Returns information about a specific file.",
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the file to use for this request.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/OpenAIFile"
            },
            "examples": {}
          }
        },
        "tags": [
          "Files"
        ],
        "examples": []
      },
      {
        "path": "/files/{file_id}/content",
        "method": "GET",
        "operation_id": "downloadFile",
        "summary": "Retrieve file content",
        "description": "Returns the contents of the specified file.",
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the file to use for this request.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "tags": [
          "Files"
        ],
        "examples": []
      }
    ],
    "Fine-tuning": [
      {
        "path": "/fine_tuning/alpha/graders/run",
        "method": "POST",
        "operation_id": "runGrader",
        "summary": "Run grader",
        "description": "Run a grader.\n",
        "parameters": [],
        "request_body": {
          "description": "",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/RunGraderRequest"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/RunGraderResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Fine-tuning"
        ],
        "examples": []
      },
      {
        "path": "/fine_tuning/alpha/graders/validate",
        "method": "POST",
        "operation_id": "validateGrader",
        "summary": "Validate grader",
        "description": "Validate a grader.\n",
        "parameters": [],
        "request_body": {
          "description": "",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ValidateGraderRequest"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/ValidateGraderResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Fine-tuning"
        ],
        "examples": []
      },
      {
        "path": "/fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions",
        "method": "GET",
        "operation_id": "listFineTuningCheckpointPermissions",
        "summary": "List checkpoint permissions",
        "description": "**NOTE:** This endpoint requires an [admin API key](../admin-api-keys).\n\nOrganization owners can use this endpoint to view all permissions for a fine-tuned model checkpoint.\n",
        "parameters": [
          {
            "name": "fine_tuned_model_checkpoint",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the fine-tuned model checkpoint to get permissions for.\n",
            "example": null,
            "schema": {
              "type": "string",
              "example": "ft-AF1WoRqd3aJAHsqc9NY7iL8F"
            }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The ID of the project to get permissions for.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Identifier for the last permission ID from the previous pagination request.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Number of permissions to retrieve.",
            "example": null,
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The order in which to retrieve permissions.",
            "example": null,
            "schema": {
              "type": "string",
              "enum": [
                "ascending",
                "descending"
              ],
              "default": "descending"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/ListFineTuningCheckpointPermissionResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Fine-tuning"
        ],
        "examples": []
      },
      {
        "path": "/fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions",
        "method": "POST",
        "operation_id": "createFineTuningCheckpointPermission",
        "summary": "Create checkpoint permissions",
        "description": "**NOTE:** Calling this endpoint requires an [admin API key](../admin-api-keys).\n\nThis enables organization owners to share fine-tuned models with other projects in their organization.\n",
        "parameters": [
          {
            "name": "fine_tuned_model_checkpoint",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the fine-tuned model checkpoint to create a permission for.\n",
            "example": null,
            "schema": {
              "type": "string",
              "example": "ft:gpt-4o-mini-2024-07-18:org:weather:B7R9VjQd"
            }
          }
        ],
        "request_body": {
          "description": "",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/CreateFineTuningCheckpointPermissionRequest"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/ListFineTuningCheckpointPermissionResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Fine-tuning"
        ],
        "examples": []
      },
      {
        "path": "/fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions/{permission_id}",
        "method": "DELETE",
        "operation_id": "deleteFineTuningCheckpointPermission",
        "summary": "Delete checkpoint permission",
        "description": "**NOTE:** This endpoint requires an [admin API key](../admin-api-keys).\n\nOrganization owners can use this endpoint to delete a permission for a fine-tuned model checkpoint.\n",
        "parameters": [
          {
            "name": "fine_tuned_model_checkpoint",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the fine-tuned model checkpoint to delete a permission for.\n",
            "example": null,
            "schema": {
              "type": "string",
              "example": "ft:gpt-4o-mini-2024-07-18:org:weather:B7R9VjQd"
            }
          },
          {
            "name": "permission_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the fine-tuned model checkpoint permission to delete.\n",
            "example": null,
            "schema": {
              "type": "string",
              "example": "cp_zc4Q7MP6XxulcVzj4MZdwsAB"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/DeleteFineTuningCheckpointPermissionResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Fine-tuning"
        ],
        "examples": []
      },
      {
        "path": "/fine_tuning/jobs",
        "method": "POST",
        "operation_id": "createFineTuningJob",
        "summary": "Create fine-tuning job",
        "description": "Creates a fine-tuning job which begins the process of creating a new model from a given dataset.\n\nResponse includes details of the enqueued job including job status and the name of the fine-tuned models once complete.\n\n[Learn more about fine-tuning](https://platform.openai.com/docs/guides/model-optimization)\n",
        "parameters": [],
        "request_body": {
          "description": "",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/CreateFineTuningJobRequest"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/FineTuningJob"
            },
            "examples": {}
          }
        },
        "tags": [
          "Fine-tuning"
        ],
        "examples": []
      },
      {
        "path": "/fine_tuning/jobs",
        "method": "GET",
        "operation_id": "listPaginatedFineTuningJobs",
        "summary": "List fine-tuning jobs",
        "description": "List your organization's fine-tuning jobs\n",
        "parameters": [
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Identifier for the last job from the previous pagination request.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Number of fine-tuning jobs to retrieve.",
            "example": null,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "metadata",
            "in": "query",
            "required": false,
            "type": "object",
            "description": "Optional metadata filter. To filter, use the syntax `metadata[k]=v`. Alternatively, set `metadata=null` to indicate no metadata.\n",
            "example": null,
            "schema": {
              "type": "object",
              "nullable": true,
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/ListPaginatedFineTuningJobsResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Fine-tuning"
        ],
        "examples": []
      },
      {
        "path": "/fine_tuning/jobs/{fine_tuning_job_id}",
        "method": "GET",
        "operation_id": "retrieveFineTuningJob",
        "summary": "Retrieve fine-tuning job",
        "description": "Get info about a fine-tuning job.\n\n[Learn more about fine-tuning](https://platform.openai.com/docs/guides/model-optimization)\n",
        "parameters": [
          {
            "name": "fine_tuning_job_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the fine-tuning job.\n",
            "example": null,
            "schema": {
              "type": "string",
              "example": "ft-AF1WoRqd3aJAHsqc9NY7iL8F"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/FineTuningJob"
            },
            "examples": {}
          }
        },
        "tags": [
          "Fine-tuning"
        ],
        "examples": []
      },
      {
        "path": "/fine_tuning/jobs/{fine_tuning_job_id}/cancel",
        "method": "POST",
        "operation_id": "cancelFineTuningJob",
        "summary": "Cancel fine-tuning",
        "description": "Immediately cancel a fine-tune job.\n",
        "parameters": [
          {
            "name": "fine_tuning_job_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the fine-tuning job to cancel.\n",
            "example": null,
            "schema": {
              "type": "string",
              "example": "ft-AF1WoRqd3aJAHsqc9NY7iL8F"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/FineTuningJob"
            },
            "examples": {}
          }
        },
        "tags": [
          "Fine-tuning"
        ],
        "examples": []
      },
      {
        "path": "/fine_tuning/jobs/{fine_tuning_job_id}/checkpoints",
        "method": "GET",
        "operation_id": "listFineTuningJobCheckpoints",
        "summary": "List fine-tuning checkpoints",
        "description": "List checkpoints for a fine-tuning job.\n",
        "parameters": [
          {
            "name": "fine_tuning_job_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the fine-tuning job to get checkpoints for.\n",
            "example": null,
            "schema": {
              "type": "string",
              "example": "ft-AF1WoRqd3aJAHsqc9NY7iL8F"
            }
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Identifier for the last checkpoint ID from the previous pagination request.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Number of checkpoints to retrieve.",
            "example": null,
            "schema": {
              "type": "integer",
              "default": 10
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/ListFineTuningJobCheckpointsResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Fine-tuning"
        ],
        "examples": []
      },
      {
        "path": "/fine_tuning/jobs/{fine_tuning_job_id}/events",
        "method": "GET",
        "operation_id": "listFineTuningEvents",
        "summary": "List fine-tuning events",
        "description": "Get status updates for a fine-tuning job.\n",
        "parameters": [
          {
            "name": "fine_tuning_job_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the fine-tuning job to get events for.\n",
            "example": null,
            "schema": {
              "type": "string",
              "example": "ft-AF1WoRqd3aJAHsqc9NY7iL8F"
            }
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Identifier for the last event from the previous pagination request.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Number of events to retrieve.",
            "example": null,
            "schema": {
              "type": "integer",
              "default": 20
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/ListFineTuningJobEventsResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Fine-tuning"
        ],
        "examples": []
      },
      {
        "path": "/fine_tuning/jobs/{fine_tuning_job_id}/pause",
        "method": "POST",
        "operation_id": "pauseFineTuningJob",
        "summary": "Pause fine-tuning",
        "description": "Pause a fine-tune job.\n",
        "parameters": [
          {
            "name": "fine_tuning_job_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the fine-tuning job to pause.\n",
            "example": null,
            "schema": {
              "type": "string",
              "example": "ft-AF1WoRqd3aJAHsqc9NY7iL8F"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/FineTuningJob"
            },
            "examples": {}
          }
        },
        "tags": [
          "Fine-tuning"
        ],
        "examples": []
      },
      {
        "path": "/fine_tuning/jobs/{fine_tuning_job_id}/resume",
        "method": "POST",
        "operation_id": "resumeFineTuningJob",
        "summary": "Resume fine-tuning",
        "description": "Resume a fine-tune job.\n",
        "parameters": [
          {
            "name": "fine_tuning_job_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the fine-tuning job to resume.\n",
            "example": null,
            "schema": {
              "type": "string",
              "example": "ft-AF1WoRqd3aJAHsqc9NY7iL8F"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/FineTuningJob"
            },
            "examples": {}
          }
        },
        "tags": [
          "Fine-tuning"
        ],
        "examples": []
      }
    ],
    "Images": [
      {
        "path": "/images/edits",
        "method": "POST",
        "operation_id": "createImageEdit",
        "summary": "Create image edit",
        "description": "Creates an edited or extended image given one or more source images and a prompt. This endpoint only supports `gpt-image-1` and `dall-e-2`.",
        "parameters": [],
        "request_body": {
          "description": "",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/CreateImageEditRequest"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/ImagesResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Images"
        ],
        "examples": []
      },
      {
        "path": "/images/generations",
        "method": "POST",
        "operation_id": "createImage",
        "summary": "Create image",
        "description": "Creates an image given a prompt. [Learn more](https://platform.openai.com/docs/guides/images).\n",
        "parameters": [],
        "request_body": {
          "description": "",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/CreateImageRequest"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/ImagesResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Images"
        ],
        "examples": []
      },
      {
        "path": "/images/variations",
        "method": "POST",
        "operation_id": "createImageVariation",
        "summary": "Create image variation",
        "description": "Creates a variation of a given image. This endpoint only supports `dall-e-2`.",
        "parameters": [],
        "request_body": {
          "description": "",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/CreateImageVariationRequest"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/ImagesResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Images"
        ],
        "examples": []
      }
    ],
    "Models": [
      {
        "path": "/models",
        "method": "GET",
        "operation_id": "listModels",
        "summary": "List models",
        "description": "Lists the currently available models, and provides basic information about each one such as the owner and availability.",
        "parameters": [],
        "request_body": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/ListModelsResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Models"
        ],
        "examples": []
      },
      {
        "path": "/models/{model}",
        "method": "GET",
        "operation_id": "retrieveModel",
        "summary": "Retrieve model",
        "description": "Retrieves a model instance, providing basic information about the model such as the owner and permissioning.",
        "parameters": [
          {
            "name": "model",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the model to use for this request",
            "example": null,
            "schema": {
              "type": "string",
              "example": "gpt-4o-mini"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/Model"
            },
            "examples": {}
          }
        },
        "tags": [
          "Models"
        ],
        "examples": []
      },
      {
        "path": "/models/{model}",
        "method": "DELETE",
        "operation_id": "deleteModel",
        "summary": "Delete a fine-tuned model",
        "description": "Delete a fine-tuned model. You must have the Owner role in your organization to delete a model.",
        "parameters": [
          {
            "name": "model",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The model to delete",
            "example": null,
            "schema": {
              "type": "string",
              "example": "ft:gpt-4o-mini:acemeco:suffix:abc123"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/DeleteModelResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Models"
        ],
        "examples": []
      }
    ],
    "Moderations": [
      {
        "path": "/moderations",
        "method": "POST",
        "operation_id": "createModeration",
        "summary": "Create moderation",
        "description": "Classifies if text and/or image inputs are potentially harmful. Learn\nmore in the [moderation guide](https://platform.openai.com/docs/guides/moderation).\n",
        "parameters": [],
        "request_body": {
          "description": "",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/CreateModerationRequest"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/CreateModerationResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Moderations"
        ],
        "examples": []
      }
    ],
    "Audit Logs": [
      {
        "path": "/organization/audit_logs",
        "method": "GET",
        "operation_id": "list-audit-logs",
        "summary": "List audit logs",
        "description": "List user actions and configuration changes within this organization.",
        "parameters": [
          {
            "name": "effective_at",
            "in": "query",
            "required": false,
            "type": "object",
            "description": "Return only events whose `effective_at` (Unix seconds) is in this range.",
            "example": null,
            "schema": {
              "type": "object",
              "properties": {
                "gt": {
                  "type": "integer",
                  "description": "Return only events whose `effective_at` (Unix seconds) is greater than this value."
                },
                "gte": {
                  "type": "integer",
                  "description": "Return only events whose `effective_at` (Unix seconds) is greater than or equal to this value."
                },
                "lt": {
                  "type": "integer",
                  "description": "Return only events whose `effective_at` (Unix seconds) is less than this value."
                },
                "lte": {
                  "type": "integer",
                  "description": "Return only events whose `effective_at` (Unix seconds) is less than or equal to this value."
                }
              }
            }
          },
          {
            "name": "project_ids[]",
            "in": "query",
            "required": false,
            "type": "array[string]",
            "description": "Return only events for these projects.",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "event_types[]",
            "in": "query",
            "required": false,
            "type": "array[any]",
            "description": "Return only events with a `type` in one of these values. For example, `project.created`. For all options, see the documentation for the [audit log object](https://platform.openai.com/docs/api-reference/audit-logs/object).",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AuditLogEventType"
              }
            }
          },
          {
            "name": "actor_ids[]",
            "in": "query",
            "required": false,
            "type": "array[string]",
            "description": "Return only events performed by these actors. Can be a user ID, a service account ID, or an api key tracking ID.",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "actor_emails[]",
            "in": "query",
            "required": false,
            "type": "array[string]",
            "description": "Return only events performed by users with these emails.",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "resource_ids[]",
            "in": "query",
            "required": false,
            "type": "array[string]",
            "description": "Return only events performed on these targets. For example, a project ID updated.",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n",
            "example": null,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "Audit logs listed successfully.",
            "schema": {
              "$ref": "#/components/schemas/ListAuditLogsResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Audit Logs"
        ],
        "examples": []
      }
    ],
    "Certificates": [
      {
        "path": "/organization/certificates",
        "method": "GET",
        "operation_id": "listOrganizationCertificates",
        "summary": "List organization certificates",
        "description": "List uploaded certificates for this organization.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n",
            "example": null,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n",
            "example": null,
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "Certificates listed successfully.",
            "schema": {
              "$ref": "#/components/schemas/ListCertificatesResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Certificates"
        ],
        "examples": []
      },
      {
        "path": "/organization/certificates",
        "method": "POST",
        "operation_id": "uploadCertificate",
        "summary": "Upload certificate",
        "description": "Upload a certificate to the organization. This does **not** automatically activate the certificate.\n\nOrganizations can upload up to 50 certificates.\n",
        "parameters": [],
        "request_body": {
          "description": "The certificate upload payload.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/UploadCertificateRequest"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "Certificate uploaded successfully.",
            "schema": {
              "$ref": "#/components/schemas/Certificate"
            },
            "examples": {}
          }
        },
        "tags": [
          "Certificates"
        ],
        "examples": []
      },
      {
        "path": "/organization/certificates/activate",
        "method": "POST",
        "operation_id": "activateOrganizationCertificates",
        "summary": "Activate certificates for organization",
        "description": "Activate certificates at the organization level.\n\nYou can atomically and idempotently activate up to 10 certificates at a time.\n",
        "parameters": [],
        "request_body": {
          "description": "The certificate activation payload.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ToggleCertificatesRequest"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "Certificates activated successfully.",
            "schema": {
              "$ref": "#/components/schemas/ListCertificatesResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Certificates"
        ],
        "examples": []
      },
      {
        "path": "/organization/certificates/deactivate",
        "method": "POST",
        "operation_id": "deactivateOrganizationCertificates",
        "summary": "Deactivate certificates for organization",
        "description": "Deactivate certificates at the organization level.\n\nYou can atomically and idempotently deactivate up to 10 certificates at a time.\n",
        "parameters": [],
        "request_body": {
          "description": "The certificate deactivation payload.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ToggleCertificatesRequest"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "Certificates deactivated successfully.",
            "schema": {
              "$ref": "#/components/schemas/ListCertificatesResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Certificates"
        ],
        "examples": []
      },
      {
        "path": "/organization/certificates/{certificate_id}",
        "method": "GET",
        "operation_id": "getCertificate",
        "summary": "Get certificate",
        "description": "Get a certificate that has been uploaded to the organization.\n\nYou can get a certificate regardless of whether it is active or not.\n",
        "parameters": [
          {
            "name": "certificate_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Unique ID of the certificate to retrieve.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "type": "array[string]",
            "description": "A list of additional fields to include in the response. Currently the only supported value is `content` to fetch the PEM content of the certificate.",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "content"
                ]
              }
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "Certificate retrieved successfully.",
            "schema": {
              "$ref": "#/components/schemas/Certificate"
            },
            "examples": {}
          }
        },
        "tags": [
          "Certificates"
        ],
        "examples": []
      },
      {
        "path": "/organization/certificates/{certificate_id}",
        "method": "POST",
        "operation_id": "modifyCertificate",
        "summary": "Modify certificate",
        "description": "Modify a certificate. Note that only the name can be modified.\n",
        "parameters": [],
        "request_body": {
          "description": "The certificate modification payload.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ModifyCertificateRequest"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "Certificate modified successfully.",
            "schema": {
              "$ref": "#/components/schemas/Certificate"
            },
            "examples": {}
          }
        },
        "tags": [
          "Certificates"
        ],
        "examples": []
      },
      {
        "path": "/organization/certificates/{certificate_id}",
        "method": "DELETE",
        "operation_id": "deleteCertificate",
        "summary": "Delete certificate",
        "description": "Delete a certificate from the organization.\n\nThe certificate must be inactive for the organization and all projects.\n",
        "parameters": [],
        "request_body": null,
        "responses": {
          "200": {
            "description": "Certificate deleted successfully.",
            "schema": {
              "$ref": "#/components/schemas/DeleteCertificateResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Certificates"
        ],
        "examples": []
      },
      {
        "path": "/organization/projects/{project_id}/certificates",
        "method": "GET",
        "operation_id": "listProjectCertificates",
        "summary": "List project certificates",
        "description": "List certificates for this project.",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the project.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n",
            "example": null,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n",
            "example": null,
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "Certificates listed successfully.",
            "schema": {
              "$ref": "#/components/schemas/ListCertificatesResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Certificates"
        ],
        "examples": []
      },
      {
        "path": "/organization/projects/{project_id}/certificates/activate",
        "method": "POST",
        "operation_id": "activateProjectCertificates",
        "summary": "Activate certificates for project",
        "description": "Activate certificates at the project level.\n\nYou can atomically and idempotently activate up to 10 certificates at a time.\n",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the project.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": {
          "description": "The certificate activation payload.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ToggleCertificatesRequest"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "Certificates activated successfully.",
            "schema": {
              "$ref": "#/components/schemas/ListCertificatesResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Certificates"
        ],
        "examples": []
      },
      {
        "path": "/organization/projects/{project_id}/certificates/deactivate",
        "method": "POST",
        "operation_id": "deactivateProjectCertificates",
        "summary": "Deactivate certificates for project",
        "description": "Deactivate certificates at the project level. You can atomically and \nidempotently deactivate up to 10 certificates at a time.\n",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the project.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": {
          "description": "The certificate deactivation payload.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ToggleCertificatesRequest"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "Certificates deactivated successfully.",
            "schema": {
              "$ref": "#/components/schemas/ListCertificatesResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Certificates"
        ],
        "examples": []
      }
    ],
    "Usage": [
      {
        "path": "/organization/costs",
        "method": "GET",
        "operation_id": "usage-costs",
        "summary": "Costs",
        "description": "Get costs details for the organization.",
        "parameters": [
          {
            "name": "start_time",
            "in": "query",
            "required": true,
            "type": "integer",
            "description": "Start time (Unix seconds) of the query time range, inclusive.",
            "example": null,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "End time (Unix seconds) of the query time range, exclusive.",
            "example": null,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "bucket_width",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Width of each time bucket in response. Currently only `1d` is supported, default to `1d`.",
            "example": null,
            "schema": {
              "type": "string",
              "enum": [
                "1d"
              ],
              "default": "1d"
            }
          },
          {
            "name": "project_ids",
            "in": "query",
            "required": false,
            "type": "array[string]",
            "description": "Return only costs for these projects.",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "group_by",
            "in": "query",
            "required": false,
            "type": "array[string]",
            "description": "Group the costs by the specified fields. Support fields include `project_id`, `line_item` and any combination of them.",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "project_id",
                  "line_item"
                ]
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "A limit on the number of buckets to be returned. Limit can range between 1 and 180, and the default is 7.\n",
            "example": null,
            "schema": {
              "type": "integer",
              "default": 7
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "Costs data retrieved successfully.",
            "schema": {
              "$ref": "#/components/schemas/UsageResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Usage"
        ],
        "examples": []
      },
      {
        "path": "/organization/usage/audio_speeches",
        "method": "GET",
        "operation_id": "usage-audio-speeches",
        "summary": "Audio speeches",
        "description": "Get audio speeches usage details for the organization.",
        "parameters": [
          {
            "name": "start_time",
            "in": "query",
            "required": true,
            "type": "integer",
            "description": "Start time (Unix seconds) of the query time range, inclusive.",
            "example": null,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "End time (Unix seconds) of the query time range, exclusive.",
            "example": null,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "bucket_width",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.",
            "example": null,
            "schema": {
              "type": "string",
              "enum": [
                "1m",
                "1h",
                "1d"
              ],
              "default": "1d"
            }
          },
          {
            "name": "project_ids",
            "in": "query",
            "required": false,
            "type": "array[string]",
            "description": "Return only usage for these projects.",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "user_ids",
            "in": "query",
            "required": false,
            "type": "array[string]",
            "description": "Return only usage for these users.",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "api_key_ids",
            "in": "query",
            "required": false,
            "type": "array[string]",
            "description": "Return only usage for these API keys.",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "models",
            "in": "query",
            "required": false,
            "type": "array[string]",
            "description": "Return only usage for these models.",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "group_by",
            "in": "query",
            "required": false,
            "type": "array[string]",
            "description": "Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model` or any combination of them.",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "project_id",
                  "user_id",
                  "api_key_id",
                  "model"
                ]
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Specifies the number of buckets to return.\n- `bucket_width=1d`: default: 7, max: 31\n- `bucket_width=1h`: default: 24, max: 168\n- `bucket_width=1m`: default: 60, max: 1440\n",
            "example": null,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "Usage data retrieved successfully.",
            "schema": {
              "$ref": "#/components/schemas/UsageResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Usage"
        ],
        "examples": []
      },
      {
        "path": "/organization/usage/audio_transcriptions",
        "method": "GET",
        "operation_id": "usage-audio-transcriptions",
        "summary": "Audio transcriptions",
        "description": "Get audio transcriptions usage details for the organization.",
        "parameters": [
          {
            "name": "start_time",
            "in": "query",
            "required": true,
            "type": "integer",
            "description": "Start time (Unix seconds) of the query time range, inclusive.",
            "example": null,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "End time (Unix seconds) of the query time range, exclusive.",
            "example": null,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "bucket_width",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.",
            "example": null,
            "schema": {
              "type": "string",
              "enum": [
                "1m",
                "1h",
                "1d"
              ],
              "default": "1d"
            }
          },
          {
            "name": "project_ids",
            "in": "query",
            "required": false,
            "type": "array[string]",
            "description": "Return only usage for these projects.",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "user_ids",
            "in": "query",
            "required": false,
            "type": "array[string]",
            "description": "Return only usage for these users.",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "api_key_ids",
            "in": "query",
            "required": false,
            "type": "array[string]",
            "description": "Return only usage for these API keys.",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "models",
            "in": "query",
            "required": false,
            "type": "array[string]",
            "description": "Return only usage for these models.",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "group_by",
            "in": "query",
            "required": false,
            "type": "array[string]",
            "description": "Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model` or any combination of them.",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "project_id",
                  "user_id",
                  "api_key_id",
                  "model"
                ]
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Specifies the number of buckets to return.\n- `bucket_width=1d`: default: 7, max: 31\n- `bucket_width=1h`: default: 24, max: 168\n- `bucket_width=1m`: default: 60, max: 1440\n",
            "example": null,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "Usage data retrieved successfully.",
            "schema": {
              "$ref": "#/components/schemas/UsageResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Usage"
        ],
        "examples": []
      },
      {
        "path": "/organization/usage/code_interpreter_sessions",
        "method": "GET",
        "operation_id": "usage-code-interpreter-sessions",
        "summary": "Code interpreter sessions",
        "description": "Get code interpreter sessions usage details for the organization.",
        "parameters": [
          {
            "name": "start_time",
            "in": "query",
            "required": true,
            "type": "integer",
            "description": "Start time (Unix seconds) of the query time range, inclusive.",
            "example": null,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "End time (Unix seconds) of the query time range, exclusive.",
            "example": null,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "bucket_width",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.",
            "example": null,
            "schema": {
              "type": "string",
              "enum": [
                "1m",
                "1h",
                "1d"
              ],
              "default": "1d"
            }
          },
          {
            "name": "project_ids",
            "in": "query",
            "required": false,
            "type": "array[string]",
            "description": "Return only usage for these projects.",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "group_by",
            "in": "query",
            "required": false,
            "type": "array[string]",
            "description": "Group the usage data by the specified fields. Support fields include `project_id`.",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "project_id"
                ]
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Specifies the number of buckets to return.\n- `bucket_width=1d`: default: 7, max: 31\n- `bucket_width=1h`: default: 24, max: 168\n- `bucket_width=1m`: default: 60, max: 1440\n",
            "example": null,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "Usage data retrieved successfully.",
            "schema": {
              "$ref": "#/components/schemas/UsageResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Usage"
        ],
        "examples": []
      },
      {
        "path": "/organization/usage/completions",
        "method": "GET",
        "operation_id": "usage-completions",
        "summary": "Completions",
        "description": "Get completions usage details for the organization.",
        "parameters": [
          {
            "name": "start_time",
            "in": "query",
            "required": true,
            "type": "integer",
            "description": "Start time (Unix seconds) of the query time range, inclusive.",
            "example": null,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "End time (Unix seconds) of the query time range, exclusive.",
            "example": null,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "bucket_width",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.",
            "example": null,
            "schema": {
              "type": "string",
              "enum": [
                "1m",
                "1h",
                "1d"
              ],
              "default": "1d"
            }
          },
          {
            "name": "project_ids",
            "in": "query",
            "required": false,
            "type": "array[string]",
            "description": "Return only usage for these projects.",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "user_ids",
            "in": "query",
            "required": false,
            "type": "array[string]",
            "description": "Return only usage for these users.",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "api_key_ids",
            "in": "query",
            "required": false,
            "type": "array[string]",
            "description": "Return only usage for these API keys.",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "models",
            "in": "query",
            "required": false,
            "type": "array[string]",
            "description": "Return only usage for these models.",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "batch",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "If `true`, return batch jobs only. If `false`, return non-batch jobs only. By default, return both.\n",
            "example": null,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "group_by",
            "in": "query",
            "required": false,
            "type": "array[string]",
            "description": "Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model`, `batch` or any combination of them.",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "project_id",
                  "user_id",
                  "api_key_id",
                  "model",
                  "batch"
                ]
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Specifies the number of buckets to return.\n- `bucket_width=1d`: default: 7, max: 31\n- `bucket_width=1h`: default: 24, max: 168\n- `bucket_width=1m`: default: 60, max: 1440\n",
            "example": null,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "Usage data retrieved successfully.",
            "schema": {
              "$ref": "#/components/schemas/UsageResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Usage"
        ],
        "examples": []
      },
      {
        "path": "/organization/usage/embeddings",
        "method": "GET",
        "operation_id": "usage-embeddings",
        "summary": "Embeddings",
        "description": "Get embeddings usage details for the organization.",
        "parameters": [
          {
            "name": "start_time",
            "in": "query",
            "required": true,
            "type": "integer",
            "description": "Start time (Unix seconds) of the query time range, inclusive.",
            "example": null,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "End time (Unix seconds) of the query time range, exclusive.",
            "example": null,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "bucket_width",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.",
            "example": null,
            "schema": {
              "type": "string",
              "enum": [
                "1m",
                "1h",
                "1d"
              ],
              "default": "1d"
            }
          },
          {
            "name": "project_ids",
            "in": "query",
            "required": false,
            "type": "array[string]",
            "description": "Return only usage for these projects.",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "user_ids",
            "in": "query",
            "required": false,
            "type": "array[string]",
            "description": "Return only usage for these users.",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "api_key_ids",
            "in": "query",
            "required": false,
            "type": "array[string]",
            "description": "Return only usage for these API keys.",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "models",
            "in": "query",
            "required": false,
            "type": "array[string]",
            "description": "Return only usage for these models.",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "group_by",
            "in": "query",
            "required": false,
            "type": "array[string]",
            "description": "Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model` or any combination of them.",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "project_id",
                  "user_id",
                  "api_key_id",
                  "model"
                ]
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Specifies the number of buckets to return.\n- `bucket_width=1d`: default: 7, max: 31\n- `bucket_width=1h`: default: 24, max: 168\n- `bucket_width=1m`: default: 60, max: 1440\n",
            "example": null,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "Usage data retrieved successfully.",
            "schema": {
              "$ref": "#/components/schemas/UsageResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Usage"
        ],
        "examples": []
      },
      {
        "path": "/organization/usage/images",
        "method": "GET",
        "operation_id": "usage-images",
        "summary": "Images",
        "description": "Get images usage details for the organization.",
        "parameters": [
          {
            "name": "start_time",
            "in": "query",
            "required": true,
            "type": "integer",
            "description": "Start time (Unix seconds) of the query time range, inclusive.",
            "example": null,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "End time (Unix seconds) of the query time range, exclusive.",
            "example": null,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "bucket_width",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.",
            "example": null,
            "schema": {
              "type": "string",
              "enum": [
                "1m",
                "1h",
                "1d"
              ],
              "default": "1d"
            }
          },
          {
            "name": "sources",
            "in": "query",
            "required": false,
            "type": "array[string]",
            "description": "Return only usages for these sources. Possible values are `image.generation`, `image.edit`, `image.variation` or any combination of them.",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "image.generation",
                  "image.edit",
                  "image.variation"
                ]
              }
            }
          },
          {
            "name": "sizes",
            "in": "query",
            "required": false,
            "type": "array[string]",
            "description": "Return only usages for these image sizes. Possible values are `256x256`, `512x512`, `1024x1024`, `1792x1792`, `1024x1792` or any combination of them.",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "256x256",
                  "512x512",
                  "1024x1024",
                  "1792x1792",
                  "1024x1792"
                ]
              }
            }
          },
          {
            "name": "project_ids",
            "in": "query",
            "required": false,
            "type": "array[string]",
            "description": "Return only usage for these projects.",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "user_ids",
            "in": "query",
            "required": false,
            "type": "array[string]",
            "description": "Return only usage for these users.",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "api_key_ids",
            "in": "query",
            "required": false,
            "type": "array[string]",
            "description": "Return only usage for these API keys.",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "models",
            "in": "query",
            "required": false,
            "type": "array[string]",
            "description": "Return only usage for these models.",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "group_by",
            "in": "query",
            "required": false,
            "type": "array[string]",
            "description": "Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model`, `size`, `source` or any combination of them.",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "project_id",
                  "user_id",
                  "api_key_id",
                  "model",
                  "size",
                  "source"
                ]
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Specifies the number of buckets to return.\n- `bucket_width=1d`: default: 7, max: 31\n- `bucket_width=1h`: default: 24, max: 168\n- `bucket_width=1m`: default: 60, max: 1440\n",
            "example": null,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "Usage data retrieved successfully.",
            "schema": {
              "$ref": "#/components/schemas/UsageResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Usage"
        ],
        "examples": []
      },
      {
        "path": "/organization/usage/moderations",
        "method": "GET",
        "operation_id": "usage-moderations",
        "summary": "Moderations",
        "description": "Get moderations usage details for the organization.",
        "parameters": [
          {
            "name": "start_time",
            "in": "query",
            "required": true,
            "type": "integer",
            "description": "Start time (Unix seconds) of the query time range, inclusive.",
            "example": null,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "End time (Unix seconds) of the query time range, exclusive.",
            "example": null,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "bucket_width",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.",
            "example": null,
            "schema": {
              "type": "string",
              "enum": [
                "1m",
                "1h",
                "1d"
              ],
              "default": "1d"
            }
          },
          {
            "name": "project_ids",
            "in": "query",
            "required": false,
            "type": "array[string]",
            "description": "Return only usage for these projects.",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "user_ids",
            "in": "query",
            "required": false,
            "type": "array[string]",
            "description": "Return only usage for these users.",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "api_key_ids",
            "in": "query",
            "required": false,
            "type": "array[string]",
            "description": "Return only usage for these API keys.",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "models",
            "in": "query",
            "required": false,
            "type": "array[string]",
            "description": "Return only usage for these models.",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "group_by",
            "in": "query",
            "required": false,
            "type": "array[string]",
            "description": "Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model` or any combination of them.",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "project_id",
                  "user_id",
                  "api_key_id",
                  "model"
                ]
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Specifies the number of buckets to return.\n- `bucket_width=1d`: default: 7, max: 31\n- `bucket_width=1h`: default: 24, max: 168\n- `bucket_width=1m`: default: 60, max: 1440\n",
            "example": null,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "Usage data retrieved successfully.",
            "schema": {
              "$ref": "#/components/schemas/UsageResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Usage"
        ],
        "examples": []
      },
      {
        "path": "/organization/usage/vector_stores",
        "method": "GET",
        "operation_id": "usage-vector-stores",
        "summary": "Vector stores",
        "description": "Get vector stores usage details for the organization.",
        "parameters": [
          {
            "name": "start_time",
            "in": "query",
            "required": true,
            "type": "integer",
            "description": "Start time (Unix seconds) of the query time range, inclusive.",
            "example": null,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "End time (Unix seconds) of the query time range, exclusive.",
            "example": null,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "bucket_width",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.",
            "example": null,
            "schema": {
              "type": "string",
              "enum": [
                "1m",
                "1h",
                "1d"
              ],
              "default": "1d"
            }
          },
          {
            "name": "project_ids",
            "in": "query",
            "required": false,
            "type": "array[string]",
            "description": "Return only usage for these projects.",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "group_by",
            "in": "query",
            "required": false,
            "type": "array[string]",
            "description": "Group the usage data by the specified fields. Support fields include `project_id`.",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "project_id"
                ]
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Specifies the number of buckets to return.\n- `bucket_width=1d`: default: 7, max: 31\n- `bucket_width=1h`: default: 24, max: 168\n- `bucket_width=1m`: default: 60, max: 1440\n",
            "example": null,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "Usage data retrieved successfully.",
            "schema": {
              "$ref": "#/components/schemas/UsageResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Usage"
        ],
        "examples": []
      }
    ],
    "Invites": [
      {
        "path": "/organization/invites",
        "method": "GET",
        "operation_id": "list-invites",
        "summary": "List invites",
        "description": "Returns a list of invites in the organization.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n",
            "example": null,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "Invites listed successfully.",
            "schema": {
              "$ref": "#/components/schemas/InviteListResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Invites"
        ],
        "examples": []
      },
      {
        "path": "/organization/invites",
        "method": "POST",
        "operation_id": "inviteUser",
        "summary": "Create invite",
        "description": "Create an invite for a user to the organization. The invite must be accepted by the user before they have access to the organization.",
        "parameters": [],
        "request_body": {
          "description": "The invite request payload.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/InviteRequest"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "User invited successfully.",
            "schema": {
              "$ref": "#/components/schemas/Invite"
            },
            "examples": {}
          }
        },
        "tags": [
          "Invites"
        ],
        "examples": []
      },
      {
        "path": "/organization/invites/{invite_id}",
        "method": "GET",
        "operation_id": "retrieve-invite",
        "summary": "Retrieve invite",
        "description": "Retrieves an invite.",
        "parameters": [
          {
            "name": "invite_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the invite to retrieve.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "Invite retrieved successfully.",
            "schema": {
              "$ref": "#/components/schemas/Invite"
            },
            "examples": {}
          }
        },
        "tags": [
          "Invites"
        ],
        "examples": []
      },
      {
        "path": "/organization/invites/{invite_id}",
        "method": "DELETE",
        "operation_id": "delete-invite",
        "summary": "Delete invite",
        "description": "Delete an invite. If the invite has already been accepted, it cannot be deleted.",
        "parameters": [
          {
            "name": "invite_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the invite to delete.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "Invite deleted successfully.",
            "schema": {
              "$ref": "#/components/schemas/InviteDeleteResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Invites"
        ],
        "examples": []
      }
    ],
    "Projects": [
      {
        "path": "/organization/projects",
        "method": "GET",
        "operation_id": "list-projects",
        "summary": "List projects",
        "description": "Returns a list of projects.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n",
            "example": null,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_archived",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "If `true` returns all projects including those that have been `archived`. Archived projects are not included by default.",
            "example": null,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "Projects listed successfully.",
            "schema": {
              "$ref": "#/components/schemas/ProjectListResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Projects"
        ],
        "examples": []
      },
      {
        "path": "/organization/projects",
        "method": "POST",
        "operation_id": "create-project",
        "summary": "Create project",
        "description": "Create a new project in the organization. Projects can be created and archived, but cannot be deleted.",
        "parameters": [],
        "request_body": {
          "description": "The project create request payload.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ProjectCreateRequest"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "Project created successfully.",
            "schema": {
              "$ref": "#/components/schemas/Project"
            },
            "examples": {}
          }
        },
        "tags": [
          "Projects"
        ],
        "examples": []
      },
      {
        "path": "/organization/projects/{project_id}",
        "method": "GET",
        "operation_id": "retrieve-project",
        "summary": "Retrieve project",
        "description": "Retrieves a project.",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the project.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "Project retrieved successfully.",
            "schema": {
              "$ref": "#/components/schemas/Project"
            },
            "examples": {}
          }
        },
        "tags": [
          "Projects"
        ],
        "examples": []
      },
      {
        "path": "/organization/projects/{project_id}",
        "method": "POST",
        "operation_id": "modify-project",
        "summary": "Modify project",
        "description": "Modifies a project in the organization.",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the project.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": {
          "description": "The project update request payload.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ProjectUpdateRequest"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "Project updated successfully.",
            "schema": {
              "$ref": "#/components/schemas/Project"
            },
            "examples": {}
          },
          "400": {
            "description": "Error response when updating the default project.",
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Projects"
        ],
        "examples": []
      },
      {
        "path": "/organization/projects/{project_id}/api_keys",
        "method": "GET",
        "operation_id": "list-project-api-keys",
        "summary": "List project API keys",
        "description": "Returns a list of API keys in the project.",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the project.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n",
            "example": null,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "Project API keys listed successfully.",
            "schema": {
              "$ref": "#/components/schemas/ProjectApiKeyListResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Projects"
        ],
        "examples": []
      },
      {
        "path": "/organization/projects/{project_id}/api_keys/{key_id}",
        "method": "GET",
        "operation_id": "retrieve-project-api-key",
        "summary": "Retrieve project API key",
        "description": "Retrieves an API key in the project.",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the project.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the API key.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "Project API key retrieved successfully.",
            "schema": {
              "$ref": "#/components/schemas/ProjectApiKey"
            },
            "examples": {}
          }
        },
        "tags": [
          "Projects"
        ],
        "examples": []
      },
      {
        "path": "/organization/projects/{project_id}/api_keys/{key_id}",
        "method": "DELETE",
        "operation_id": "delete-project-api-key",
        "summary": "Delete project API key",
        "description": "Deletes an API key from the project.",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the project.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the API key.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "Project API key deleted successfully.",
            "schema": {
              "$ref": "#/components/schemas/ProjectApiKeyDeleteResponse"
            },
            "examples": {}
          },
          "400": {
            "description": "Error response for various conditions.",
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Projects"
        ],
        "examples": []
      },
      {
        "path": "/organization/projects/{project_id}/archive",
        "method": "POST",
        "operation_id": "archive-project",
        "summary": "Archive project",
        "description": "Archives a project in the organization. Archived projects cannot be used or updated.",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the project.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "Project archived successfully.",
            "schema": {
              "$ref": "#/components/schemas/Project"
            },
            "examples": {}
          }
        },
        "tags": [
          "Projects"
        ],
        "examples": []
      },
      {
        "path": "/organization/projects/{project_id}/rate_limits",
        "method": "GET",
        "operation_id": "list-project-rate-limits",
        "summary": "List project rate limits",
        "description": "Returns the rate limits per model for a project.",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the project.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "A limit on the number of objects to be returned. The default is 100.\n",
            "example": null,
            "schema": {
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, beginning with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "Project rate limits listed successfully.",
            "schema": {
              "$ref": "#/components/schemas/ProjectRateLimitListResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Projects"
        ],
        "examples": []
      },
      {
        "path": "/organization/projects/{project_id}/rate_limits/{rate_limit_id}",
        "method": "POST",
        "operation_id": "update-project-rate-limits",
        "summary": "Modify project rate limit",
        "description": "Updates a project rate limit.",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the project.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rate_limit_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the rate limit.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": {
          "description": "The project rate limit update request payload.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ProjectRateLimitUpdateRequest"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "Project rate limit updated successfully.",
            "schema": {
              "$ref": "#/components/schemas/ProjectRateLimit"
            },
            "examples": {}
          },
          "400": {
            "description": "Error response for various conditions.",
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Projects"
        ],
        "examples": []
      },
      {
        "path": "/organization/projects/{project_id}/service_accounts",
        "method": "GET",
        "operation_id": "list-project-service-accounts",
        "summary": "List project service accounts",
        "description": "Returns a list of service accounts in the project.",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the project.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n",
            "example": null,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "Project service accounts listed successfully.",
            "schema": {
              "$ref": "#/components/schemas/ProjectServiceAccountListResponse"
            },
            "examples": {}
          },
          "400": {
            "description": "Error response when project is archived.",
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Projects"
        ],
        "examples": []
      },
      {
        "path": "/organization/projects/{project_id}/service_accounts",
        "method": "POST",
        "operation_id": "create-project-service-account",
        "summary": "Create project service account",
        "description": "Creates a new service account in the project. This also returns an unredacted API key for the service account.",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the project.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": {
          "description": "The project service account create request payload.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ProjectServiceAccountCreateRequest"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "Project service account created successfully.",
            "schema": {
              "$ref": "#/components/schemas/ProjectServiceAccountCreateResponse"
            },
            "examples": {}
          },
          "400": {
            "description": "Error response when project is archived.",
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Projects"
        ],
        "examples": []
      },
      {
        "path": "/organization/projects/{project_id}/service_accounts/{service_account_id}",
        "method": "GET",
        "operation_id": "retrieve-project-service-account",
        "summary": "Retrieve project service account",
        "description": "Retrieves a service account in the project.",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the project.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service_account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the service account.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "Project service account retrieved successfully.",
            "schema": {
              "$ref": "#/components/schemas/ProjectServiceAccount"
            },
            "examples": {}
          }
        },
        "tags": [
          "Projects"
        ],
        "examples": []
      },
      {
        "path": "/organization/projects/{project_id}/service_accounts/{service_account_id}",
        "method": "DELETE",
        "operation_id": "delete-project-service-account",
        "summary": "Delete project service account",
        "description": "Deletes a service account from the project.",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the project.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service_account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the service account.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "Project service account deleted successfully.",
            "schema": {
              "$ref": "#/components/schemas/ProjectServiceAccountDeleteResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Projects"
        ],
        "examples": []
      },
      {
        "path": "/organization/projects/{project_id}/users",
        "method": "GET",
        "operation_id": "list-project-users",
        "summary": "List project users",
        "description": "Returns a list of users in the project.",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the project.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n",
            "example": null,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "Project users listed successfully.",
            "schema": {
              "$ref": "#/components/schemas/ProjectUserListResponse"
            },
            "examples": {}
          },
          "400": {
            "description": "Error response when project is archived.",
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Projects"
        ],
        "examples": []
      },
      {
        "path": "/organization/projects/{project_id}/users",
        "method": "POST",
        "operation_id": "create-project-user",
        "summary": "Create project user",
        "description": "Adds a user to the project. Users must already be members of the organization to be added to a project.",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the project.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": {
          "description": "The project user create request payload.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ProjectUserCreateRequest"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "User added to project successfully.",
            "schema": {
              "$ref": "#/components/schemas/ProjectUser"
            },
            "examples": {}
          },
          "400": {
            "description": "Error response for various conditions.",
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Projects"
        ],
        "examples": []
      },
      {
        "path": "/organization/projects/{project_id}/users/{user_id}",
        "method": "GET",
        "operation_id": "retrieve-project-user",
        "summary": "Retrieve project user",
        "description": "Retrieves a user in the project.",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the project.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the user.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "Project user retrieved successfully.",
            "schema": {
              "$ref": "#/components/schemas/ProjectUser"
            },
            "examples": {}
          }
        },
        "tags": [
          "Projects"
        ],
        "examples": []
      },
      {
        "path": "/organization/projects/{project_id}/users/{user_id}",
        "method": "POST",
        "operation_id": "modify-project-user",
        "summary": "Modify project user",
        "description": "Modifies a user's role in the project.",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the project.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the user.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": {
          "description": "The project user update request payload.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ProjectUserUpdateRequest"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "Project user's role updated successfully.",
            "schema": {
              "$ref": "#/components/schemas/ProjectUser"
            },
            "examples": {}
          },
          "400": {
            "description": "Error response for various conditions.",
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Projects"
        ],
        "examples": []
      },
      {
        "path": "/organization/projects/{project_id}/users/{user_id}",
        "method": "DELETE",
        "operation_id": "delete-project-user",
        "summary": "Delete project user",
        "description": "Deletes a user from the project.",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the project.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the user.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "Project user deleted successfully.",
            "schema": {
              "$ref": "#/components/schemas/ProjectUserDeleteResponse"
            },
            "examples": {}
          },
          "400": {
            "description": "Error response for various conditions.",
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Projects"
        ],
        "examples": []
      }
    ],
    "Users": [
      {
        "path": "/organization/users",
        "method": "GET",
        "operation_id": "list-users",
        "summary": "List users",
        "description": "Lists all of the users in the organization.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n",
            "example": null,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "emails",
            "in": "query",
            "required": false,
            "type": "array[string]",
            "description": "Filter by the email address of users.",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "Users listed successfully.",
            "schema": {
              "$ref": "#/components/schemas/UserListResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Users"
        ],
        "examples": []
      },
      {
        "path": "/organization/users/{user_id}",
        "method": "GET",
        "operation_id": "retrieve-user",
        "summary": "Retrieve user",
        "description": "Retrieves a user by their identifier.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the user.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "User retrieved successfully.",
            "schema": {
              "$ref": "#/components/schemas/User"
            },
            "examples": {}
          }
        },
        "tags": [
          "Users"
        ],
        "examples": []
      },
      {
        "path": "/organization/users/{user_id}",
        "method": "POST",
        "operation_id": "modify-user",
        "summary": "Modify user",
        "description": "Modifies a user's role in the organization.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the user.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": {
          "description": "The new user role to modify. This must be one of `owner` or `member`.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/UserRoleUpdateRequest"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "User role updated successfully.",
            "schema": {
              "$ref": "#/components/schemas/User"
            },
            "examples": {}
          }
        },
        "tags": [
          "Users"
        ],
        "examples": []
      },
      {
        "path": "/organization/users/{user_id}",
        "method": "DELETE",
        "operation_id": "delete-user",
        "summary": "Delete user",
        "description": "Deletes a user from the organization.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the user.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "User deleted successfully.",
            "schema": {
              "$ref": "#/components/schemas/UserDeleteResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Users"
        ],
        "examples": []
      }
    ],
    "Realtime": [
      {
        "path": "/realtime/sessions",
        "method": "POST",
        "operation_id": "create-realtime-session",
        "summary": "Create session",
        "description": "Create an ephemeral API token for use in client-side applications with the\nRealtime API. Can be configured with the same session parameters as the\n`session.update` client event.\n\nIt responds with a session object, plus a `client_secret` key which contains\na usable ephemeral API token that can be used to authenticate browser clients\nfor the Realtime API.\n",
        "parameters": [],
        "request_body": {
          "description": "Create an ephemeral API key with the given session configuration.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/RealtimeSessionCreateRequest"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "Session created successfully.",
            "schema": {
              "$ref": "#/components/schemas/RealtimeSessionCreateResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Realtime"
        ],
        "examples": []
      },
      {
        "path": "/realtime/transcription_sessions",
        "method": "POST",
        "operation_id": "create-realtime-transcription-session",
        "summary": "Create transcription session",
        "description": "Create an ephemeral API token for use in client-side applications with the\nRealtime API specifically for realtime transcriptions. \nCan be configured with the same session parameters as the `transcription_session.update` client event.\n\nIt responds with a session object, plus a `client_secret` key which contains\na usable ephemeral API token that can be used to authenticate browser clients\nfor the Realtime API.\n",
        "parameters": [],
        "request_body": {
          "description": "Create an ephemeral API key with the given session configuration.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/RealtimeTranscriptionSessionCreateRequest"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "Session created successfully.",
            "schema": {
              "$ref": "#/components/schemas/RealtimeTranscriptionSessionCreateResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Realtime"
        ],
        "examples": []
      }
    ],
    "Responses": [
      {
        "path": "/responses",
        "method": "POST",
        "operation_id": "createResponse",
        "summary": "Create a model response",
        "description": "Creates a model response. Provide [text](https://platform.openai.com/docs/guides/text) or\n[image](https://platform.openai.com/docs/guides/images) inputs to generate [text](https://platform.openai.com/docs/guides/text)\nor [JSON](https://platform.openai.com/docs/guides/structured-outputs) outputs. Have the model call\nyour own [custom code](https://platform.openai.com/docs/guides/function-calling) or use built-in\n[tools](https://platform.openai.com/docs/guides/tools) like [web search](https://platform.openai.com/docs/guides/tools-web-search)\nor [file search](https://platform.openai.com/docs/guides/tools-file-search) to use your own data\nas input for the model's response.\n",
        "parameters": [],
        "request_body": {
          "description": "",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/CreateResponse"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/Response"
            },
            "examples": {}
          }
        },
        "tags": [
          "Responses"
        ],
        "examples": []
      },
      {
        "path": "/responses/{response_id}",
        "method": "GET",
        "operation_id": "getResponse",
        "summary": "Get a model response",
        "description": "Retrieves a model response with the given ID.\n",
        "parameters": [
          {
            "name": "response_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the response to retrieve.",
            "example": null,
            "schema": {
              "type": "string",
              "example": "resp_677efb5139a88190b512bc3fef8e535d"
            }
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "type": "array[any]",
            "description": "Additional fields to include in the response. See the `include`\nparameter for Response creation above for more information.\n",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Includable"
              }
            }
          },
          {
            "name": "stream",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "If set to true, the model response data will be streamed to the client\nas it is generated using [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).\nSee the [Streaming section below](https://platform.openai.com/docs/api-reference/responses-streaming)\nfor more information.\n",
            "example": null,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "starting_after",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "The sequence number of the event after which to start streaming.\n",
            "example": null,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include_obfuscation",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "When true, stream obfuscation will be enabled. Stream obfuscation adds\nrandom characters to an `obfuscation` field on streaming delta events\nto normalize payload sizes as a mitigation to certain side-channel\nattacks. These obfuscation fields are included by default, but add a\nsmall amount of overhead to the data stream. You can set\n`include_obfuscation` to false to optimize for bandwidth if you trust\nthe network links between your application and the OpenAI API.\n",
            "example": null,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/Response"
            },
            "examples": {}
          }
        },
        "tags": [
          "Responses"
        ],
        "examples": []
      },
      {
        "path": "/responses/{response_id}",
        "method": "DELETE",
        "operation_id": "deleteResponse",
        "summary": "Delete a model response",
        "description": "Deletes a model response with the given ID.\n",
        "parameters": [
          {
            "name": "response_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the response to delete.",
            "example": null,
            "schema": {
              "type": "string",
              "example": "resp_677efb5139a88190b512bc3fef8e535d"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {},
            "examples": {}
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {}
          }
        },
        "tags": [
          "Responses"
        ],
        "examples": []
      },
      {
        "path": "/responses/{response_id}/cancel",
        "method": "POST",
        "operation_id": "cancelResponse",
        "summary": "Cancel a response",
        "description": "Cancels a model response with the given ID. Only responses created with\nthe `background` parameter set to `true` can be cancelled. \n[Learn more](https://platform.openai.com/docs/guides/background).\n",
        "parameters": [
          {
            "name": "response_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the response to cancel.",
            "example": null,
            "schema": {
              "type": "string",
              "example": "resp_677efb5139a88190b512bc3fef8e535d"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/Response"
            },
            "examples": {}
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {}
          }
        },
        "tags": [
          "Responses"
        ],
        "examples": []
      },
      {
        "path": "/responses/{response_id}/input_items",
        "method": "GET",
        "operation_id": "listInputItems",
        "summary": "List input items",
        "description": "Returns a list of input items for a given response.",
        "parameters": [
          {
            "name": "response_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the response to retrieve input items for.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "A limit on the number of objects to be returned. Limit can range between\n1 and 100, and the default is 20.\n",
            "example": null,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The order to return the input items in. Default is `desc`.\n- `asc`: Return the input items in ascending order.\n- `desc`: Return the input items in descending order.\n",
            "example": null,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "An item ID to list items after, used in pagination.\n",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "type": "array[any]",
            "description": "Additional fields to include in the response. See the `include`\nparameter for Response creation above for more information.\n",
            "example": null,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Includable"
              }
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/ResponseItemList"
            },
            "examples": {}
          }
        },
        "tags": [
          "Responses"
        ],
        "examples": []
      }
    ],
    "Uploads": [
      {
        "path": "/uploads",
        "method": "POST",
        "operation_id": "createUpload",
        "summary": "Create upload",
        "description": "Creates an intermediate [Upload](https://platform.openai.com/docs/api-reference/uploads/object) object\nthat you can add [Parts](https://platform.openai.com/docs/api-reference/uploads/part-object) to.\nCurrently, an Upload can accept at most 8 GB in total and expires after an\nhour after you create it.\n\nOnce you complete the Upload, we will create a\n[File](https://platform.openai.com/docs/api-reference/files/object) object that contains all the parts\nyou uploaded. This File is usable in the rest of our platform as a regular\nFile object.\n\nFor certain `purpose` values, the correct `mime_type` must be specified. \nPlease refer to documentation for the \n[supported MIME types for your use case](https://platform.openai.com/docs/assistants/tools/file-search#supported-files).\n\nFor guidance on the proper filename extensions for each purpose, please\nfollow the documentation on [creating a\nFile](https://platform.openai.com/docs/api-reference/files/create).\n",
        "parameters": [],
        "request_body": {
          "description": "",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/CreateUploadRequest"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/Upload"
            },
            "examples": {}
          }
        },
        "tags": [
          "Uploads"
        ],
        "examples": []
      },
      {
        "path": "/uploads/{upload_id}/cancel",
        "method": "POST",
        "operation_id": "cancelUpload",
        "summary": "Cancel upload",
        "description": "Cancels the Upload. No Parts may be added after an Upload is cancelled.\n",
        "parameters": [
          {
            "name": "upload_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the Upload.\n",
            "example": null,
            "schema": {
              "type": "string",
              "example": "upload_abc123"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/Upload"
            },
            "examples": {}
          }
        },
        "tags": [
          "Uploads"
        ],
        "examples": []
      },
      {
        "path": "/uploads/{upload_id}/complete",
        "method": "POST",
        "operation_id": "completeUpload",
        "summary": "Complete upload",
        "description": "Completes the [Upload](https://platform.openai.com/docs/api-reference/uploads/object). \n\nWithin the returned Upload object, there is a nested [File](https://platform.openai.com/docs/api-reference/files/object) object that is ready to use in the rest of the platform.\n\nYou can specify the order of the Parts by passing in an ordered list of the Part IDs.\n\nThe number of bytes uploaded upon completion must match the number of bytes initially specified when creating the Upload object. No Parts may be added after an Upload is completed.\n",
        "parameters": [
          {
            "name": "upload_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the Upload.\n",
            "example": null,
            "schema": {
              "type": "string",
              "example": "upload_abc123"
            }
          }
        ],
        "request_body": {
          "description": "",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/CompleteUploadRequest"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/Upload"
            },
            "examples": {}
          }
        },
        "tags": [
          "Uploads"
        ],
        "examples": []
      },
      {
        "path": "/uploads/{upload_id}/parts",
        "method": "POST",
        "operation_id": "addUploadPart",
        "summary": "Add upload part",
        "description": "Adds a [Part](https://platform.openai.com/docs/api-reference/uploads/part-object) to an [Upload](https://platform.openai.com/docs/api-reference/uploads/object) object. A Part represents a chunk of bytes from the file you are trying to upload. \n\nEach Part can be at most 64 MB, and you can add Parts until you hit the Upload maximum of 8 GB.\n\nIt is possible to add multiple Parts in parallel. You can decide the intended order of the Parts when you [complete the Upload](https://platform.openai.com/docs/api-reference/uploads/complete).\n",
        "parameters": [
          {
            "name": "upload_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the Upload.\n",
            "example": null,
            "schema": {
              "type": "string",
              "example": "upload_abc123"
            }
          }
        ],
        "request_body": {
          "description": "",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/AddUploadPartRequest"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/UploadPart"
            },
            "examples": {}
          }
        },
        "tags": [
          "Uploads"
        ],
        "examples": []
      }
    ],
    "Vector stores": [
      {
        "path": "/vector_stores",
        "method": "GET",
        "operation_id": "listVectorStores",
        "summary": "List vector stores",
        "description": "Returns a list of vector stores.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n",
            "example": null,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n",
            "example": null,
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/ListVectorStoresResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Vector stores"
        ],
        "examples": []
      },
      {
        "path": "/vector_stores",
        "method": "POST",
        "operation_id": "createVectorStore",
        "summary": "Create vector store",
        "description": "Create a vector store.",
        "parameters": [],
        "request_body": {
          "description": "",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/CreateVectorStoreRequest"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/VectorStoreObject"
            },
            "examples": {}
          }
        },
        "tags": [
          "Vector stores"
        ],
        "examples": []
      },
      {
        "path": "/vector_stores/{vector_store_id}",
        "method": "GET",
        "operation_id": "getVectorStore",
        "summary": "Retrieve vector store",
        "description": "Retrieves a vector store.",
        "parameters": [
          {
            "name": "vector_store_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the vector store to retrieve.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/VectorStoreObject"
            },
            "examples": {}
          }
        },
        "tags": [
          "Vector stores"
        ],
        "examples": []
      },
      {
        "path": "/vector_stores/{vector_store_id}",
        "method": "POST",
        "operation_id": "modifyVectorStore",
        "summary": "Modify vector store",
        "description": "Modifies a vector store.",
        "parameters": [
          {
            "name": "vector_store_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the vector store to modify.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": {
          "description": "",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/UpdateVectorStoreRequest"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/VectorStoreObject"
            },
            "examples": {}
          }
        },
        "tags": [
          "Vector stores"
        ],
        "examples": []
      },
      {
        "path": "/vector_stores/{vector_store_id}",
        "method": "DELETE",
        "operation_id": "deleteVectorStore",
        "summary": "Delete vector store",
        "description": "Delete a vector store.",
        "parameters": [
          {
            "name": "vector_store_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the vector store to delete.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/DeleteVectorStoreResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Vector stores"
        ],
        "examples": []
      },
      {
        "path": "/vector_stores/{vector_store_id}/file_batches",
        "method": "POST",
        "operation_id": "createVectorStoreFileBatch",
        "summary": "Create vector store file batch",
        "description": "Create a vector store file batch.",
        "parameters": [
          {
            "name": "vector_store_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the vector store for which to create a File Batch.\n",
            "example": null,
            "schema": {
              "type": "string",
              "example": "vs_abc123"
            }
          }
        ],
        "request_body": {
          "description": "",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/CreateVectorStoreFileBatchRequest"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/VectorStoreFileBatchObject"
            },
            "examples": {}
          }
        },
        "tags": [
          "Vector stores"
        ],
        "examples": []
      },
      {
        "path": "/vector_stores/{vector_store_id}/file_batches/{batch_id}",
        "method": "GET",
        "operation_id": "getVectorStoreFileBatch",
        "summary": "Retrieve vector store file batch",
        "description": "Retrieves a vector store file batch.",
        "parameters": [
          {
            "name": "vector_store_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the vector store that the file batch belongs to.",
            "example": null,
            "schema": {
              "type": "string",
              "example": "vs_abc123"
            }
          },
          {
            "name": "batch_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the file batch being retrieved.",
            "example": null,
            "schema": {
              "type": "string",
              "example": "vsfb_abc123"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/VectorStoreFileBatchObject"
            },
            "examples": {}
          }
        },
        "tags": [
          "Vector stores"
        ],
        "examples": []
      },
      {
        "path": "/vector_stores/{vector_store_id}/file_batches/{batch_id}/cancel",
        "method": "POST",
        "operation_id": "cancelVectorStoreFileBatch",
        "summary": "Cancel vector store file batch",
        "description": "Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible.",
        "parameters": [
          {
            "name": "vector_store_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the vector store that the file batch belongs to.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "batch_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the file batch to cancel.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/VectorStoreFileBatchObject"
            },
            "examples": {}
          }
        },
        "tags": [
          "Vector stores"
        ],
        "examples": []
      },
      {
        "path": "/vector_stores/{vector_store_id}/file_batches/{batch_id}/files",
        "method": "GET",
        "operation_id": "listFilesInVectorStoreBatch",
        "summary": "List vector store files in a batch",
        "description": "Returns a list of vector store files in a batch.",
        "parameters": [
          {
            "name": "vector_store_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the vector store that the files belong to.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "batch_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the file batch that the files belong to.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n",
            "example": null,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n",
            "example": null,
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`.",
            "example": null,
            "schema": {
              "type": "string",
              "enum": [
                "in_progress",
                "completed",
                "failed",
                "cancelled"
              ]
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/ListVectorStoreFilesResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Vector stores"
        ],
        "examples": []
      },
      {
        "path": "/vector_stores/{vector_store_id}/files",
        "method": "GET",
        "operation_id": "listVectorStoreFiles",
        "summary": "List vector store files",
        "description": "Returns a list of vector store files.",
        "parameters": [
          {
            "name": "vector_store_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the vector store that the files belong to.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n",
            "example": null,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n",
            "example": null,
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`.",
            "example": null,
            "schema": {
              "type": "string",
              "enum": [
                "in_progress",
                "completed",
                "failed",
                "cancelled"
              ]
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/ListVectorStoreFilesResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Vector stores"
        ],
        "examples": []
      },
      {
        "path": "/vector_stores/{vector_store_id}/files",
        "method": "POST",
        "operation_id": "createVectorStoreFile",
        "summary": "Create vector store file",
        "description": "Create a vector store file by attaching a [File](https://platform.openai.com/docs/api-reference/files) to a [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object).",
        "parameters": [
          {
            "name": "vector_store_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the vector store for which to create a File.\n",
            "example": null,
            "schema": {
              "type": "string",
              "example": "vs_abc123"
            }
          }
        ],
        "request_body": {
          "description": "",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/CreateVectorStoreFileRequest"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/VectorStoreFileObject"
            },
            "examples": {}
          }
        },
        "tags": [
          "Vector stores"
        ],
        "examples": []
      },
      {
        "path": "/vector_stores/{vector_store_id}/files/{file_id}",
        "method": "GET",
        "operation_id": "getVectorStoreFile",
        "summary": "Retrieve vector store file",
        "description": "Retrieves a vector store file.",
        "parameters": [
          {
            "name": "vector_store_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the vector store that the file belongs to.",
            "example": null,
            "schema": {
              "type": "string",
              "example": "vs_abc123"
            }
          },
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the file being retrieved.",
            "example": null,
            "schema": {
              "type": "string",
              "example": "file-abc123"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/VectorStoreFileObject"
            },
            "examples": {}
          }
        },
        "tags": [
          "Vector stores"
        ],
        "examples": []
      },
      {
        "path": "/vector_stores/{vector_store_id}/files/{file_id}",
        "method": "DELETE",
        "operation_id": "deleteVectorStoreFile",
        "summary": "Delete vector store file",
        "description": "Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted. To delete the file, use the [delete file](https://platform.openai.com/docs/api-reference/files/delete) endpoint.",
        "parameters": [
          {
            "name": "vector_store_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the vector store that the file belongs to.",
            "example": null,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the file to delete.",
            "example": null,
            "schema": {
              "type": "string"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/DeleteVectorStoreFileResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Vector stores"
        ],
        "examples": []
      },
      {
        "path": "/vector_stores/{vector_store_id}/files/{file_id}",
        "method": "POST",
        "operation_id": "updateVectorStoreFileAttributes",
        "summary": "Update vector store file attributes",
        "description": "Update attributes on a vector store file.",
        "parameters": [
          {
            "name": "vector_store_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the vector store the file belongs to.",
            "example": null,
            "schema": {
              "type": "string",
              "example": "vs_abc123"
            }
          },
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the file to update attributes.",
            "example": null,
            "schema": {
              "type": "string",
              "example": "file-abc123"
            }
          }
        ],
        "request_body": {
          "description": "",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/UpdateVectorStoreFileAttributesRequest"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/VectorStoreFileObject"
            },
            "examples": {}
          }
        },
        "tags": [
          "Vector stores"
        ],
        "examples": []
      },
      {
        "path": "/vector_stores/{vector_store_id}/files/{file_id}/content",
        "method": "GET",
        "operation_id": "retrieveVectorStoreFileContent",
        "summary": "Retrieve vector store file content",
        "description": "Retrieve the parsed contents of a vector store file.",
        "parameters": [
          {
            "name": "vector_store_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the vector store.",
            "example": null,
            "schema": {
              "type": "string",
              "example": "vs_abc123"
            }
          },
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the file within the vector store.",
            "example": null,
            "schema": {
              "type": "string",
              "example": "file-abc123"
            }
          }
        ],
        "request_body": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/VectorStoreFileContentResponse"
            },
            "examples": {}
          }
        },
        "tags": [
          "Vector stores"
        ],
        "examples": []
      },
      {
        "path": "/vector_stores/{vector_store_id}/search",
        "method": "POST",
        "operation_id": "searchVectorStore",
        "summary": "Search vector store",
        "description": "Search a vector store for relevant chunks based on a query and file attributes filter.",
        "parameters": [
          {
            "name": "vector_store_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the vector store to search.",
            "example": null,
            "schema": {
              "type": "string",
              "example": "vs_abc123"
            }
          }
        ],
        "request_body": {
          "description": "",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/VectorStoreSearchRequest"
          },
          "examples": {}
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/VectorStoreSearchResultsPage"
            },
            "examples": {}
          }
        },
        "tags": [
          "Vector stores"
        ],
        "examples": []
      }
    ]
  },
  "schemas": [
    {
      "name": "AddUploadPartRequest",
      "type": "object",
      "description": "",
      "properties": {
        "data": {
          "description": "The chunk of bytes for this Part.\n",
          "type": "string",
          "format": "binary"
        }
      },
      "required": [
        "data"
      ],
      "examples": []
    },
    {
      "name": "AdminApiKey",
      "type": "object",
      "description": "Represents an individual Admin API key in an org.",
      "properties": {
        "object": {
          "type": "string",
          "example": "organization.admin_api_key",
          "description": "The object type, which is always `organization.admin_api_key`",
          "x-stainless-const": true
        },
        "id": {
          "type": "string",
          "example": "key_abc",
          "description": "The identifier, which can be referenced in API endpoints"
        },
        "name": {
          "type": "string",
          "example": "Administration Key",
          "description": "The name of the API key"
        },
        "redacted_value": {
          "type": "string",
          "example": "sk-admin...def",
          "description": "The redacted value of the API key"
        },
        "value": {
          "type": "string",
          "example": "sk-admin-1234abcd",
          "description": "The value of the API key. Only shown on create."
        },
        "created_at": {
          "type": "integer",
          "format": "int64",
          "example": 1711471533,
          "description": "The Unix timestamp (in seconds) of when the API key was created"
        },
        "last_used_at": {
          "type": "integer",
          "format": "int64",
          "nullable": true,
          "example": 1711471534,
          "description": "The Unix timestamp (in seconds) of when the API key was last used"
        },
        "owner": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "example": "user",
              "description": "Always `user`"
            },
            "object": {
              "type": "string",
              "example": "organization.user",
              "description": "The object type, which is always organization.user"
            },
            "id": {
              "type": "string",
              "example": "sa_456",
              "description": "The identifier, which can be referenced in API endpoints"
            },
            "name": {
              "type": "string",
              "example": "My Service Account",
              "description": "The name of the user"
            },
            "created_at": {
              "type": "integer",
              "format": "int64",
              "example": 1711471533,
              "description": "The Unix timestamp (in seconds) of when the user was created"
            },
            "role": {
              "type": "string",
              "example": "owner",
              "description": "Always `owner`"
            }
          }
        }
      },
      "required": [
        "object",
        "redacted_value",
        "name",
        "created_at",
        "last_used_at",
        "id",
        "owner"
      ],
      "examples": []
    },
    {
      "name": "ApiKeyList",
      "type": "object",
      "description": "",
      "properties": {
        "object": {
          "type": "string",
          "example": "list"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/AdminApiKey"
          }
        },
        "has_more": {
          "type": "boolean",
          "example": false
        },
        "first_id": {
          "type": "string",
          "example": "key_abc"
        },
        "last_id": {
          "type": "string",
          "example": "key_xyz"
        }
      },
      "required": [],
      "examples": []
    },
    {
      "name": "AssistantObject",
      "type": "object",
      "description": "Represents an `assistant` that can call the model and use tools.",
      "properties": {
        "id": {
          "description": "The identifier, which can be referenced in API endpoints.",
          "type": "string"
        },
        "object": {
          "description": "The object type, which is always `assistant`.",
          "type": "string",
          "enum": [
            "assistant"
          ],
          "x-stainless-const": true
        },
        "created_at": {
          "description": "The Unix timestamp (in seconds) for when the assistant was created.",
          "type": "integer"
        },
        "name": {
          "description": "The name of the assistant. The maximum length is 256 characters.\n",
          "type": "string",
          "maxLength": 256,
          "nullable": true
        },
        "description": {
          "description": "The description of the assistant. The maximum length is 512 characters.\n",
          "type": "string",
          "maxLength": 512,
          "nullable": true
        },
        "model": {
          "description": "ID of the model to use. You can use the [List models](https://platform.openai.com/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](https://platform.openai.com/docs/models) for descriptions of them.\n",
          "type": "string"
        },
        "instructions": {
          "description": "The system instructions that the assistant uses. The maximum length is 256,000 characters.\n",
          "type": "string",
          "maxLength": 256000,
          "nullable": true
        },
        "tools": {
          "description": "A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.\n",
          "default": [],
          "type": "array",
          "maxItems": 128,
          "items": {
            "$ref": "#/components/schemas/AssistantTool"
          }
        },
        "tool_resources": {
          "type": "object",
          "description": "A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n",
          "properties": {
            "code_interpreter": {
              "type": "object",
              "properties": {
                "file_ids": {
                  "type": "array",
                  "description": "A list of [file](https://platform.openai.com/docs/api-reference/files) IDs made available to the `code_interpreter`` tool. There can be a maximum of 20 files associated with the tool.\n",
                  "default": [],
                  "maxItems": 20,
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "file_search": {
              "type": "object",
              "properties": {
                "vector_store_ids": {
                  "type": "array",
                  "description": "The ID of the [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.\n",
                  "maxItems": 1,
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "nullable": true
        },
        "metadata": {
          "$ref": "#/components/schemas/Metadata"
        },
        "temperature": {
          "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n",
          "type": "number",
          "minimum": 0,
          "maximum": 2,
          "default": 1,
          "example": 1,
          "nullable": true
        },
        "top_p": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "default": 1,
          "example": 1,
          "nullable": true,
          "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.\n"
        },
        "response_format": {
          "$ref": "#/components/schemas/AssistantsApiResponseFormatOption",
          "nullable": true
        }
      },
      "required": [
        "id",
        "object",
        "created_at",
        "name",
        "description",
        "model",
        "instructions",
        "tools",
        "metadata"
      ],
      "examples": []
    },
    {
      "name": "AssistantStreamEvent",
      "type": "object",
      "description": "Represents an event emitted when streaming a Run.\n\nEach event in a server-sent events stream has an `event` and `data` property:\n\n```\nevent: thread.created\ndata: {\"id\": \"thread_123\", \"object\": \"thread\", ...}\n```\n\nWe emit events whenever a new object is created, transitions to a new state, or is being\nstreamed in parts (deltas). For example, we emit `thread.run.created` when a new run\nis created, `thread.run.completed` when a run completes, and so on. When an Assistant chooses\nto create a message during a run, we emit a `thread.message.created event`, a\n`thread.message.in_progress` event, many `thread.message.delta` events, and finally a\n`thread.message.completed` event.\n\nWe may add additional events over time, so we recommend handling unknown events gracefully\nin your code. See the [Assistants API quickstart](https://platform.openai.com/docs/assistants/overview) to learn how to\nintegrate the Assistants API with streaming.\n",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "AssistantSupportedModels",
      "type": "string",
      "description": "",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "AssistantToolsCode",
      "type": "object",
      "description": "",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of tool being defined: `code_interpreter`",
          "enum": [
            "code_interpreter"
          ],
          "x-stainless-const": true
        }
      },
      "required": [
        "type"
      ],
      "examples": []
    },
    {
      "name": "AssistantToolsFileSearch",
      "type": "object",
      "description": "",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of tool being defined: `file_search`",
          "enum": [
            "file_search"
          ],
          "x-stainless-const": true
        },
        "file_search": {
          "type": "object",
          "description": "Overrides for the file search tool.",
          "properties": {
            "max_num_results": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50,
              "description": "The maximum number of results the file search tool should output. The default is 20 for `gpt-4*` models and 5 for `gpt-3.5-turbo`. This number should be between 1 and 50 inclusive.\n\nNote that the file search tool may output fewer than `max_num_results` results. See the [file search tool documentation](https://platform.openai.com/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n"
            },
            "ranking_options": {
              "$ref": "#/components/schemas/FileSearchRankingOptions"
            }
          }
        }
      },
      "required": [
        "type"
      ],
      "examples": []
    },
    {
      "name": "AssistantToolsFileSearchTypeOnly",
      "type": "object",
      "description": "",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of tool being defined: `file_search`",
          "enum": [
            "file_search"
          ],
          "x-stainless-const": true
        }
      },
      "required": [
        "type"
      ],
      "examples": []
    },
    {
      "name": "AssistantToolsFunction",
      "type": "object",
      "description": "",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of tool being defined: `function`",
          "enum": [
            "function"
          ],
          "x-stainless-const": true
        },
        "function": {
          "$ref": "#/components/schemas/FunctionObject"
        }
      },
      "required": [
        "type",
        "function"
      ],
      "examples": []
    },
    {
      "name": "AssistantsApiResponseFormatOption",
      "type": "object",
      "description": "Specifies the format that the model must output. Compatible with [GPT-4o](https://platform.openai.com/docs/models#gpt-4o), [GPT-4 Turbo](https://platform.openai.com/docs/models#gpt-4-turbo-and-gpt-4), and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\nSetting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](https://platform.openai.com/docs/guides/structured-outputs).\n\nSetting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the message the model generates is valid JSON.\n\n**Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.\n",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "AssistantsApiToolChoiceOption",
      "type": "object",
      "description": "Controls which (if any) tool is called by the model.\n`none` means the model will not call any tools and instead generates a message.\n`auto` is the default value and means the model can pick between generating a message or calling one or more tools.\n`required` means the model must call one or more tools before responding to the user.\nSpecifying a particular tool like `{\"type\": \"file_search\"}` or `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that tool.\n",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "AssistantsNamedToolChoice",
      "type": "object",
      "description": "Specifies a tool the model should use. Use to force the model to call a specific tool.",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "function",
            "code_interpreter",
            "file_search"
          ],
          "description": "The type of the tool. If type is `function`, the function name must be set"
        },
        "function": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the function to call."
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "required": [
        "type"
      ],
      "examples": []
    },
    {
      "name": "AudioResponseFormat",
      "type": "string",
      "description": "The format of the output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`. For `gpt-4o-transcribe` and `gpt-4o-mini-transcribe`, the only supported format is `json`.\n",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "AuditLog",
      "type": "object",
      "description": "A log of a user action or configuration change within this organization.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of this log."
        },
        "type": {
          "$ref": "#/components/schemas/AuditLogEventType"
        },
        "effective_at": {
          "type": "integer",
          "description": "The Unix timestamp (in seconds) of the event."
        },
        "project": {
          "type": "object",
          "description": "The project that the action was scoped to. Absent for actions not scoped to projects. Note that any admin actions taken via Admin API keys are associated with the default project.",
          "properties": {
            "id": {
              "type": "string",
              "description": "The project ID."
            },
            "name": {
              "type": "string",
              "description": "The project title."
            }
          }
        },
        "actor": {
          "$ref": "#/components/schemas/AuditLogActor"
        },
        "api_key.created": {
          "type": "object",
          "description": "The details for events with this `type`.",
          "properties": {
            "id": {
              "type": "string",
              "description": "The tracking ID of the API key."
            },
            "data": {
              "type": "object",
              "description": "The payload used to create the API key.",
              "properties": {
                "scopes": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "A list of scopes allowed for the API key, e.g. `[\"api.model.request\"]`"
                }
              }
            }
          }
        },
        "api_key.updated": {
          "type": "object",
          "description": "The details for events with this `type`.",
          "properties": {
            "id": {
              "type": "string",
              "description": "The tracking ID of the API key."
            },
            "changes_requested": {
              "type": "object",
              "description": "The payload used to update the API key.",
              "properties": {
                "scopes": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "A list of scopes allowed for the API key, e.g. `[\"api.model.request\"]`"
                }
              }
            }
          }
        },
        "api_key.deleted": {
          "type": "object",
          "description": "The details for events with this `type`.",
          "properties": {
            "id": {
              "type": "string",
              "description": "The tracking ID of the API key."
            }
          }
        },
        "checkpoint_permission.created": {
          "type": "object",
          "description": "The project and fine-tuned model checkpoint that the checkpoint permission was created for.",
          "properties": {
            "id": {
              "type": "string",
              "description": "The ID of the checkpoint permission."
            },
            "data": {
              "type": "object",
              "description": "The payload used to create the checkpoint permission.",
              "properties": {
                "project_id": {
                  "type": "string",
                  "description": "The ID of the project that the checkpoint permission was created for."
                },
                "fine_tuned_model_checkpoint": {
                  "type": "string",
                  "description": "The ID of the fine-tuned model checkpoint."
                }
              }
            }
          }
        },
        "checkpoint_permission.deleted": {
          "type": "object",
          "description": "The details for events with this `type`.",
          "properties": {
            "id": {
              "type": "string",
              "description": "The ID of the checkpoint permission."
            }
          }
        },
        "invite.sent": {
          "type": "object",
          "description": "The details for events with this `type`.",
          "properties": {
            "id": {
              "type": "string",
              "description": "The ID of the invite."
            },
            "data": {
              "type": "object",
              "description": "The payload used to create the invite.",
              "properties": {
                "email": {
                  "type": "string",
                  "description": "The email invited to the organization."
                },
                "role": {
                  "type": "string",
                  "description": "The role the email was invited to be. Is either `owner` or `member`."
                }
              }
            }
          }
        },
        "invite.accepted": {
          "type": "object",
          "description": "The details for events with this `type`.",
          "properties": {
            "id": {
              "type": "string",
              "description": "The ID of the invite."
            }
          }
        },
        "invite.deleted": {
          "type": "object",
          "description": "The details for events with this `type`.",
          "properties": {
            "id": {
              "type": "string",
              "description": "The ID of the invite."
            }
          }
        },
        "login.failed": {
          "type": "object",
          "description": "The details for events with this `type`.",
          "properties": {
            "error_code": {
              "type": "string",
              "description": "The error code of the failure."
            },
            "error_message": {
              "type": "string",
              "description": "The error message of the failure."
            }
          }
        },
        "logout.failed": {
          "type": "object",
          "description": "The details for events with this `type`.",
          "properties": {
            "error_code": {
              "type": "string",
              "description": "The error code of the failure."
            },
            "error_message": {
              "type": "string",
              "description": "The error message of the failure."
            }
          }
        },
        "organization.updated": {
          "type": "object",
          "description": "The details for events with this `type`.",
          "properties": {
            "id": {
              "type": "string",
              "description": "The organization ID."
            },
            "changes_requested": {
              "type": "object",
              "description": "The payload used to update the organization settings.",
              "properties": {
                "title": {
                  "type": "string",
                  "description": "The organization title."
                },
                "description": {
                  "type": "string",
                  "description": "The organization description."
                },
                "name": {
                  "type": "string",
                  "description": "The organization name."
                },
                "threads_ui_visibility": {
                  "type": "string",
                  "description": "Visibility of the threads page which shows messages created with the Assistants API and Playground. One of `ANY_ROLE`, `OWNERS`, or `NONE`."
                },
                "usage_dashboard_visibility": {
                  "type": "string",
                  "description": "Visibility of the usage dashboard which shows activity and costs for your organization. One of `ANY_ROLE` or `OWNERS`."
                },
                "api_call_logging": {
                  "type": "string",
                  "description": "How your organization logs data from supported API calls. One of `disabled`, `enabled_per_call`, `enabled_for_all_projects`, or `enabled_for_selected_projects`"
                },
                "api_call_logging_project_ids": {
                  "type": "string",
                  "description": "The list of project ids if api_call_logging is set to `enabled_for_selected_projects`"
                }
              }
            }
          }
        },
        "project.created": {
          "type": "object",
          "description": "The details for events with this `type`.",
          "properties": {
            "id": {
              "type": "string",
              "description": "The project ID."
            },
            "data": {
              "type": "object",
              "description": "The payload used to create the project.",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The project name."
                },
                "title": {
                  "type": "string",
                  "description": "The title of the project as seen on the dashboard."
                }
              }
            }
          }
        },
        "project.updated": {
          "type": "object",
          "description": "The details for events with this `type`.",
          "properties": {
            "id": {
              "type": "string",
              "description": "The project ID."
            },
            "changes_requested": {
              "type": "object",
              "description": "The payload used to update the project.",
              "properties": {
                "title": {
                  "type": "string",
                  "description": "The title of the project as seen on the dashboard."
                }
              }
            }
          }
        },
        "project.archived": {
          "type": "object",
          "description": "The details for events with this `type`.",
          "properties": {
            "id": {
              "type": "string",
              "description": "The project ID."
            }
          }
        },
        "rate_limit.updated": {
          "type": "object",
          "description": "The details for events with this `type`.",
          "properties": {
            "id": {
              "type": "string",
              "description": "The rate limit ID"
            },
            "changes_requested": {
              "type": "object",
              "description": "The payload used to update the rate limits.",
              "properties": {
                "max_requests_per_1_minute": {
                  "type": "integer",
                  "description": "The maximum requests per minute."
                },
                "max_tokens_per_1_minute": {
                  "type": "integer",
                  "description": "The maximum tokens per minute."
                },
                "max_images_per_1_minute": {
                  "type": "integer",
                  "description": "The maximum images per minute. Only relevant for certain models."
                },
                "max_audio_megabytes_per_1_minute": {
                  "type": "integer",
                  "description": "The maximum audio megabytes per minute. Only relevant for certain models."
                },
                "max_requests_per_1_day": {
                  "type": "integer",
                  "description": "The maximum requests per day. Only relevant for certain models."
                },
                "batch_1_day_max_input_tokens": {
                  "type": "integer",
                  "description": "The maximum batch input tokens per day. Only relevant for certain models."
                }
              }
            }
          }
        },
        "rate_limit.deleted": {
          "type": "object",
          "description": "The details for events with this `type`.",
          "properties": {
            "id": {
              "type": "string",
              "description": "The rate limit ID"
            }
          }
        },
        "service_account.created": {
          "type": "object",
          "description": "The details for events with this `type`.",
          "properties": {
            "id": {
              "type": "string",
              "description": "The service account ID."
            },
            "data": {
              "type": "object",
              "description": "The payload used to create the service account.",
              "properties": {
                "role": {
                  "type": "string",
                  "description": "The role of the service account. Is either `owner` or `member`."
                }
              }
            }
          }
        },
        "service_account.updated": {
          "type": "object",
          "description": "The details for events with this `type`.",
          "properties": {
            "id": {
              "type": "string",
              "description": "The service account ID."
            },
            "changes_requested": {
              "type": "object",
              "description": "The payload used to updated the service account.",
              "properties": {
                "role": {
                  "type": "string",
                  "description": "The role of the service account. Is either `owner` or `member`."
                }
              }
            }
          }
        },
        "service_account.deleted": {
          "type": "object",
          "description": "The details for events with this `type`.",
          "properties": {
            "id": {
              "type": "string",
              "description": "The service account ID."
            }
          }
        },
        "user.added": {
          "type": "object",
          "description": "The details for events with this `type`.",
          "properties": {
            "id": {
              "type": "string",
              "description": "The user ID."
            },
            "data": {
              "type": "object",
              "description": "The payload used to add the user to the project.",
              "properties": {
                "role": {
                  "type": "string",
                  "description": "The role of the user. Is either `owner` or `member`."
                }
              }
            }
          }
        },
        "user.updated": {
          "type": "object",
          "description": "The details for events with this `type`.",
          "properties": {
            "id": {
              "type": "string",
              "description": "The project ID."
            },
            "changes_requested": {
              "type": "object",
              "description": "The payload used to update the user.",
              "properties": {
                "role": {
                  "type": "string",
                  "description": "The role of the user. Is either `owner` or `member`."
                }
              }
            }
          }
        },
        "user.deleted": {
          "type": "object",
          "description": "The details for events with this `type`.",
          "properties": {
            "id": {
              "type": "string",
              "description": "The user ID."
            }
          }
        },
        "certificate.created": {
          "type": "object",
          "description": "The details for events with this `type`.",
          "properties": {
            "id": {
              "type": "string",
              "description": "The certificate ID."
            },
            "name": {
              "type": "string",
              "description": "The name of the certificate."
            }
          }
        },
        "certificate.updated": {
          "type": "object",
          "description": "The details for events with this `type`.",
          "properties": {
            "id": {
              "type": "string",
              "description": "The certificate ID."
            },
            "name": {
              "type": "string",
              "description": "The name of the certificate."
            }
          }
        },
        "certificate.deleted": {
          "type": "object",
          "description": "The details for events with this `type`.",
          "properties": {
            "id": {
              "type": "string",
              "description": "The certificate ID."
            },
            "name": {
              "type": "string",
              "description": "The name of the certificate."
            },
            "certificate": {
              "type": "string",
              "description": "The certificate content in PEM format."
            }
          }
        },
        "certificates.activated": {
          "type": "object",
          "description": "The details for events with this `type`.",
          "properties": {
            "certificates": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The certificate ID."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the certificate."
                  }
                }
              }
            }
          }
        },
        "certificates.deactivated": {
          "type": "object",
          "description": "The details for events with this `type`.",
          "properties": {
            "certificates": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The certificate ID."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the certificate."
                  }
                }
              }
            }
          }
        }
      },
      "required": [
        "id",
        "type",
        "effective_at",
        "actor"
      ],
      "examples": []
    },
    {
      "name": "AuditLogActor",
      "type": "object",
      "description": "The actor who performed the audit logged action.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of actor. Is either `session` or `api_key`.",
          "enum": [
            "session",
            "api_key"
          ]
        },
        "session": {
          "$ref": "#/components/schemas/AuditLogActorSession"
        },
        "api_key": {
          "$ref": "#/components/schemas/AuditLogActorApiKey"
        }
      },
      "required": [],
      "examples": []
    },
    {
      "name": "AuditLogActorApiKey",
      "type": "object",
      "description": "The API Key used to perform the audit logged action.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The tracking id of the API key."
        },
        "type": {
          "type": "string",
          "description": "The type of API key. Can be either `user` or `service_account`.",
          "enum": [
            "user",
            "service_account"
          ]
        },
        "user": {
          "$ref": "#/components/schemas/AuditLogActorUser"
        },
        "service_account": {
          "$ref": "#/components/schemas/AuditLogActorServiceAccount"
        }
      },
      "required": [],
      "examples": []
    },
    {
      "name": "AuditLogActorServiceAccount",
      "type": "object",
      "description": "The service account that performed the audit logged action.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The service account id."
        }
      },
      "required": [],
      "examples": []
    },
    {
      "name": "AuditLogActorSession",
      "type": "object",
      "description": "The session in which the audit logged action was performed.",
      "properties": {
        "user": {
          "$ref": "#/components/schemas/AuditLogActorUser"
        },
        "ip_address": {
          "type": "string",
          "description": "The IP address from which the action was performed."
        }
      },
      "required": [],
      "examples": []
    },
    {
      "name": "AuditLogActorUser",
      "type": "object",
      "description": "The user who performed the audit logged action.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The user id."
        },
        "email": {
          "type": "string",
          "description": "The user email."
        }
      },
      "required": [],
      "examples": []
    },
    {
      "name": "AuditLogEventType",
      "type": "string",
      "description": "The event type.",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "AutoChunkingStrategyRequestParam",
      "type": "object",
      "description": "The default strategy. This strategy currently uses a `max_chunk_size_tokens` of `800` and `chunk_overlap_tokens` of `400`.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Always `auto`.",
          "enum": [
            "auto"
          ],
          "x-stainless-const": true
        }
      },
      "required": [
        "type"
      ],
      "examples": []
    },
    {
      "name": "Batch",
      "type": "object",
      "description": "",
      "properties": {
        "id": {
          "type": "string"
        },
        "object": {
          "type": "string",
          "enum": [
            "batch"
          ],
          "description": "The object type, which is always `batch`.",
          "x-stainless-const": true
        },
        "endpoint": {
          "type": "string",
          "description": "The OpenAI API endpoint used by the batch."
        },
        "errors": {
          "type": "object",
          "properties": {
            "object": {
              "type": "string",
              "description": "The object type, which is always `list`."
            },
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/BatchError"
              }
            }
          }
        },
        "input_file_id": {
          "type": "string",
          "description": "The ID of the input file for the batch."
        },
        "completion_window": {
          "type": "string",
          "description": "The time frame within which the batch should be processed."
        },
        "status": {
          "type": "string",
          "description": "The current status of the batch.",
          "enum": [
            "validating",
            "failed",
            "in_progress",
            "finalizing",
            "completed",
            "expired",
            "cancelling",
            "cancelled"
          ]
        },
        "output_file_id": {
          "type": "string",
          "description": "The ID of the file containing the outputs of successfully executed requests."
        },
        "error_file_id": {
          "type": "string",
          "description": "The ID of the file containing the outputs of requests with errors."
        },
        "created_at": {
          "type": "integer",
          "description": "The Unix timestamp (in seconds) for when the batch was created."
        },
        "in_progress_at": {
          "type": "integer",
          "description": "The Unix timestamp (in seconds) for when the batch started processing."
        },
        "expires_at": {
          "type": "integer",
          "description": "The Unix timestamp (in seconds) for when the batch will expire."
        },
        "finalizing_at": {
          "type": "integer",
          "description": "The Unix timestamp (in seconds) for when the batch started finalizing."
        },
        "completed_at": {
          "type": "integer",
          "description": "The Unix timestamp (in seconds) for when the batch was completed."
        },
        "failed_at": {
          "type": "integer",
          "description": "The Unix timestamp (in seconds) for when the batch failed."
        },
        "expired_at": {
          "type": "integer",
          "description": "The Unix timestamp (in seconds) for when the batch expired."
        },
        "cancelling_at": {
          "type": "integer",
          "description": "The Unix timestamp (in seconds) for when the batch started cancelling."
        },
        "cancelled_at": {
          "type": "integer",
          "description": "The Unix timestamp (in seconds) for when the batch was cancelled."
        },
        "request_counts": {
          "$ref": "#/components/schemas/BatchRequestCounts"
        },
        "metadata": {
          "$ref": "#/components/schemas/Metadata"
        }
      },
      "required": [
        "id",
        "object",
        "endpoint",
        "input_file_id",
        "completion_window",
        "status",
        "created_at"
      ],
      "examples": []
    },
    {
      "name": "BatchFileExpirationAfter",
      "type": "object",
      "description": "The expiration policy for the output and/or error file that are generated for a batch.",
      "properties": {
        "anchor": {
          "description": "Anchor timestamp after which the expiration policy applies. Supported anchors: `created_at`. Note that the anchor is the file creation time, not the time the batch is created.",
          "type": "string",
          "enum": [
            "created_at"
          ],
          "x-stainless-const": true
        },
        "seconds": {
          "description": "The number of seconds after the anchor time that the file will expire. Must be between 3600 (1 hour) and 2592000 (30 days).",
          "type": "integer",
          "minimum": 3600,
          "maximum": 2592000
        }
      },
      "required": [
        "anchor",
        "seconds"
      ],
      "examples": []
    },
    {
      "name": "BatchRequestInput",
      "type": "object",
      "description": "The per-line object of the batch input file",
      "properties": {
        "custom_id": {
          "type": "string",
          "description": "A developer-provided per-request id that will be used to match outputs to inputs. Must be unique for each request in a batch."
        },
        "method": {
          "type": "string",
          "enum": [
            "POST"
          ],
          "description": "The HTTP method to be used for the request. Currently only `POST` is supported.",
          "x-stainless-const": true
        },
        "url": {
          "type": "string",
          "description": "The OpenAI API relative URL to be used for the request. Currently `/v1/chat/completions`, `/v1/embeddings`, and `/v1/completions` are supported."
        }
      },
      "required": [],
      "examples": []
    },
    {
      "name": "BatchRequestOutput",
      "type": "object",
      "description": "The per-line object of the batch output and error files",
      "properties": {
        "id": {
          "type": "string"
        },
        "custom_id": {
          "type": "string",
          "description": "A developer-provided per-request id that will be used to match outputs to inputs."
        },
        "response": {
          "type": "object",
          "nullable": true,
          "properties": {
            "status_code": {
              "type": "integer",
              "description": "The HTTP status code of the response"
            },
            "request_id": {
              "type": "string",
              "description": "An unique identifier for the OpenAI API request. Please include this request ID when contacting support."
            },
            "body": {
              "type": "object",
              "x-oaiTypeLabel": "map",
              "description": "The JSON body of the response"
            }
          }
        },
        "error": {
          "type": "object",
          "nullable": true,
          "description": "For requests that failed with a non-HTTP error, this will contain more information on the cause of the failure.",
          "properties": {
            "code": {
              "type": "string",
              "description": "A machine-readable error code."
            },
            "message": {
              "type": "string",
              "description": "A human-readable error message."
            }
          }
        }
      },
      "required": [],
      "examples": []
    },
    {
      "name": "Certificate",
      "type": "object",
      "description": "Represents an individual `certificate` uploaded to the organization.",
      "properties": {
        "object": {
          "type": "string",
          "enum": [
            "certificate",
            "organization.certificate",
            "organization.project.certificate"
          ],
          "description": "The object type.\n\n- If creating, updating, or getting a specific certificate, the object type is `certificate`.\n- If listing, activating, or deactivating certificates for the organization, the object type is `organization.certificate`.\n- If listing, activating, or deactivating certificates for a project, the object type is `organization.project.certificate`.\n",
          "x-stainless-const": true
        },
        "id": {
          "type": "string",
          "description": "The identifier, which can be referenced in API endpoints"
        },
        "name": {
          "type": "string",
          "description": "The name of the certificate."
        },
        "created_at": {
          "type": "integer",
          "description": "The Unix timestamp (in seconds) of when the certificate was uploaded."
        },
        "certificate_details": {
          "type": "object",
          "properties": {
            "valid_at": {
              "type": "integer",
              "description": "The Unix timestamp (in seconds) of when the certificate becomes valid."
            },
            "expires_at": {
              "type": "integer",
              "description": "The Unix timestamp (in seconds) of when the certificate expires."
            },
            "content": {
              "type": "string",
              "description": "The content of the certificate in PEM format."
            }
          }
        },
        "active": {
          "type": "boolean",
          "description": "Whether the certificate is currently active at the specified scope. Not returned when getting details for a specific certificate."
        }
      },
      "required": [
        "object",
        "id",
        "name",
        "created_at",
        "certificate_details"
      ],
      "examples": []
    },
    {
      "name": "ChatCompletionAllowedTools",
      "type": "object",
      "description": "Constrains the tools available to the model to a pre-defined set.\n",
      "properties": {
        "mode": {
          "type": "string",
          "enum": [
            "auto",
            "required"
          ],
          "description": "Constrains the tools available to the model to a pre-defined set.\n\n`auto` allows the model to pick from among the allowed tools and generate a\nmessage.\n\n`required` requires the model to call one or more of the allowed tools.\n"
        },
        "tools": {
          "type": "array",
          "description": "A list of tool definitions that the model should be allowed to call.\n\nFor the Chat Completions API, the list of tool definitions might look like:\n```json\n[\n  { \"type\": \"function\", \"function\": { \"name\": \"get_weather\" } },\n  { \"type\": \"function\", \"function\": { \"name\": \"get_time\" } }\n]\n```\n",
          "items": {
            "type": "object",
            "x-oaiExpandable": false,
            "description": "A tool definition that the model should be allowed to call.\n",
            "additionalProperties": true
          }
        }
      },
      "required": [
        "mode",
        "tools"
      ],
      "examples": []
    },
    {
      "name": "ChatCompletionAllowedToolsChoice",
      "type": "object",
      "description": "Constrains the tools available to the model to a pre-defined set.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "allowed_tools"
          ],
          "description": "Allowed tool configuration type. Always `allowed_tools`.",
          "x-stainless-const": true
        },
        "allowed_tools": {
          "$ref": "#/components/schemas/ChatCompletionAllowedTools"
        }
      },
      "required": [
        "type",
        "allowed_tools"
      ],
      "examples": []
    },
    {
      "name": "ChatCompletionDeleted",
      "type": "object",
      "description": "",
      "properties": {
        "object": {
          "type": "string",
          "description": "The type of object being deleted.",
          "enum": [
            "chat.completion.deleted"
          ],
          "x-stainless-const": true
        },
        "id": {
          "type": "string",
          "description": "The ID of the chat completion that was deleted."
        },
        "deleted": {
          "type": "boolean",
          "description": "Whether the chat completion was deleted."
        }
      },
      "required": [
        "object",
        "id",
        "deleted"
      ],
      "examples": []
    },
    {
      "name": "ChatCompletionFunctionCallOption",
      "type": "object",
      "description": "Specifying a particular function via `{\"name\": \"my_function\"}` forces the model to call that function.\n",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the function to call."
        }
      },
      "required": [
        "name"
      ],
      "examples": []
    },
    {
      "name": "ChatCompletionFunctions",
      "type": "object",
      "description": "",
      "properties": {
        "description": {
          "type": "string",
          "description": "A description of what the function does, used by the model to choose when and how to call the function."
        },
        "name": {
          "type": "string",
          "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."
        },
        "parameters": {
          "$ref": "#/components/schemas/FunctionParameters"
        }
      },
      "required": [
        "name"
      ],
      "examples": []
    },
    {
      "name": "ChatCompletionList",
      "type": "object",
      "description": "An object representing a list of Chat Completions.\n",
      "properties": {
        "object": {
          "type": "string",
          "enum": [
            "list"
          ],
          "default": "list",
          "description": "The type of this object. It is always set to \"list\".\n",
          "x-stainless-const": true
        },
        "data": {
          "type": "array",
          "description": "An array of chat completion objects.\n",
          "items": {
            "$ref": "#/components/schemas/CreateChatCompletionResponse"
          }
        },
        "first_id": {
          "type": "string",
          "description": "The identifier of the first chat completion in the data array."
        },
        "last_id": {
          "type": "string",
          "description": "The identifier of the last chat completion in the data array."
        },
        "has_more": {
          "type": "boolean",
          "description": "Indicates whether there are more Chat Completions available."
        }
      },
      "required": [
        "object",
        "data",
        "first_id",
        "last_id",
        "has_more"
      ],
      "examples": []
    },
    {
      "name": "ChatCompletionMessageCustomToolCall",
      "type": "object",
      "description": "A call to a custom tool created by the model.\n",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the tool call."
        },
        "type": {
          "type": "string",
          "enum": [
            "custom"
          ],
          "description": "The type of the tool. Always `custom`.",
          "x-stainless-const": true
        },
        "custom": {
          "type": "object",
          "description": "The custom tool that the model called.",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the custom tool to call."
            },
            "input": {
              "type": "string",
              "description": "The input for the custom tool call generated by the model."
            }
          },
          "required": [
            "name",
            "input"
          ]
        }
      },
      "required": [
        "id",
        "type",
        "custom"
      ],
      "examples": []
    },
    {
      "name": "ChatCompletionMessageList",
      "type": "object",
      "description": "An object representing a list of chat completion messages.\n",
      "properties": {
        "object": {
          "type": "string",
          "enum": [
            "list"
          ],
          "default": "list",
          "description": "The type of this object. It is always set to \"list\".\n",
          "x-stainless-const": true
        },
        "data": {
          "type": "array",
          "description": "An array of chat completion message objects.\n",
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChatCompletionResponseMessage"
              },
              {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The identifier of the chat message."
                  },
                  "content_parts": {
                    "type": "array",
                    "nullable": true,
                    "description": "If a content parts array was provided, this is an array of `text` and `image_url` parts. \nOtherwise, null.\n",
                    "items": {
                      "anyOf": [
                        {
                          "$ref": "#/components/schemas/ChatCompletionRequestMessageContentPartText"
                        },
                        {
                          "$ref": "#/components/schemas/ChatCompletionRequestMessageContentPartImage"
                        }
                      ]
                    }
                  }
                }
              }
            ]
          }
        },
        "first_id": {
          "type": "string",
          "description": "The identifier of the first chat message in the data array."
        },
        "last_id": {
          "type": "string",
          "description": "The identifier of the last chat message in the data array."
        },
        "has_more": {
          "type": "boolean",
          "description": "Indicates whether there are more chat messages available."
        }
      },
      "required": [
        "object",
        "data",
        "first_id",
        "last_id",
        "has_more"
      ],
      "examples": []
    },
    {
      "name": "ChatCompletionMessageToolCall",
      "type": "object",
      "description": "A call to a function tool created by the model.\n",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the tool call."
        },
        "type": {
          "type": "string",
          "enum": [
            "function"
          ],
          "description": "The type of the tool. Currently, only `function` is supported.",
          "x-stainless-const": true
        },
        "function": {
          "type": "object",
          "description": "The function that the model called.",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the function to call."
            },
            "arguments": {
              "type": "string",
              "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."
            }
          },
          "required": [
            "name",
            "arguments"
          ]
        }
      },
      "required": [
        "id",
        "type",
        "function"
      ],
      "examples": []
    },
    {
      "name": "ChatCompletionMessageToolCallChunk",
      "type": "object",
      "description": "",
      "properties": {
        "index": {
          "type": "integer"
        },
        "id": {
          "type": "string",
          "description": "The ID of the tool call."
        },
        "type": {
          "type": "string",
          "enum": [
            "function"
          ],
          "description": "The type of the tool. Currently, only `function` is supported.",
          "x-stainless-const": true
        },
        "function": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the function to call."
            },
            "arguments": {
              "type": "string",
              "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."
            }
          }
        }
      },
      "required": [
        "index"
      ],
      "examples": []
    },
    {
      "name": "ChatCompletionMessageToolCalls",
      "type": "array",
      "description": "The tool calls generated by the model, such as function calls.",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "ChatCompletionModalities",
      "type": "array",
      "description": "Output types that you would like the model to generate for this request.\nMost models are capable of generating text, which is the default:\n\n`[\"text\"]`\n\nThe `gpt-4o-audio-preview` model can also be used to [generate audio](https://platform.openai.com/docs/guides/audio). To\nrequest that this model generate both text and audio responses, you can\nuse:\n\n`[\"text\", \"audio\"]`\n",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "ChatCompletionNamedToolChoice",
      "type": "object",
      "description": "Specifies a tool the model should use. Use to force the model to call a specific function.",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "function"
          ],
          "description": "For function calling, the type is always `function`.",
          "x-stainless-const": true
        },
        "function": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the function to call."
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "required": [
        "type",
        "function"
      ],
      "examples": []
    },
    {
      "name": "ChatCompletionNamedToolChoiceCustom",
      "type": "object",
      "description": "Specifies a tool the model should use. Use to force the model to call a specific custom tool.",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "custom"
          ],
          "description": "For custom tool calling, the type is always `custom`.",
          "x-stainless-const": true
        },
        "custom": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the custom tool to call."
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "required": [
        "type",
        "custom"
      ],
      "examples": []
    },
    {
      "name": "ChatCompletionRequestAssistantMessage",
      "type": "object",
      "description": "Messages sent by the model in response to user messages.\n",
      "properties": {
        "content": {
          "nullable": true,
          "description": "The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified.\n",
          "anyOf": [
            {
              "type": "string",
              "description": "The contents of the assistant message.",
              "title": "Text content"
            },
            {
              "type": "array",
              "description": "An array of content parts with a defined type. Can be one or more of type `text`, or exactly one of type `refusal`.",
              "title": "Array of content parts",
              "items": {
                "$ref": "#/components/schemas/ChatCompletionRequestAssistantMessageContentPart"
              },
              "minItems": 1
            }
          ]
        },
        "refusal": {
          "nullable": true,
          "type": "string",
          "description": "The refusal message by the assistant."
        },
        "role": {
          "type": "string",
          "enum": [
            "assistant"
          ],
          "description": "The role of the messages author, in this case `assistant`.",
          "x-stainless-const": true
        },
        "name": {
          "type": "string",
          "description": "An optional name for the participant. Provides the model information to differentiate between participants of the same role."
        },
        "audio": {
          "type": "object",
          "nullable": true,
          "description": "Data about a previous audio response from the model. \n[Learn more](https://platform.openai.com/docs/guides/audio).\n",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier for a previous audio response from the model.\n"
            }
          }
        },
        "tool_calls": {
          "$ref": "#/components/schemas/ChatCompletionMessageToolCalls"
        },
        "function_call": {
          "type": "object",
          "deprecated": true,
          "description": "Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.",
          "nullable": true,
          "properties": {
            "arguments": {
              "type": "string",
              "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."
            },
            "name": {
              "type": "string",
              "description": "The name of the function to call."
            }
          },
          "required": [
            "arguments",
            "name"
          ]
        }
      },
      "required": [
        "role"
      ],
      "examples": []
    },
    {
      "name": "ChatCompletionRequestAssistantMessageContentPart",
      "type": "object",
      "description": "",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "ChatCompletionRequestDeveloperMessage",
      "type": "object",
      "description": "Developer-provided instructions that the model should follow, regardless of\nmessages sent by the user. With o1 models and newer, `developer` messages\nreplace the previous `system` messages.\n",
      "properties": {
        "content": {
          "description": "The contents of the developer message.",
          "anyOf": [
            {
              "type": "string",
              "description": "The contents of the developer message.",
              "title": "Text content"
            },
            {
              "type": "array",
              "description": "An array of content parts with a defined type. For developer messages, only type `text` is supported.",
              "title": "Array of content parts",
              "items": {
                "$ref": "#/components/schemas/ChatCompletionRequestMessageContentPartText"
              },
              "minItems": 1
            }
          ]
        },
        "role": {
          "type": "string",
          "enum": [
            "developer"
          ],
          "description": "The role of the messages author, in this case `developer`.",
          "x-stainless-const": true
        },
        "name": {
          "type": "string",
          "description": "An optional name for the participant. Provides the model information to differentiate between participants of the same role."
        }
      },
      "required": [
        "content",
        "role"
      ],
      "examples": []
    },
    {
      "name": "ChatCompletionRequestFunctionMessage",
      "type": "object",
      "description": "",
      "properties": {
        "role": {
          "type": "string",
          "enum": [
            "function"
          ],
          "description": "The role of the messages author, in this case `function`.",
          "x-stainless-const": true
        },
        "content": {
          "nullable": true,
          "type": "string",
          "description": "The contents of the function message."
        },
        "name": {
          "type": "string",
          "description": "The name of the function to call."
        }
      },
      "required": [
        "role",
        "content",
        "name"
      ],
      "examples": []
    },
    {
      "name": "ChatCompletionRequestMessage",
      "type": "object",
      "description": "",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "ChatCompletionRequestMessageContentPartAudio",
      "type": "object",
      "description": "Learn about [audio inputs](https://platform.openai.com/docs/guides/audio).\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "input_audio"
          ],
          "description": "The type of the content part. Always `input_audio`.",
          "x-stainless-const": true
        },
        "input_audio": {
          "type": "object",
          "properties": {
            "data": {
              "type": "string",
              "description": "Base64 encoded audio data."
            },
            "format": {
              "type": "string",
              "enum": [
                "wav",
                "mp3"
              ],
              "description": "The format of the encoded audio data. Currently supports \"wav\" and \"mp3\".\n"
            }
          },
          "required": [
            "data",
            "format"
          ]
        }
      },
      "required": [
        "type",
        "input_audio"
      ],
      "examples": []
    },
    {
      "name": "ChatCompletionRequestMessageContentPartFile",
      "type": "object",
      "description": "Learn about [file inputs](https://platform.openai.com/docs/guides/text) for text generation.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "file"
          ],
          "description": "The type of the content part. Always `file`.",
          "x-stainless-const": true
        },
        "file": {
          "type": "object",
          "properties": {
            "filename": {
              "type": "string",
              "description": "The name of the file, used when passing the file to the model as a \nstring.\n"
            },
            "file_data": {
              "type": "string",
              "description": "The base64 encoded file data, used when passing the file to the model \nas a string.\n"
            },
            "file_id": {
              "type": "string",
              "description": "The ID of an uploaded file to use as input.\n"
            }
          },
          "x-stainless-naming": {
            "java": {
              "type_name": "FileObject"
            },
            "kotlin": {
              "type_name": "FileObject"
            }
          }
        }
      },
      "required": [
        "type",
        "file"
      ],
      "examples": []
    },
    {
      "name": "ChatCompletionRequestMessageContentPartImage",
      "type": "object",
      "description": "Learn about [image inputs](https://platform.openai.com/docs/guides/vision).\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "image_url"
          ],
          "description": "The type of the content part.",
          "x-stainless-const": true
        },
        "image_url": {
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "description": "Either a URL of the image or the base64 encoded image data.",
              "format": "uri"
            },
            "detail": {
              "type": "string",
              "description": "Specifies the detail level of the image. Learn more in the [Vision guide](https://platform.openai.com/docs/guides/vision#low-or-high-fidelity-image-understanding).",
              "enum": [
                "auto",
                "low",
                "high"
              ],
              "default": "auto"
            }
          },
          "required": [
            "url"
          ]
        }
      },
      "required": [
        "type",
        "image_url"
      ],
      "examples": []
    },
    {
      "name": "ChatCompletionRequestMessageContentPartRefusal",
      "type": "object",
      "description": "",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "refusal"
          ],
          "description": "The type of the content part.",
          "x-stainless-const": true
        },
        "refusal": {
          "type": "string",
          "description": "The refusal message generated by the model."
        }
      },
      "required": [
        "type",
        "refusal"
      ],
      "examples": []
    },
    {
      "name": "ChatCompletionRequestMessageContentPartText",
      "type": "object",
      "description": "Learn about [text inputs](https://platform.openai.com/docs/guides/text-generation).\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "text"
          ],
          "description": "The type of the content part.",
          "x-stainless-const": true
        },
        "text": {
          "type": "string",
          "description": "The text content."
        }
      },
      "required": [
        "type",
        "text"
      ],
      "examples": []
    },
    {
      "name": "ChatCompletionRequestSystemMessage",
      "type": "object",
      "description": "Developer-provided instructions that the model should follow, regardless of\nmessages sent by the user. With o1 models and newer, use `developer` messages\nfor this purpose instead.\n",
      "properties": {
        "content": {
          "description": "The contents of the system message.",
          "anyOf": [
            {
              "type": "string",
              "description": "The contents of the system message.",
              "title": "Text content"
            },
            {
              "type": "array",
              "description": "An array of content parts with a defined type. For system messages, only type `text` is supported.",
              "title": "Array of content parts",
              "items": {
                "$ref": "#/components/schemas/ChatCompletionRequestSystemMessageContentPart"
              },
              "minItems": 1
            }
          ]
        },
        "role": {
          "type": "string",
          "enum": [
            "system"
          ],
          "description": "The role of the messages author, in this case `system`.",
          "x-stainless-const": true
        },
        "name": {
          "type": "string",
          "description": "An optional name for the participant. Provides the model information to differentiate between participants of the same role."
        }
      },
      "required": [
        "content",
        "role"
      ],
      "examples": []
    },
    {
      "name": "ChatCompletionRequestSystemMessageContentPart",
      "type": "object",
      "description": "",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "ChatCompletionRequestToolMessage",
      "type": "object",
      "description": "",
      "properties": {
        "role": {
          "type": "string",
          "enum": [
            "tool"
          ],
          "description": "The role of the messages author, in this case `tool`.",
          "x-stainless-const": true
        },
        "content": {
          "description": "The contents of the tool message.",
          "anyOf": [
            {
              "type": "string",
              "description": "The contents of the tool message.",
              "title": "Text content"
            },
            {
              "type": "array",
              "description": "An array of content parts with a defined type. For tool messages, only type `text` is supported.",
              "title": "Array of content parts",
              "items": {
                "$ref": "#/components/schemas/ChatCompletionRequestToolMessageContentPart"
              },
              "minItems": 1
            }
          ]
        },
        "tool_call_id": {
          "type": "string",
          "description": "Tool call that this message is responding to."
        }
      },
      "required": [
        "role",
        "content",
        "tool_call_id"
      ],
      "examples": []
    },
    {
      "name": "ChatCompletionRequestToolMessageContentPart",
      "type": "object",
      "description": "",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "ChatCompletionRequestUserMessage",
      "type": "object",
      "description": "Messages sent by an end user, containing prompts or additional context\ninformation.\n",
      "properties": {
        "content": {
          "description": "The contents of the user message.\n",
          "anyOf": [
            {
              "type": "string",
              "description": "The text contents of the message.",
              "title": "Text content"
            },
            {
              "type": "array",
              "description": "An array of content parts with a defined type. Supported options differ based on the [model](https://platform.openai.com/docs/models) being used to generate the response. Can contain text, image, or audio inputs.",
              "title": "Array of content parts",
              "items": {
                "$ref": "#/components/schemas/ChatCompletionRequestUserMessageContentPart"
              },
              "minItems": 1
            }
          ]
        },
        "role": {
          "type": "string",
          "enum": [
            "user"
          ],
          "description": "The role of the messages author, in this case `user`.",
          "x-stainless-const": true
        },
        "name": {
          "type": "string",
          "description": "An optional name for the participant. Provides the model information to differentiate between participants of the same role."
        }
      },
      "required": [
        "content",
        "role"
      ],
      "examples": []
    },
    {
      "name": "ChatCompletionRequestUserMessageContentPart",
      "type": "object",
      "description": "",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "ChatCompletionResponseMessage",
      "type": "object",
      "description": "A chat completion message generated by the model.",
      "properties": {
        "content": {
          "type": "string",
          "description": "The contents of the message.",
          "nullable": true
        },
        "refusal": {
          "type": "string",
          "description": "The refusal message generated by the model.",
          "nullable": true
        },
        "tool_calls": {
          "$ref": "#/components/schemas/ChatCompletionMessageToolCalls"
        },
        "annotations": {
          "type": "array",
          "description": "Annotations for the message, when applicable, as when using the\n[web search tool](https://platform.openai.com/docs/guides/tools-web-search?api-mode=chat).\n",
          "items": {
            "type": "object",
            "description": "A URL citation when using web search.\n",
            "required": [
              "type",
              "url_citation"
            ],
            "properties": {
              "type": {
                "type": "string",
                "description": "The type of the URL citation. Always `url_citation`.",
                "enum": [
                  "url_citation"
                ],
                "x-stainless-const": true
              },
              "url_citation": {
                "type": "object",
                "description": "A URL citation when using web search.",
                "required": [
                  "end_index",
                  "start_index",
                  "url",
                  "title"
                ],
                "properties": {
                  "end_index": {
                    "type": "integer",
                    "description": "The index of the last character of the URL citation in the message."
                  },
                  "start_index": {
                    "type": "integer",
                    "description": "The index of the first character of the URL citation in the message."
                  },
                  "url": {
                    "type": "string",
                    "description": "The URL of the web resource."
                  },
                  "title": {
                    "type": "string",
                    "description": "The title of the web resource."
                  }
                }
              }
            }
          }
        },
        "role": {
          "type": "string",
          "enum": [
            "assistant"
          ],
          "description": "The role of the author of this message.",
          "x-stainless-const": true
        },
        "function_call": {
          "type": "object",
          "deprecated": true,
          "description": "Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.",
          "properties": {
            "arguments": {
              "type": "string",
              "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."
            },
            "name": {
              "type": "string",
              "description": "The name of the function to call."
            }
          },
          "required": [
            "name",
            "arguments"
          ]
        },
        "audio": {
          "type": "object",
          "nullable": true,
          "description": "If the audio output modality is requested, this object contains data\nabout the audio response from the model. [Learn more](https://platform.openai.com/docs/guides/audio).\n",
          "required": [
            "id",
            "expires_at",
            "data",
            "transcript"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier for this audio response."
            },
            "expires_at": {
              "type": "integer",
              "description": "The Unix timestamp (in seconds) for when this audio response will\nno longer be accessible on the server for use in multi-turn\nconversations.\n"
            },
            "data": {
              "type": "string",
              "description": "Base64 encoded audio bytes generated by the model, in the format\nspecified in the request.\n"
            },
            "transcript": {
              "type": "string",
              "description": "Transcript of the audio generated by the model."
            }
          }
        }
      },
      "required": [
        "role",
        "content",
        "refusal"
      ],
      "examples": []
    },
    {
      "name": "ChatCompletionRole",
      "type": "string",
      "description": "The role of the author of a message",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "ChatCompletionStreamOptions",
      "type": "object",
      "description": "Options for streaming response. Only set this when you set `stream: true`.\n",
      "properties": {
        "include_usage": {
          "type": "boolean",
          "description": "If set, an additional chunk will be streamed before the `data: [DONE]`\nmessage. The `usage` field on this chunk shows the token usage statistics\nfor the entire request, and the `choices` field will always be an empty\narray.\n\nAll other chunks will also include a `usage` field, but with a null\nvalue. **NOTE:** If the stream is interrupted, you may not receive the\nfinal usage chunk which contains the total token usage for the request.\n"
        },
        "include_obfuscation": {
          "type": "boolean",
          "description": "When true, stream obfuscation will be enabled. Stream obfuscation adds\nrandom characters to an `obfuscation` field on streaming delta events to\nnormalize payload sizes as a mitigation to certain side-channel attacks.\nThese obfuscation fields are included by default, but add a small amount\nof overhead to the data stream. You can set `include_obfuscation` to\nfalse to optimize for bandwidth if you trust the network links between\nyour application and the OpenAI API.\n"
        }
      },
      "required": [],
      "examples": []
    },
    {
      "name": "ChatCompletionStreamResponseDelta",
      "type": "object",
      "description": "A chat completion delta generated by streamed model responses.",
      "properties": {
        "content": {
          "type": "string",
          "description": "The contents of the chunk message.",
          "nullable": true
        },
        "function_call": {
          "deprecated": true,
          "type": "object",
          "description": "Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.",
          "properties": {
            "arguments": {
              "type": "string",
              "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."
            },
            "name": {
              "type": "string",
              "description": "The name of the function to call."
            }
          }
        },
        "tool_calls": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/ChatCompletionMessageToolCallChunk"
          }
        },
        "role": {
          "type": "string",
          "enum": [
            "developer",
            "system",
            "user",
            "assistant",
            "tool"
          ],
          "description": "The role of the author of this message."
        },
        "refusal": {
          "type": "string",
          "description": "The refusal message generated by the model.",
          "nullable": true
        }
      },
      "required": [],
      "examples": []
    },
    {
      "name": "ChatCompletionTokenLogprob",
      "type": "object",
      "description": "",
      "properties": {
        "token": {
          "description": "The token.",
          "type": "string"
        },
        "logprob": {
          "description": "The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.",
          "type": "number"
        },
        "bytes": {
          "description": "A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.",
          "type": "array",
          "items": {
            "type": "integer"
          },
          "nullable": true
        },
        "top_logprobs": {
          "description": "List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "token": {
                "description": "The token.",
                "type": "string"
              },
              "logprob": {
                "description": "The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.",
                "type": "number"
              },
              "bytes": {
                "description": "A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.",
                "type": "array",
                "items": {
                  "type": "integer"
                },
                "nullable": true
              }
            },
            "required": [
              "token",
              "logprob",
              "bytes"
            ]
          }
        }
      },
      "required": [
        "token",
        "logprob",
        "bytes",
        "top_logprobs"
      ],
      "examples": []
    },
    {
      "name": "ChatCompletionTool",
      "type": "object",
      "description": "A function tool that can be used to generate a response.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "function"
          ],
          "description": "The type of the tool. Currently, only `function` is supported.",
          "x-stainless-const": true
        },
        "function": {
          "$ref": "#/components/schemas/FunctionObject"
        }
      },
      "required": [
        "type",
        "function"
      ],
      "examples": []
    },
    {
      "name": "ChatCompletionToolChoiceOption",
      "type": "object",
      "description": "Controls which (if any) tool is called by the model.\n`none` means the model will not call any tool and instead generates a message.\n`auto` means the model can pick between generating a message or calling one or more tools.\n`required` means the model must call one or more tools.\nSpecifying a particular tool via `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that tool.\n\n`none` is the default when no tools are present. `auto` is the default if tools are present.\n",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "ChunkingStrategyRequestParam",
      "type": "object",
      "description": "The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy. Only applicable if `file_ids` is non-empty.",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "Click",
      "type": "object",
      "description": "A click action.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "click"
          ],
          "default": "click",
          "description": "Specifies the event type. For a click action, this property is \nalways set to `click`.\n",
          "x-stainless-const": true
        },
        "button": {
          "type": "string",
          "enum": [
            "left",
            "right",
            "wheel",
            "back",
            "forward"
          ],
          "description": "Indicates which mouse button was pressed during the click. One of `left`, `right`, `wheel`, `back`, or `forward`.\n"
        },
        "x": {
          "type": "integer",
          "description": "The x-coordinate where the click occurred.\n"
        },
        "y": {
          "type": "integer",
          "description": "The y-coordinate where the click occurred.\n"
        }
      },
      "required": [
        "type",
        "button",
        "x",
        "y"
      ],
      "examples": []
    },
    {
      "name": "CodeInterpreterFileOutput",
      "type": "object",
      "description": "The output of a code interpreter tool call that is a file.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "files"
          ],
          "description": "The type of the code interpreter file output. Always `files`.\n",
          "x-stainless-const": true
        },
        "files": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "mime_type": {
                "type": "string",
                "description": "The MIME type of the file.\n"
              },
              "file_id": {
                "type": "string",
                "description": "The ID of the file.\n"
              }
            },
            "required": [
              "mime_type",
              "file_id"
            ]
          }
        }
      },
      "required": [
        "type",
        "files"
      ],
      "examples": []
    },
    {
      "name": "CodeInterpreterOutputImage",
      "type": "object",
      "description": "The image output from the code interpreter.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "image"
          ],
          "default": "image",
          "x-stainless-const": true,
          "description": "The type of the output. Always 'image'."
        },
        "url": {
          "type": "string",
          "description": "The URL of the image output from the code interpreter."
        }
      },
      "required": [
        "type",
        "url"
      ],
      "examples": []
    },
    {
      "name": "CodeInterpreterOutputLogs",
      "type": "object",
      "description": "The logs output from the code interpreter.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "logs"
          ],
          "default": "logs",
          "x-stainless-const": true,
          "description": "The type of the output. Always 'logs'."
        },
        "logs": {
          "type": "string",
          "description": "The logs output from the code interpreter."
        }
      },
      "required": [
        "type",
        "logs"
      ],
      "examples": []
    },
    {
      "name": "CodeInterpreterTextOutput",
      "type": "object",
      "description": "The output of a code interpreter tool call that is text.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "logs"
          ],
          "description": "The type of the code interpreter text output. Always `logs`.\n",
          "x-stainless-const": true
        },
        "logs": {
          "type": "string",
          "description": "The logs of the code interpreter tool call.\n"
        }
      },
      "required": [
        "type",
        "logs"
      ],
      "examples": []
    },
    {
      "name": "CodeInterpreterTool",
      "type": "object",
      "description": "A tool that runs Python code to help generate a response to a prompt.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "code_interpreter"
          ],
          "description": "The type of the code interpreter tool. Always `code_interpreter`.\n",
          "x-stainless-const": true
        },
        "container": {
          "description": "The code interpreter container. Can be a container ID or an object that\nspecifies uploaded file IDs to make available to your code.\n",
          "anyOf": [
            {
              "type": "string",
              "description": "The container ID."
            },
            {
              "$ref": "#/components/schemas/CodeInterpreterToolAuto"
            }
          ]
        }
      },
      "required": [
        "type",
        "container"
      ],
      "examples": []
    },
    {
      "name": "CodeInterpreterToolAuto",
      "type": "object",
      "description": "Configuration for a code interpreter container. Optionally specify the IDs\nof the files to run the code on.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "auto"
          ],
          "description": "Always `auto`.",
          "x-stainless-const": true
        },
        "file_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An optional list of uploaded files to make available to your code.\n"
        }
      },
      "required": [
        "type"
      ],
      "examples": []
    },
    {
      "name": "CodeInterpreterToolCall",
      "type": "object",
      "description": "A tool call to run code.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "code_interpreter_call"
          ],
          "default": "code_interpreter_call",
          "x-stainless-const": true,
          "description": "The type of the code interpreter tool call. Always `code_interpreter_call`.\n"
        },
        "id": {
          "type": "string",
          "description": "The unique ID of the code interpreter tool call.\n"
        },
        "status": {
          "type": "string",
          "enum": [
            "in_progress",
            "completed",
            "incomplete",
            "interpreting",
            "failed"
          ],
          "description": "The status of the code interpreter tool call. Valid values are `in_progress`, `completed`, `incomplete`, `interpreting`, and `failed`.\n"
        },
        "container_id": {
          "type": "string",
          "description": "The ID of the container used to run the code.\n"
        },
        "code": {
          "type": "string",
          "nullable": true,
          "description": "The code to run, or null if not available.\n"
        },
        "outputs": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodeInterpreterOutputLogs"
              },
              {
                "$ref": "#/components/schemas/CodeInterpreterOutputImage"
              }
            ],
            "discriminator": {
              "propertyName": "type"
            }
          },
          "discriminator": {
            "propertyName": "type"
          },
          "nullable": true,
          "description": "The outputs generated by the code interpreter, such as logs or images. \nCan be null if no outputs are available.\n"
        }
      },
      "required": [
        "type",
        "id",
        "status",
        "container_id",
        "code",
        "outputs"
      ],
      "examples": []
    },
    {
      "name": "ComparisonFilter",
      "type": "object",
      "description": "A filter used to compare a specified attribute key to a given value using a defined comparison operation.\n",
      "properties": {
        "type": {
          "type": "string",
          "default": "eq",
          "enum": [
            "eq",
            "ne",
            "gt",
            "gte",
            "lt",
            "lte"
          ],
          "description": "Specifies the comparison operator: `eq`, `ne`, `gt`, `gte`, `lt`, `lte`.\n- `eq`: equals\n- `ne`: not equal\n- `gt`: greater than\n- `gte`: greater than or equal\n- `lt`: less than\n- `lte`: less than or equal\n"
        },
        "key": {
          "type": "string",
          "description": "The key to compare against the value."
        },
        "value": {
          "description": "The value to compare against the attribute key; supports string, number, or boolean types.",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "number"
            },
            {
              "type": "boolean"
            }
          ]
        }
      },
      "required": [
        "type",
        "key",
        "value"
      ],
      "examples": []
    },
    {
      "name": "CompleteUploadRequest",
      "type": "object",
      "description": "",
      "properties": {
        "part_ids": {
          "type": "array",
          "description": "The ordered list of Part IDs.\n",
          "items": {
            "type": "string"
          }
        },
        "md5": {
          "description": "The optional md5 checksum for the file contents to verify if the bytes uploaded matches what you expect.\n",
          "type": "string"
        }
      },
      "required": [
        "part_ids"
      ],
      "examples": []
    },
    {
      "name": "CompletionUsage",
      "type": "object",
      "description": "Usage statistics for the completion request.",
      "properties": {
        "completion_tokens": {
          "type": "integer",
          "default": 0,
          "description": "Number of tokens in the generated completion."
        },
        "prompt_tokens": {
          "type": "integer",
          "default": 0,
          "description": "Number of tokens in the prompt."
        },
        "total_tokens": {
          "type": "integer",
          "default": 0,
          "description": "Total number of tokens used in the request (prompt + completion)."
        },
        "completion_tokens_details": {
          "type": "object",
          "description": "Breakdown of tokens used in a completion.",
          "properties": {
            "accepted_prediction_tokens": {
              "type": "integer",
              "default": 0,
              "description": "When using Predicted Outputs, the number of tokens in the\nprediction that appeared in the completion.\n"
            },
            "audio_tokens": {
              "type": "integer",
              "default": 0,
              "description": "Audio input tokens generated by the model."
            },
            "reasoning_tokens": {
              "type": "integer",
              "default": 0,
              "description": "Tokens generated by the model for reasoning."
            },
            "rejected_prediction_tokens": {
              "type": "integer",
              "default": 0,
              "description": "When using Predicted Outputs, the number of tokens in the\nprediction that did not appear in the completion. However, like\nreasoning tokens, these tokens are still counted in the total\ncompletion tokens for purposes of billing, output, and context window\nlimits.\n"
            }
          }
        },
        "prompt_tokens_details": {
          "type": "object",
          "description": "Breakdown of tokens used in the prompt.",
          "properties": {
            "audio_tokens": {
              "type": "integer",
              "default": 0,
              "description": "Audio input tokens present in the prompt."
            },
            "cached_tokens": {
              "type": "integer",
              "default": 0,
              "description": "Cached tokens present in the prompt."
            }
          }
        }
      },
      "required": [
        "prompt_tokens",
        "completion_tokens",
        "total_tokens"
      ],
      "examples": []
    },
    {
      "name": "CompoundFilter",
      "type": "object",
      "description": "Combine multiple filters using `and` or `or`.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of operation: `and` or `or`.",
          "enum": [
            "and",
            "or"
          ]
        },
        "filters": {
          "type": "array",
          "description": "Array of filters to combine. Items can be `ComparisonFilter` or `CompoundFilter`.",
          "items": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ComparisonFilter"
              },
              {
                "$recursiveRef": "#"
              }
            ]
          }
        }
      },
      "required": [
        "type",
        "filters"
      ],
      "examples": []
    },
    {
      "name": "ComputerAction",
      "type": "object",
      "description": "",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "ComputerScreenshotImage",
      "type": "object",
      "description": "A computer screenshot image used with the computer use tool.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "computer_screenshot"
          ],
          "default": "computer_screenshot",
          "description": "Specifies the event type. For a computer screenshot, this property is \nalways set to `computer_screenshot`.\n",
          "x-stainless-const": true
        },
        "image_url": {
          "type": "string",
          "description": "The URL of the screenshot image."
        },
        "file_id": {
          "type": "string",
          "description": "The identifier of an uploaded file that contains the screenshot."
        }
      },
      "required": [
        "type"
      ],
      "examples": []
    },
    {
      "name": "ComputerToolCall",
      "type": "object",
      "description": "A tool call to a computer use tool. See the \n[computer use guide](https://platform.openai.com/docs/guides/tools-computer-use) for more information.\n",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the computer call. Always `computer_call`.",
          "enum": [
            "computer_call"
          ],
          "default": "computer_call"
        },
        "id": {
          "type": "string",
          "description": "The unique ID of the computer call."
        },
        "call_id": {
          "type": "string",
          "description": "An identifier used when responding to the tool call with output.\n"
        },
        "action": {
          "$ref": "#/components/schemas/ComputerAction"
        },
        "pending_safety_checks": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/ComputerToolCallSafetyCheck"
          },
          "description": "The pending safety checks for the computer call.\n"
        },
        "status": {
          "type": "string",
          "description": "The status of the item. One of `in_progress`, `completed`, or\n`incomplete`. Populated when items are returned via API.\n",
          "enum": [
            "in_progress",
            "completed",
            "incomplete"
          ]
        }
      },
      "required": [
        "type",
        "id",
        "action",
        "call_id",
        "pending_safety_checks",
        "status"
      ],
      "examples": []
    },
    {
      "name": "ComputerToolCallOutput",
      "type": "object",
      "description": "The output of a computer tool call.\n",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the computer tool call output. Always `computer_call_output`.\n",
          "enum": [
            "computer_call_output"
          ],
          "default": "computer_call_output",
          "x-stainless-const": true
        },
        "id": {
          "type": "string",
          "description": "The ID of the computer tool call output.\n"
        },
        "call_id": {
          "type": "string",
          "description": "The ID of the computer tool call that produced the output.\n"
        },
        "acknowledged_safety_checks": {
          "type": "array",
          "description": "The safety checks reported by the API that have been acknowledged by the \ndeveloper.\n",
          "items": {
            "$ref": "#/components/schemas/ComputerToolCallSafetyCheck"
          }
        },
        "output": {
          "$ref": "#/components/schemas/ComputerScreenshotImage"
        },
        "status": {
          "type": "string",
          "description": "The status of the message input. One of `in_progress`, `completed`, or\n`incomplete`. Populated when input items are returned via API.\n",
          "enum": [
            "in_progress",
            "completed",
            "incomplete"
          ]
        }
      },
      "required": [
        "type",
        "call_id",
        "output"
      ],
      "examples": []
    },
    {
      "name": "ComputerToolCallOutputResource",
      "type": "object",
      "description": "",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "ComputerToolCallSafetyCheck",
      "type": "object",
      "description": "A pending safety check for the computer call.\n",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the pending safety check."
        },
        "code": {
          "type": "string",
          "description": "The type of the pending safety check."
        },
        "message": {
          "type": "string",
          "description": "Details about the pending safety check."
        }
      },
      "required": [
        "id",
        "code",
        "message"
      ],
      "examples": []
    },
    {
      "name": "ContainerFileListResource",
      "type": "object",
      "description": "",
      "properties": {
        "object": {
          "description": "The type of object returned, must be 'list'.",
          "const": "list"
        },
        "data": {
          "type": "array",
          "description": "A list of container files.",
          "items": {
            "$ref": "#/components/schemas/ContainerFileResource"
          }
        },
        "first_id": {
          "type": "string",
          "description": "The ID of the first file in the list."
        },
        "last_id": {
          "type": "string",
          "description": "The ID of the last file in the list."
        },
        "has_more": {
          "type": "boolean",
          "description": "Whether there are more files available."
        }
      },
      "required": [
        "object",
        "data",
        "first_id",
        "last_id",
        "has_more"
      ],
      "examples": []
    },
    {
      "name": "ContainerFileResource",
      "type": "object",
      "description": "",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the file."
        },
        "object": {
          "type": "string",
          "description": "The type of this object (`container.file`).",
          "const": "container.file"
        },
        "container_id": {
          "type": "string",
          "description": "The container this file belongs to."
        },
        "created_at": {
          "type": "integer",
          "description": "Unix timestamp (in seconds) when the file was created."
        },
        "bytes": {
          "type": "integer",
          "description": "Size of the file in bytes."
        },
        "path": {
          "type": "string",
          "description": "Path of the file in the container."
        },
        "source": {
          "type": "string",
          "description": "Source of the file (e.g., `user`, `assistant`)."
        }
      },
      "required": [
        "id",
        "object",
        "created_at",
        "bytes",
        "container_id",
        "path",
        "source"
      ],
      "examples": []
    },
    {
      "name": "ContainerListResource",
      "type": "object",
      "description": "",
      "properties": {
        "object": {
          "description": "The type of object returned, must be 'list'.",
          "const": "list"
        },
        "data": {
          "type": "array",
          "description": "A list of containers.",
          "items": {
            "$ref": "#/components/schemas/ContainerResource"
          }
        },
        "first_id": {
          "type": "string",
          "description": "The ID of the first container in the list."
        },
        "last_id": {
          "type": "string",
          "description": "The ID of the last container in the list."
        },
        "has_more": {
          "type": "boolean",
          "description": "Whether there are more containers available."
        }
      },
      "required": [
        "object",
        "data",
        "first_id",
        "last_id",
        "has_more"
      ],
      "examples": []
    },
    {
      "name": "ContainerResource",
      "type": "object",
      "description": "",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the container."
        },
        "object": {
          "type": "string",
          "description": "The type of this object."
        },
        "name": {
          "type": "string",
          "description": "Name of the container."
        },
        "created_at": {
          "type": "integer",
          "description": "Unix timestamp (in seconds) when the container was created."
        },
        "status": {
          "type": "string",
          "description": "Status of the container (e.g., active, deleted)."
        },
        "expires_after": {
          "type": "object",
          "description": "The container will expire after this time period.\nThe anchor is the reference point for the expiration.\nThe minutes is the number of minutes after the anchor before the container expires.\n",
          "properties": {
            "anchor": {
              "type": "string",
              "description": "The reference point for the expiration.",
              "enum": [
                "last_active_at"
              ]
            },
            "minutes": {
              "type": "integer",
              "description": "The number of minutes after the anchor before the container expires."
            }
          }
        }
      },
      "required": [
        "id",
        "object",
        "name",
        "created_at",
        "status",
        "id",
        "name",
        "created_at",
        "status"
      ],
      "examples": []
    },
    {
      "name": "Content",
      "type": "object",
      "description": "Multi-modal input and output contents.\n",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "Conversation",
      "type": "object",
      "description": "",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "ConversationItem",
      "type": "object",
      "description": "A single item within a conversation. The set of possible types are the same as the `output` type of a [Response object](https://platform.openai.com/docs/api-reference/responses/object#responses/object-output).",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "ConversationItemList",
      "type": "object",
      "description": "A list of Conversation items.",
      "properties": {
        "object": {
          "description": "The type of object returned, must be `list`.",
          "x-stainless-const": true,
          "const": "list"
        },
        "data": {
          "type": "array",
          "description": "A list of conversation items.",
          "items": {
            "$ref": "#/components/schemas/ConversationItem"
          }
        },
        "has_more": {
          "type": "boolean",
          "description": "Whether there are more items available."
        },
        "first_id": {
          "type": "string",
          "description": "The ID of the first item in the list."
        },
        "last_id": {
          "type": "string",
          "description": "The ID of the last item in the list."
        }
      },
      "required": [
        "object",
        "data",
        "has_more",
        "first_id",
        "last_id"
      ],
      "examples": []
    },
    {
      "name": "Coordinate",
      "type": "object",
      "description": "An x/y coordinate pair, e.g. `{ x: 100, y: 200 }`.\n",
      "properties": {
        "x": {
          "type": "integer",
          "description": "The x-coordinate.\n"
        },
        "y": {
          "type": "integer",
          "description": "The y-coordinate.\n"
        }
      },
      "required": [
        "x",
        "y"
      ],
      "examples": []
    },
    {
      "name": "CostsResult",
      "type": "object",
      "description": "The aggregated costs details of the specific time bucket.",
      "properties": {
        "object": {
          "type": "string",
          "enum": [
            "organization.costs.result"
          ],
          "x-stainless-const": true
        },
        "amount": {
          "type": "object",
          "description": "The monetary value in its associated currency.",
          "properties": {
            "value": {
              "type": "number",
              "description": "The numeric value of the cost."
            },
            "currency": {
              "type": "string",
              "description": "Lowercase ISO-4217 currency e.g. \"usd\""
            }
          }
        },
        "line_item": {
          "type": "string",
          "nullable": true,
          "description": "When `group_by=line_item`, this field provides the line item of the grouped costs result."
        },
        "project_id": {
          "type": "string",
          "nullable": true,
          "description": "When `group_by=project_id`, this field provides the project ID of the grouped costs result."
        }
      },
      "required": [
        "object"
      ],
      "examples": []
    },
    {
      "name": "CreateAssistantRequest",
      "type": "object",
      "description": "",
      "properties": {
        "model": {
          "description": "ID of the model to use. You can use the [List models](https://platform.openai.com/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](https://platform.openai.com/docs/models) for descriptions of them.\n",
          "example": "gpt-4o",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/components/schemas/AssistantSupportedModels"
            }
          ],
          "x-oaiTypeLabel": "string"
        },
        "name": {
          "description": "The name of the assistant. The maximum length is 256 characters.\n",
          "type": "string",
          "nullable": true,
          "maxLength": 256
        },
        "description": {
          "description": "The description of the assistant. The maximum length is 512 characters.\n",
          "type": "string",
          "nullable": true,
          "maxLength": 512
        },
        "instructions": {
          "description": "The system instructions that the assistant uses. The maximum length is 256,000 characters.\n",
          "type": "string",
          "nullable": true,
          "maxLength": 256000
        },
        "reasoning_effort": {
          "$ref": "#/components/schemas/ReasoningEffort"
        },
        "tools": {
          "description": "A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.\n",
          "default": [],
          "type": "array",
          "maxItems": 128,
          "items": {
            "$ref": "#/components/schemas/AssistantTool"
          }
        },
        "tool_resources": {
          "type": "object",
          "description": "A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n",
          "properties": {
            "code_interpreter": {
              "type": "object",
              "properties": {
                "file_ids": {
                  "type": "array",
                  "description": "A list of [file](https://platform.openai.com/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.\n",
                  "default": [],
                  "maxItems": 20,
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "file_search": {
              "type": "object",
              "properties": {
                "vector_store_ids": {
                  "type": "array",
                  "description": "The [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.\n",
                  "maxItems": 1,
                  "items": {
                    "type": "string"
                  }
                },
                "vector_stores": {
                  "type": "array",
                  "description": "A helper to create a [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object) with file_ids and attach it to this assistant. There can be a maximum of 1 vector store attached to the assistant.\n",
                  "maxItems": 1,
                  "items": {
                    "type": "object",
                    "properties": {
                      "file_ids": {
                        "type": "array",
                        "description": "A list of [file](https://platform.openai.com/docs/api-reference/files) IDs to add to the vector store. There can be a maximum of 10000 files in a vector store.\n",
                        "maxItems": 10000,
                        "items": {
                          "type": "string"
                        }
                      },
                      "chunking_strategy": {
                        "type": "object",
                        "description": "The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.",
                        "anyOf": [
                          {
                            "type": "object",
                            "title": "Auto Chunking Strategy",
                            "description": "The default strategy. This strategy currently uses a `max_chunk_size_tokens` of `800` and `chunk_overlap_tokens` of `400`.",
                            "additionalProperties": false,
                            "properties": {
                              "type": {
                                "type": "string",
                                "description": "Always `auto`.",
                                "enum": [
                                  "auto"
                                ],
                                "x-stainless-const": true
                              }
                            },
                            "required": [
                              "type"
                            ]
                          },
                          {
                            "type": "object",
                            "title": "Static Chunking Strategy",
                            "additionalProperties": false,
                            "properties": {
                              "type": {
                                "type": "string",
                                "description": "Always `static`.",
                                "enum": [
                                  "static"
                                ],
                                "x-stainless-const": true
                              },
                              "static": {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "max_chunk_size_tokens": {
                                    "type": "integer",
                                    "minimum": 100,
                                    "maximum": 4096,
                                    "description": "The maximum number of tokens in each chunk. The default value is `800`. The minimum value is `100` and the maximum value is `4096`."
                                  },
                                  "chunk_overlap_tokens": {
                                    "type": "integer",
                                    "description": "The number of tokens that overlap between chunks. The default value is `400`.\n\nNote that the overlap must not exceed half of `max_chunk_size_tokens`.\n"
                                  }
                                },
                                "required": [
                                  "max_chunk_size_tokens",
                                  "chunk_overlap_tokens"
                                ]
                              }
                            },
                            "required": [
                              "type",
                              "static"
                            ],
                            "x-stainless-naming": {
                              "java": {
                                "type_name": "StaticObject"
                              },
                              "kotlin": {
                                "type_name": "StaticObject"
                              }
                            }
                          }
                        ],
                        "discriminator": {
                          "propertyName": "type"
                        }
                      },
                      "metadata": {
                        "$ref": "#/components/schemas/Metadata"
                      }
                    }
                  }
                }
              },
              "anyOf": [
                {
                  "required": [
                    "vector_store_ids"
                  ]
                },
                {
                  "required": [
                    "vector_stores"
                  ]
                }
              ]
            }
          },
          "nullable": true
        },
        "metadata": {
          "$ref": "#/components/schemas/Metadata"
        },
        "temperature": {
          "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n",
          "type": "number",
          "minimum": 0,
          "maximum": 2,
          "default": 1,
          "example": 1,
          "nullable": true
        },
        "top_p": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "default": 1,
          "example": 1,
          "nullable": true,
          "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.\n"
        },
        "response_format": {
          "$ref": "#/components/schemas/AssistantsApiResponseFormatOption",
          "nullable": true
        }
      },
      "required": [
        "model"
      ],
      "examples": []
    },
    {
      "name": "CreateChatCompletionRequest",
      "type": "object",
      "description": "",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "CreateChatCompletionResponse",
      "type": "object",
      "description": "Represents a chat completion response returned by model, based on the provided input.",
      "properties": {
        "id": {
          "type": "string",
          "description": "A unique identifier for the chat completion."
        },
        "choices": {
          "type": "array",
          "description": "A list of chat completion choices. Can be more than one if `n` is greater than 1.",
          "items": {
            "type": "object",
            "required": [
              "finish_reason",
              "index",
              "message",
              "logprobs"
            ],
            "properties": {
              "finish_reason": {
                "type": "string",
                "description": "The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,\n`length` if the maximum number of tokens specified in the request was reached,\n`content_filter` if content was omitted due to a flag from our content filters,\n`tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.\n",
                "enum": [
                  "stop",
                  "length",
                  "tool_calls",
                  "content_filter",
                  "function_call"
                ]
              },
              "index": {
                "type": "integer",
                "description": "The index of the choice in the list of choices."
              },
              "message": {
                "$ref": "#/components/schemas/ChatCompletionResponseMessage"
              },
              "logprobs": {
                "description": "Log probability information for the choice.",
                "type": "object",
                "nullable": true,
                "properties": {
                  "content": {
                    "description": "A list of message content tokens with log probability information.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ChatCompletionTokenLogprob"
                    },
                    "nullable": true
                  },
                  "refusal": {
                    "description": "A list of message refusal tokens with log probability information.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ChatCompletionTokenLogprob"
                    },
                    "nullable": true
                  }
                },
                "required": [
                  "content",
                  "refusal"
                ]
              }
            }
          }
        },
        "created": {
          "type": "integer",
          "description": "The Unix timestamp (in seconds) of when the chat completion was created."
        },
        "model": {
          "type": "string",
          "description": "The model used for the chat completion."
        },
        "service_tier": {
          "$ref": "#/components/schemas/ServiceTier"
        },
        "system_fingerprint": {
          "type": "string",
          "deprecated": true,
          "description": "This fingerprint represents the backend configuration that the model runs with.\n\nCan be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.\n"
        },
        "object": {
          "type": "string",
          "description": "The object type, which is always `chat.completion`.",
          "enum": [
            "chat.completion"
          ],
          "x-stainless-const": true
        },
        "usage": {
          "$ref": "#/components/schemas/CompletionUsage"
        }
      },
      "required": [
        "choices",
        "created",
        "id",
        "model",
        "object"
      ],
      "examples": []
    },
    {
      "name": "CreateChatCompletionStreamResponse",
      "type": "object",
      "description": "Represents a streamed chunk of a chat completion response returned\nby the model, based on the provided input. \n[Learn more](https://platform.openai.com/docs/guides/streaming-responses).\n",
      "properties": {
        "id": {
          "type": "string",
          "description": "A unique identifier for the chat completion. Each chunk has the same ID."
        },
        "choices": {
          "type": "array",
          "description": "A list of chat completion choices. Can contain more than one elements if `n` is greater than 1. Can also be empty for the\nlast chunk if you set `stream_options: {\"include_usage\": true}`.\n",
          "items": {
            "type": "object",
            "required": [
              "delta",
              "finish_reason",
              "index"
            ],
            "properties": {
              "delta": {
                "$ref": "#/components/schemas/ChatCompletionStreamResponseDelta"
              },
              "logprobs": {
                "description": "Log probability information for the choice.",
                "type": "object",
                "nullable": true,
                "properties": {
                  "content": {
                    "description": "A list of message content tokens with log probability information.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ChatCompletionTokenLogprob"
                    },
                    "nullable": true
                  },
                  "refusal": {
                    "description": "A list of message refusal tokens with log probability information.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ChatCompletionTokenLogprob"
                    },
                    "nullable": true
                  }
                },
                "required": [
                  "content",
                  "refusal"
                ]
              },
              "finish_reason": {
                "type": "string",
                "description": "The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,\n`length` if the maximum number of tokens specified in the request was reached,\n`content_filter` if content was omitted due to a flag from our content filters,\n`tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.\n",
                "enum": [
                  "stop",
                  "length",
                  "tool_calls",
                  "content_filter",
                  "function_call"
                ],
                "nullable": true
              },
              "index": {
                "type": "integer",
                "description": "The index of the choice in the list of choices."
              }
            }
          }
        },
        "created": {
          "type": "integer",
          "description": "The Unix timestamp (in seconds) of when the chat completion was created. Each chunk has the same timestamp."
        },
        "model": {
          "type": "string",
          "description": "The model to generate the completion."
        },
        "service_tier": {
          "$ref": "#/components/schemas/ServiceTier"
        },
        "system_fingerprint": {
          "type": "string",
          "deprecated": true,
          "description": "This fingerprint represents the backend configuration that the model runs with.\nCan be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.\n"
        },
        "object": {
          "type": "string",
          "description": "The object type, which is always `chat.completion.chunk`.",
          "enum": [
            "chat.completion.chunk"
          ],
          "x-stainless-const": true
        },
        "usage": {
          "$ref": "#/components/schemas/CompletionUsage",
          "nullable": true,
          "description": "An optional field that will only be present when you set\n`stream_options: {\"include_usage\": true}` in your request. When present, it\ncontains a null value **except for the last chunk** which contains the\ntoken usage statistics for the entire request.\n\n**NOTE:** If the stream is interrupted or cancelled, you may not\nreceive the final usage chunk which contains the total token usage for\nthe request.\n"
        }
      },
      "required": [
        "choices",
        "created",
        "id",
        "model",
        "object"
      ],
      "examples": []
    },
    {
      "name": "CreateCompletionRequest",
      "type": "object",
      "description": "",
      "properties": {
        "model": {
          "description": "ID of the model to use. You can use the [List models](https://platform.openai.com/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](https://platform.openai.com/docs/models) for descriptions of them.\n",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "string",
              "enum": [
                "gpt-3.5-turbo-instruct",
                "davinci-002",
                "babbage-002"
              ],
              "title": "Preset"
            }
          ],
          "x-oaiTypeLabel": "string"
        },
        "prompt": {
          "description": "The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.\n\nNote that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document.\n",
          "nullable": true,
          "anyOf": [
            {
              "type": "string",
              "default": "",
              "example": "This is a test."
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": "",
                "example": "This is a test."
              },
              "title": "Array of strings"
            },
            {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "integer"
              },
              "title": "Array of tokens"
            },
            {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "array",
                "minItems": 1,
                "items": {
                  "type": "integer"
                }
              },
              "title": "Array of token arrays"
            }
          ]
        },
        "best_of": {
          "type": "integer",
          "default": 1,
          "minimum": 0,
          "maximum": 20,
          "nullable": true,
          "description": "Generates `best_of` completions server-side and returns the \"best\" (the one with the highest log probability per token). Results cannot be streamed.\n\nWhen used with `n`, `best_of` controls the number of candidate completions and `n` specifies how many to return – `best_of` must be greater than `n`.\n\n**Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.\n"
        },
        "echo": {
          "type": "boolean",
          "default": false,
          "nullable": true,
          "description": "Echo back the prompt in addition to the completion\n"
        },
        "frequency_penalty": {
          "type": "number",
          "default": 0,
          "minimum": -2,
          "maximum": 2,
          "nullable": true,
          "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.\n\n[See more information about frequency and presence penalties.](https://platform.openai.com/docs/guides/text-generation)\n"
        },
        "logit_bias": {
          "type": "object",
          "x-oaiTypeLabel": "map",
          "default": null,
          "nullable": true,
          "additionalProperties": {
            "type": "integer"
          },
          "description": "Modify the likelihood of specified tokens appearing in the completion.\n\nAccepts a JSON object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.\n\nAs an example, you can pass `{\"50256\": -100}` to prevent the <|endoftext|> token from being generated.\n"
        },
        "logprobs": {
          "type": "integer",
          "minimum": 0,
          "maximum": 5,
          "default": null,
          "nullable": true,
          "description": "Include the log probabilities on the `logprobs` most likely output tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.\n\nThe maximum value for `logprobs` is 5.\n"
        },
        "max_tokens": {
          "type": "integer",
          "minimum": 0,
          "default": 16,
          "example": 16,
          "nullable": true,
          "description": "The maximum number of [tokens](/tokenizer) that can be generated in the completion.\n\nThe token count of your prompt plus `max_tokens` cannot exceed the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.\n"
        },
        "n": {
          "type": "integer",
          "minimum": 1,
          "maximum": 128,
          "default": 1,
          "example": 1,
          "nullable": true,
          "description": "How many completions to generate for each prompt.\n\n**Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.\n"
        },
        "presence_penalty": {
          "type": "number",
          "default": 0,
          "minimum": -2,
          "maximum": 2,
          "nullable": true,
          "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.\n\n[See more information about frequency and presence penalties.](https://platform.openai.com/docs/guides/text-generation)\n"
        },
        "seed": {
          "type": "integer",
          "format": "int64",
          "nullable": true,
          "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.\n\nDeterminism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.\n"
        },
        "stop": {
          "$ref": "#/components/schemas/StopConfiguration"
        },
        "stream": {
          "description": "Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).\n",
          "type": "boolean",
          "nullable": true,
          "default": false
        },
        "stream_options": {
          "$ref": "#/components/schemas/ChatCompletionStreamOptions"
        },
        "suffix": {
          "description": "The suffix that comes after a completion of inserted text.\n\nThis parameter is only supported for `gpt-3.5-turbo-instruct`.\n",
          "default": null,
          "nullable": true,
          "type": "string",
          "example": "test."
        },
        "temperature": {
          "type": "number",
          "minimum": 0,
          "maximum": 2,
          "default": 1,
          "example": 1,
          "nullable": true,
          "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n\nWe generally recommend altering this or `top_p` but not both.\n"
        },
        "top_p": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "default": 1,
          "example": 1,
          "nullable": true,
          "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or `temperature` but not both.\n"
        },
        "user": {
          "type": "string",
          "example": "user-1234",
          "description": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#end-user-ids).\n"
        }
      },
      "required": [
        "model",
        "prompt"
      ],
      "examples": []
    },
    {
      "name": "CreateCompletionResponse",
      "type": "object",
      "description": "Represents a completion response from the API. Note: both the streamed and non-streamed response objects share the same shape (unlike the chat endpoint).\n",
      "properties": {
        "id": {
          "type": "string",
          "description": "A unique identifier for the completion."
        },
        "choices": {
          "type": "array",
          "description": "The list of completion choices the model generated for the input prompt.",
          "items": {
            "type": "object",
            "required": [
              "finish_reason",
              "index",
              "logprobs",
              "text"
            ],
            "properties": {
              "finish_reason": {
                "type": "string",
                "description": "The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,\n`length` if the maximum number of tokens specified in the request was reached,\nor `content_filter` if content was omitted due to a flag from our content filters.\n",
                "enum": [
                  "stop",
                  "length",
                  "content_filter"
                ]
              },
              "index": {
                "type": "integer"
              },
              "logprobs": {
                "type": "object",
                "nullable": true,
                "properties": {
                  "text_offset": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "token_logprobs": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    }
                  },
                  "tokens": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "top_logprobs": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "number"
                      }
                    }
                  }
                }
              },
              "text": {
                "type": "string"
              }
            }
          }
        },
        "created": {
          "type": "integer",
          "description": "The Unix timestamp (in seconds) of when the completion was created."
        },
        "model": {
          "type": "string",
          "description": "The model used for completion."
        },
        "system_fingerprint": {
          "type": "string",
          "description": "This fingerprint represents the backend configuration that the model runs with.\n\nCan be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.\n"
        },
        "object": {
          "type": "string",
          "description": "The object type, which is always \"text_completion\"",
          "enum": [
            "text_completion"
          ],
          "x-stainless-const": true
        },
        "usage": {
          "$ref": "#/components/schemas/CompletionUsage"
        }
      },
      "required": [
        "id",
        "object",
        "created",
        "model",
        "choices"
      ],
      "examples": []
    },
    {
      "name": "CreateContainerBody",
      "type": "object",
      "description": "",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the container to create."
        },
        "file_ids": {
          "type": "array",
          "description": "IDs of files to copy to the container.",
          "items": {
            "type": "string"
          }
        },
        "expires_after": {
          "type": "object",
          "description": "Container expiration time in seconds relative to the 'anchor' time.",
          "properties": {
            "anchor": {
              "type": "string",
              "enum": [
                "last_active_at"
              ],
              "description": "Time anchor for the expiration time. Currently only 'last_active_at' is supported."
            },
            "minutes": {
              "type": "integer"
            }
          },
          "required": [
            "anchor",
            "minutes"
          ]
        }
      },
      "required": [
        "name"
      ],
      "examples": []
    },
    {
      "name": "CreateContainerFileBody",
      "type": "object",
      "description": "",
      "properties": {
        "file_id": {
          "type": "string",
          "description": "Name of the file to create."
        },
        "file": {
          "description": "The File object (not file name) to be uploaded.\n",
          "type": "string",
          "format": "binary"
        }
      },
      "required": [],
      "examples": []
    },
    {
      "name": "CreateConversationRequest",
      "type": "object",
      "description": "Create a conversation",
      "properties": {
        "metadata": {
          "$ref": "#/components/schemas/Metadata",
          "description": "Set of 16 key-value pairs that can be attached to an object. Useful for\nstoring additional information about the object in a structured format.\n"
        },
        "items": {
          "type": "array",
          "description": "Initial items to include in the conversation context.\nYou may add up to 20 items at a time.\n",
          "items": {
            "$ref": "#/components/schemas/InputItem"
          },
          "nullable": true,
          "maxItems": 20
        }
      },
      "required": [],
      "examples": []
    },
    {
      "name": "CreateEmbeddingRequest",
      "type": "object",
      "description": "",
      "properties": {
        "input": {
          "description": "Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. The input must not exceed the max input tokens for the model (8192 tokens for all embedding models), cannot be an empty string, and any array must be 2048 dimensions or less. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens. In addition to the per-input token limit, all embedding  models enforce a maximum of 300,000 tokens summed across all inputs in a  single request.\n",
          "example": "The quick brown fox jumped over the lazy dog",
          "anyOf": [
            {
              "type": "string",
              "title": "string",
              "description": "The string that will be turned into an embedding.",
              "default": "",
              "example": "This is a test."
            },
            {
              "type": "array",
              "title": "Array of strings",
              "description": "The array of strings that will be turned into an embedding.",
              "minItems": 1,
              "maxItems": 2048,
              "items": {
                "type": "string",
                "default": "",
                "example": "['This is a test.']"
              }
            },
            {
              "type": "array",
              "title": "Array of tokens",
              "description": "The array of integers that will be turned into an embedding.",
              "minItems": 1,
              "maxItems": 2048,
              "items": {
                "type": "integer"
              }
            },
            {
              "type": "array",
              "title": "Array of token arrays",
              "description": "The array of arrays containing integers that will be turned into an embedding.",
              "minItems": 1,
              "maxItems": 2048,
              "items": {
                "type": "array",
                "minItems": 1,
                "items": {
                  "type": "integer"
                }
              }
            }
          ]
        },
        "model": {
          "description": "ID of the model to use. You can use the [List models](https://platform.openai.com/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](https://platform.openai.com/docs/models) for descriptions of them.\n",
          "example": "text-embedding-3-small",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "string",
              "enum": [
                "text-embedding-ada-002",
                "text-embedding-3-small",
                "text-embedding-3-large"
              ],
              "x-stainless-nominal": false
            }
          ],
          "x-oaiTypeLabel": "string"
        },
        "encoding_format": {
          "description": "The format to return the embeddings in. Can be either `float` or [`base64`](https://pypi.org/project/pybase64/).",
          "example": "float",
          "default": "float",
          "type": "string",
          "enum": [
            "float",
            "base64"
          ]
        },
        "dimensions": {
          "description": "The number of dimensions the resulting output embeddings should have. Only supported in `text-embedding-3` and later models.\n",
          "type": "integer",
          "minimum": 1
        },
        "user": {
          "type": "string",
          "example": "user-1234",
          "description": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#end-user-ids).\n"
        }
      },
      "required": [
        "model",
        "input"
      ],
      "examples": []
    },
    {
      "name": "CreateEmbeddingResponse",
      "type": "object",
      "description": "",
      "properties": {
        "data": {
          "type": "array",
          "description": "The list of embeddings generated by the model.",
          "items": {
            "$ref": "#/components/schemas/Embedding"
          }
        },
        "model": {
          "type": "string",
          "description": "The name of the model used to generate the embedding."
        },
        "object": {
          "type": "string",
          "description": "The object type, which is always \"list\".",
          "enum": [
            "list"
          ],
          "x-stainless-const": true
        },
        "usage": {
          "type": "object",
          "description": "The usage information for the request.",
          "properties": {
            "prompt_tokens": {
              "type": "integer",
              "description": "The number of tokens used by the prompt."
            },
            "total_tokens": {
              "type": "integer",
              "description": "The total number of tokens used by the request."
            }
          },
          "required": [
            "prompt_tokens",
            "total_tokens"
          ]
        }
      },
      "required": [
        "object",
        "model",
        "data",
        "usage"
      ],
      "examples": []
    },
    {
      "name": "CreateEvalCompletionsRunDataSource",
      "type": "object",
      "description": "A CompletionsRunDataSource object describing a model sampling configuration.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "completions"
          ],
          "default": "completions",
          "description": "The type of run data source. Always `completions`."
        },
        "input_messages": {
          "description": "Used when sampling from a model. Dictates the structure of the messages passed into the model. Can either be a reference to a prebuilt trajectory (ie, `item.input_trajectory`), or a template with variable references to the `item` namespace.",
          "anyOf": [
            {
              "type": "object",
              "title": "TemplateInputMessages",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "template"
                  ],
                  "description": "The type of input messages. Always `template`."
                },
                "template": {
                  "type": "array",
                  "description": "A list of chat messages forming the prompt or context. May include variable references to the `item` namespace, ie {{item.name}}.",
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/EasyInputMessage"
                      },
                      {
                        "$ref": "#/components/schemas/EvalItem"
                      }
                    ]
                  }
                }
              },
              "required": [
                "type",
                "template"
              ]
            },
            {
              "type": "object",
              "title": "ItemReferenceInputMessages",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "item_reference"
                  ],
                  "description": "The type of input messages. Always `item_reference`."
                },
                "item_reference": {
                  "type": "string",
                  "description": "A reference to a variable in the `item` namespace. Ie, \"item.input_trajectory\""
                }
              },
              "required": [
                "type",
                "item_reference"
              ]
            }
          ],
          "discriminator": {
            "propertyName": "type"
          }
        },
        "sampling_params": {
          "type": "object",
          "properties": {
            "temperature": {
              "type": "number",
              "description": "A higher temperature increases randomness in the outputs.",
              "default": 1
            },
            "max_completion_tokens": {
              "type": "integer",
              "description": "The maximum number of tokens in the generated output."
            },
            "top_p": {
              "type": "number",
              "description": "An alternative to temperature for nucleus sampling; 1.0 includes all tokens.",
              "default": 1
            },
            "seed": {
              "type": "integer",
              "description": "A seed value to initialize the randomness, during sampling.",
              "default": 42
            },
            "response_format": {
              "description": "An object specifying the format that the model must output.\n\nSetting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables\nStructured Outputs which ensures the model will match your supplied JSON\nschema. Learn more in the [Structured Outputs\nguide](https://platform.openai.com/docs/guides/structured-outputs).\n\nSetting to `{ \"type\": \"json_object\" }` enables the older JSON mode, which\nensures the message the model generates is valid JSON. Using `json_schema`\nis preferred for models that support it.\n",
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ResponseFormatText"
                },
                {
                  "$ref": "#/components/schemas/ResponseFormatJsonSchema"
                },
                {
                  "$ref": "#/components/schemas/ResponseFormatJsonObject"
                }
              ]
            },
            "tools": {
              "type": "array",
              "description": "A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.\n",
              "items": {
                "$ref": "#/components/schemas/ChatCompletionTool"
              }
            }
          }
        },
        "model": {
          "type": "string",
          "description": "The name of the model to use for generating completions (e.g. \"o3-mini\")."
        },
        "source": {
          "description": "Determines what populates the `item` namespace in this run's data source.",
          "anyOf": [
            {
              "$ref": "#/components/schemas/EvalJsonlFileContentSource"
            },
            {
              "$ref": "#/components/schemas/EvalJsonlFileIdSource"
            },
            {
              "$ref": "#/components/schemas/EvalStoredCompletionsSource"
            }
          ],
          "discriminator": {
            "propertyName": "type"
          }
        }
      },
      "required": [
        "type",
        "source"
      ],
      "examples": []
    },
    {
      "name": "CreateEvalCustomDataSourceConfig",
      "type": "object",
      "description": "A CustomDataSourceConfig object that defines the schema for the data source used for the evaluation runs.\nThis schema is used to define the shape of the data that will be:\n- Used to define your testing criteria and\n- What data is required when creating a run\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "custom"
          ],
          "default": "custom",
          "description": "The type of data source. Always `custom`.",
          "x-stainless-const": true
        },
        "item_schema": {
          "type": "object",
          "description": "The json schema for each row in the data source.",
          "additionalProperties": true
        },
        "include_sample_schema": {
          "type": "boolean",
          "default": false,
          "description": "Whether the eval should expect you to populate the sample namespace (ie, by generating responses off of your data source)"
        }
      },
      "required": [
        "item_schema",
        "type"
      ],
      "examples": []
    },
    {
      "name": "CreateEvalItem",
      "type": "object",
      "description": "A chat message that makes up the prompt or context. May include variable references to the `item` namespace, ie {{item.name}}.",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "CreateEvalJsonlRunDataSource",
      "type": "object",
      "description": "A JsonlRunDataSource object with that specifies a JSONL file that matches the eval \n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "jsonl"
          ],
          "default": "jsonl",
          "description": "The type of data source. Always `jsonl`.",
          "x-stainless-const": true
        },
        "source": {
          "description": "Determines what populates the `item` namespace in the data source.",
          "anyOf": [
            {
              "$ref": "#/components/schemas/EvalJsonlFileContentSource"
            },
            {
              "$ref": "#/components/schemas/EvalJsonlFileIdSource"
            }
          ],
          "discriminator": {
            "propertyName": "type"
          }
        }
      },
      "required": [
        "type",
        "source"
      ],
      "examples": []
    },
    {
      "name": "CreateEvalLabelModelGrader",
      "type": "object",
      "description": "A LabelModelGrader object which uses a model to assign labels to each item\nin the evaluation.\n",
      "properties": {
        "type": {
          "description": "The object type, which is always `label_model`.",
          "type": "string",
          "enum": [
            "label_model"
          ],
          "x-stainless-const": true
        },
        "name": {
          "type": "string",
          "description": "The name of the grader."
        },
        "model": {
          "type": "string",
          "description": "The model to use for the evaluation. Must support structured outputs."
        },
        "input": {
          "type": "array",
          "description": "A list of chat messages forming the prompt or context. May include variable references to the `item` namespace, ie {{item.name}}.",
          "items": {
            "$ref": "#/components/schemas/CreateEvalItem"
          }
        },
        "labels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The labels to classify to each item in the evaluation."
        },
        "passing_labels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The labels that indicate a passing result. Must be a subset of labels."
        }
      },
      "required": [
        "type",
        "model",
        "input",
        "passing_labels",
        "labels",
        "name"
      ],
      "examples": []
    },
    {
      "name": "CreateEvalLogsDataSourceConfig",
      "type": "object",
      "description": "A data source config which specifies the metadata property of your logs query.\nThis is usually metadata like `usecase=chatbot` or `prompt-version=v2`, etc.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "logs"
          ],
          "default": "logs",
          "description": "The type of data source. Always `logs`.",
          "x-stainless-const": true
        },
        "metadata": {
          "type": "object",
          "description": "Metadata filters for the logs data source.",
          "additionalProperties": true
        }
      },
      "required": [
        "type"
      ],
      "examples": []
    },
    {
      "name": "CreateEvalRequest",
      "type": "object",
      "description": "",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the evaluation."
        },
        "metadata": {
          "$ref": "#/components/schemas/Metadata"
        },
        "data_source_config": {
          "type": "object",
          "description": "The configuration for the data source used for the evaluation runs. Dictates the schema of the data used in the evaluation.",
          "anyOf": [
            {
              "$ref": "#/components/schemas/CreateEvalCustomDataSourceConfig"
            },
            {
              "$ref": "#/components/schemas/CreateEvalLogsDataSourceConfig"
            },
            {
              "$ref": "#/components/schemas/CreateEvalStoredCompletionsDataSourceConfig"
            }
          ],
          "discriminator": {
            "propertyName": "type"
          }
        },
        "testing_criteria": {
          "type": "array",
          "description": "A list of graders for all eval runs in this group. Graders can reference variables in the data source using double curly braces notation, like `{{item.variable_name}}`. To reference the model's output, use the `sample` namespace (ie, `{{sample.output_text}}`).",
          "items": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CreateEvalLabelModelGrader"
              },
              {
                "$ref": "#/components/schemas/EvalGraderStringCheck"
              },
              {
                "$ref": "#/components/schemas/EvalGraderTextSimilarity"
              },
              {
                "$ref": "#/components/schemas/EvalGraderPython"
              },
              {
                "$ref": "#/components/schemas/EvalGraderScoreModel"
              }
            ],
            "discriminator": {
              "propertyName": "type"
            }
          }
        }
      },
      "required": [
        "data_source_config",
        "testing_criteria"
      ],
      "examples": []
    },
    {
      "name": "CreateEvalResponsesRunDataSource",
      "type": "object",
      "description": "A ResponsesRunDataSource object describing a model sampling configuration.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "responses"
          ],
          "default": "responses",
          "description": "The type of run data source. Always `responses`."
        },
        "input_messages": {
          "description": "Used when sampling from a model. Dictates the structure of the messages passed into the model. Can either be a reference to a prebuilt trajectory (ie, `item.input_trajectory`), or a template with variable references to the `item` namespace.",
          "anyOf": [
            {
              "type": "object",
              "title": "InputMessagesTemplate",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "template"
                  ],
                  "description": "The type of input messages. Always `template`."
                },
                "template": {
                  "type": "array",
                  "description": "A list of chat messages forming the prompt or context. May include variable references to the `item` namespace, ie {{item.name}}.",
                  "items": {
                    "anyOf": [
                      {
                        "type": "object",
                        "title": "ChatMessage",
                        "properties": {
                          "role": {
                            "type": "string",
                            "description": "The role of the message (e.g. \"system\", \"assistant\", \"user\")."
                          },
                          "content": {
                            "type": "string",
                            "description": "The content of the message."
                          }
                        },
                        "required": [
                          "role",
                          "content"
                        ]
                      },
                      {
                        "$ref": "#/components/schemas/EvalItem"
                      }
                    ]
                  }
                }
              },
              "required": [
                "type",
                "template"
              ]
            },
            {
              "type": "object",
              "title": "InputMessagesItemReference",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "item_reference"
                  ],
                  "description": "The type of input messages. Always `item_reference`."
                },
                "item_reference": {
                  "type": "string",
                  "description": "A reference to a variable in the `item` namespace. Ie, \"item.name\""
                }
              },
              "required": [
                "type",
                "item_reference"
              ]
            }
          ],
          "discriminator": {
            "propertyName": "type"
          }
        },
        "sampling_params": {
          "type": "object",
          "properties": {
            "temperature": {
              "type": "number",
              "description": "A higher temperature increases randomness in the outputs.",
              "default": 1
            },
            "max_completion_tokens": {
              "type": "integer",
              "description": "The maximum number of tokens in the generated output."
            },
            "top_p": {
              "type": "number",
              "description": "An alternative to temperature for nucleus sampling; 1.0 includes all tokens.",
              "default": 1
            },
            "seed": {
              "type": "integer",
              "description": "A seed value to initialize the randomness, during sampling.",
              "default": 42
            },
            "tools": {
              "type": "array",
              "description": "An array of tools the model may call while generating a response. You\ncan specify which tool to use by setting the `tool_choice` parameter.\n\nThe two categories of tools you can provide the model are:\n\n- **Built-in tools**: Tools that are provided by OpenAI that extend the\n  model's capabilities, like [web search](https://platform.openai.com/docs/guides/tools-web-search)\n  or [file search](https://platform.openai.com/docs/guides/tools-file-search). Learn more about\n  [built-in tools](https://platform.openai.com/docs/guides/tools).\n- **Function calls (custom tools)**: Functions that are defined by you,\n  enabling the model to call your own code. Learn more about\n  [function calling](https://platform.openai.com/docs/guides/function-calling).\n",
              "items": {
                "$ref": "#/components/schemas/Tool"
              }
            },
            "text": {
              "type": "object",
              "description": "Configuration options for a text response from the model. Can be plain\ntext or structured JSON data. Learn more:\n- [Text inputs and outputs](https://platform.openai.com/docs/guides/text)\n- [Structured Outputs](https://platform.openai.com/docs/guides/structured-outputs)\n",
              "properties": {
                "format": {
                  "$ref": "#/components/schemas/TextResponseFormatConfiguration"
                }
              }
            }
          }
        },
        "model": {
          "type": "string",
          "description": "The name of the model to use for generating completions (e.g. \"o3-mini\")."
        },
        "source": {
          "description": "Determines what populates the `item` namespace in this run's data source.",
          "anyOf": [
            {
              "$ref": "#/components/schemas/EvalJsonlFileContentSource"
            },
            {
              "$ref": "#/components/schemas/EvalJsonlFileIdSource"
            },
            {
              "$ref": "#/components/schemas/EvalResponsesSource"
            }
          ],
          "discriminator": {
            "propertyName": "type"
          }
        }
      },
      "required": [
        "type",
        "source"
      ],
      "examples": []
    },
    {
      "name": "CreateEvalRunRequest",
      "type": "object",
      "description": "",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the run."
        },
        "metadata": {
          "$ref": "#/components/schemas/Metadata"
        },
        "data_source": {
          "type": "object",
          "description": "Details about the run's data source.",
          "anyOf": [
            {
              "$ref": "#/components/schemas/CreateEvalJsonlRunDataSource"
            },
            {
              "$ref": "#/components/schemas/CreateEvalCompletionsRunDataSource"
            },
            {
              "$ref": "#/components/schemas/CreateEvalResponsesRunDataSource"
            }
          ]
        }
      },
      "required": [
        "data_source"
      ],
      "examples": []
    },
    {
      "name": "CreateEvalStoredCompletionsDataSourceConfig",
      "type": "object",
      "description": "Deprecated in favor of LogsDataSourceConfig.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "stored_completions"
          ],
          "default": "stored_completions",
          "description": "The type of data source. Always `stored_completions`.",
          "x-stainless-const": true
        },
        "metadata": {
          "type": "object",
          "description": "Metadata filters for the stored completions data source.",
          "additionalProperties": true
        }
      },
      "required": [
        "type"
      ],
      "examples": []
    },
    {
      "name": "CreateFileRequest",
      "type": "object",
      "description": "",
      "properties": {
        "file": {
          "description": "The File object (not file name) to be uploaded.\n",
          "type": "string",
          "format": "binary",
          "x-oaiMeta": {
            "exampleFilePath": "fine-tune.jsonl"
          }
        },
        "purpose": {
          "$ref": "#/components/schemas/FilePurpose"
        },
        "expires_after": {
          "$ref": "#/components/schemas/FileExpirationAfter"
        }
      },
      "required": [
        "file",
        "purpose"
      ],
      "examples": []
    },
    {
      "name": "CreateFineTuningCheckpointPermissionRequest",
      "type": "object",
      "description": "",
      "properties": {
        "project_ids": {
          "type": "array",
          "description": "The project identifiers to grant access to.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "project_ids"
      ],
      "examples": []
    },
    {
      "name": "CreateFineTuningJobRequest",
      "type": "object",
      "description": "",
      "properties": {
        "model": {
          "description": "The name of the model to fine-tune. You can select one of the\n[supported models](https://platform.openai.com/docs/guides/fine-tuning#which-models-can-be-fine-tuned).\n",
          "example": "gpt-4o-mini",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "string",
              "enum": [
                "babbage-002",
                "davinci-002",
                "gpt-3.5-turbo",
                "gpt-4o-mini"
              ],
              "title": "Preset"
            }
          ],
          "x-oaiTypeLabel": "string"
        },
        "training_file": {
          "description": "The ID of an uploaded file that contains training data.\n\nSee [upload file](https://platform.openai.com/docs/api-reference/files/create) for how to upload a file.\n\nYour dataset must be formatted as a JSONL file. Additionally, you must upload your file with the purpose `fine-tune`.\n\nThe contents of the file should differ depending on if the model uses the [chat](https://platform.openai.com/docs/api-reference/fine-tuning/chat-input), [completions](https://platform.openai.com/docs/api-reference/fine-tuning/completions-input) format, or if the fine-tuning method uses the [preference](https://platform.openai.com/docs/api-reference/fine-tuning/preference-input) format.\n\nSee the [fine-tuning guide](https://platform.openai.com/docs/guides/model-optimization) for more details.\n",
          "type": "string",
          "example": "file-abc123"
        },
        "hyperparameters": {
          "type": "object",
          "description": "The hyperparameters used for the fine-tuning job.\nThis value is now deprecated in favor of `method`, and should be passed in under the `method` parameter.\n",
          "properties": {
            "batch_size": {
              "description": "Number of examples in each batch. A larger batch size means that model parameters\nare updated less frequently, but with lower variance.\n",
              "default": "auto",
              "anyOf": [
                {
                  "type": "string",
                  "enum": [
                    "auto"
                  ],
                  "x-stainless-const": true,
                  "title": "Auto"
                },
                {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 256
                }
              ]
            },
            "learning_rate_multiplier": {
              "description": "Scaling factor for the learning rate. A smaller learning rate may be useful to avoid\noverfitting.\n",
              "anyOf": [
                {
                  "type": "string",
                  "enum": [
                    "auto"
                  ],
                  "x-stainless-const": true,
                  "title": "Auto"
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "exclusiveMinimum": true
                }
              ]
            },
            "n_epochs": {
              "description": "The number of epochs to train the model for. An epoch refers to one full cycle\nthrough the training dataset.\n",
              "default": "auto",
              "anyOf": [
                {
                  "type": "string",
                  "enum": [
                    "auto"
                  ],
                  "x-stainless-const": true,
                  "title": "Auto"
                },
                {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 50
                }
              ]
            }
          },
          "deprecated": true
        },
        "suffix": {
          "description": "A string of up to 64 characters that will be added to your fine-tuned model name.\n\nFor example, a `suffix` of \"custom-model-name\" would produce a model name like `ft:gpt-4o-mini:openai:custom-model-name:7p4lURel`.\n",
          "type": "string",
          "minLength": 1,
          "maxLength": 64,
          "default": null,
          "nullable": true
        },
        "validation_file": {
          "description": "The ID of an uploaded file that contains validation data.\n\nIf you provide this file, the data is used to generate validation\nmetrics periodically during fine-tuning. These metrics can be viewed in\nthe fine-tuning results file.\nThe same data should not be present in both train and validation files.\n\nYour dataset must be formatted as a JSONL file. You must upload your file with the purpose `fine-tune`.\n\nSee the [fine-tuning guide](https://platform.openai.com/docs/guides/model-optimization) for more details.\n",
          "type": "string",
          "nullable": true,
          "example": "file-abc123"
        },
        "integrations": {
          "type": "array",
          "description": "A list of integrations to enable for your fine-tuning job.",
          "nullable": true,
          "items": {
            "type": "object",
            "required": [
              "type",
              "wandb"
            ],
            "properties": {
              "type": {
                "description": "The type of integration to enable. Currently, only \"wandb\" (Weights and Biases) is supported.\n",
                "anyOf": [
                  {
                    "type": "string",
                    "enum": [
                      "wandb"
                    ],
                    "x-stainless-const": true
                  }
                ]
              },
              "wandb": {
                "type": "object",
                "description": "The settings for your integration with Weights and Biases. This payload specifies the project that\nmetrics will be sent to. Optionally, you can set an explicit display name for your run, add tags\nto your run, and set a default entity (team, username, etc) to be associated with your run.\n",
                "required": [
                  "project"
                ],
                "properties": {
                  "project": {
                    "description": "The name of the project that the new run will be created under.\n",
                    "type": "string",
                    "example": "my-wandb-project"
                  },
                  "name": {
                    "description": "A display name to set for the run. If not set, we will use the Job ID as the name.\n",
                    "nullable": true,
                    "type": "string"
                  },
                  "entity": {
                    "description": "The entity to use for the run. This allows you to set the team or username of the WandB user that you would\nlike associated with the run. If not set, the default entity for the registered WandB API key is used.\n",
                    "nullable": true,
                    "type": "string"
                  },
                  "tags": {
                    "description": "A list of tags to be attached to the newly created run. These tags are passed through directly to WandB. Some\ndefault tags are generated by OpenAI: \"openai/finetune\", \"openai/{base-model}\", \"openai/{ftjob-abcdef}\".\n",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "custom-tag"
                    }
                  }
                }
              }
            }
          }
        },
        "seed": {
          "description": "The seed controls the reproducibility of the job. Passing in the same seed and job parameters should produce the same results, but may differ in rare cases.\nIf a seed is not specified, one will be generated for you.\n",
          "type": "integer",
          "nullable": true,
          "minimum": 0,
          "maximum": 2147483647,
          "example": 42
        },
        "method": {
          "$ref": "#/components/schemas/FineTuneMethod"
        },
        "metadata": {
          "$ref": "#/components/schemas/Metadata"
        }
      },
      "required": [
        "model",
        "training_file"
      ],
      "examples": []
    },
    {
      "name": "CreateImageEditRequest",
      "type": "object",
      "description": "",
      "properties": {
        "image": {
          "anyOf": [
            {
              "type": "string",
              "format": "binary"
            },
            {
              "type": "array",
              "maxItems": 16,
              "items": {
                "type": "string",
                "format": "binary"
              }
            }
          ],
          "description": "The image(s) to edit. Must be a supported image file or an array of images.\n\nFor `gpt-image-1`, each image should be a `png`, `webp`, or `jpg` file less \nthan 50MB. You can provide up to 16 images.\n\nFor `dall-e-2`, you can only provide one image, and it should be a square \n`png` file less than 4MB.\n",
          "x-oaiMeta": {
            "exampleFilePath": "otter.png"
          }
        },
        "prompt": {
          "description": "A text description of the desired image(s). The maximum length is 1000 characters for `dall-e-2`, and 32000 characters for `gpt-image-1`.",
          "type": "string",
          "example": "A cute baby sea otter wearing a beret"
        },
        "mask": {
          "description": "An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where `image` should be edited. If there are multiple images provided, the mask will be applied on the first image. Must be a valid PNG file, less than 4MB, and have the same dimensions as `image`.",
          "type": "string",
          "format": "binary",
          "x-oaiMeta": {
            "exampleFilePath": "mask.png"
          }
        },
        "background": {
          "type": "string",
          "enum": [
            "transparent",
            "opaque",
            "auto"
          ],
          "default": "auto",
          "example": "transparent",
          "nullable": true,
          "description": "Allows to set transparency for the background of the generated image(s). \nThis parameter is only supported for `gpt-image-1`. Must be one of \n`transparent`, `opaque` or `auto` (default value). When `auto` is used, the \nmodel will automatically determine the best background for the image.\n\nIf `transparent`, the output format needs to support transparency, so it \nshould be set to either `png` (default value) or `webp`.\n"
        },
        "model": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "string",
              "enum": [
                "dall-e-2",
                "gpt-image-1"
              ],
              "x-stainless-const": true
            }
          ],
          "x-oaiTypeLabel": "string",
          "nullable": true,
          "description": "The model to use for image generation. Only `dall-e-2` and `gpt-image-1` are supported. Defaults to `dall-e-2` unless a parameter specific to `gpt-image-1` is used."
        },
        "n": {
          "type": "integer",
          "minimum": 1,
          "maximum": 10,
          "default": 1,
          "example": 1,
          "nullable": true,
          "description": "The number of images to generate. Must be between 1 and 10."
        },
        "size": {
          "type": "string",
          "enum": [
            "256x256",
            "512x512",
            "1024x1024",
            "1536x1024",
            "1024x1536",
            "auto"
          ],
          "default": "1024x1024",
          "example": "1024x1024",
          "nullable": true,
          "description": "The size of the generated images. Must be one of `1024x1024`, `1536x1024` (landscape), `1024x1536` (portrait), or `auto` (default value) for `gpt-image-1`, and one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`."
        },
        "response_format": {
          "type": "string",
          "enum": [
            "url",
            "b64_json"
          ],
          "default": "url",
          "example": "url",
          "nullable": true,
          "description": "The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated. This parameter is only supported for `dall-e-2`, as `gpt-image-1` will always return base64-encoded images."
        },
        "output_format": {
          "type": "string",
          "enum": [
            "png",
            "jpeg",
            "webp"
          ],
          "default": "png",
          "example": "png",
          "nullable": true,
          "description": "The format in which the generated images are returned. This parameter is\nonly supported for `gpt-image-1`. Must be one of `png`, `jpeg`, or `webp`.\nThe default value is `png`.\n"
        },
        "output_compression": {
          "type": "integer",
          "default": 100,
          "example": 100,
          "nullable": true,
          "description": "The compression level (0-100%) for the generated images. This parameter \nis only supported for `gpt-image-1` with the `webp` or `jpeg` output \nformats, and defaults to 100.\n"
        },
        "user": {
          "type": "string",
          "example": "user-1234",
          "description": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#end-user-ids).\n"
        },
        "input_fidelity": {
          "$ref": "#/components/schemas/ImageInputFidelity"
        },
        "stream": {
          "type": "boolean",
          "default": false,
          "example": false,
          "nullable": true,
          "description": "Edit the image in streaming mode. Defaults to `false`. See the \n[Image generation guide](https://platform.openai.com/docs/guides/image-generation) for more information.\n"
        },
        "partial_images": {
          "$ref": "#/components/schemas/PartialImages"
        },
        "quality": {
          "type": "string",
          "enum": [
            "standard",
            "low",
            "medium",
            "high",
            "auto"
          ],
          "default": "auto",
          "example": "high",
          "nullable": true,
          "description": "The quality of the image that will be generated. `high`, `medium` and `low` are only supported for `gpt-image-1`. `dall-e-2` only supports `standard` quality. Defaults to `auto`.\n"
        }
      },
      "required": [
        "prompt",
        "image"
      ],
      "examples": []
    },
    {
      "name": "CreateImageRequest",
      "type": "object",
      "description": "",
      "properties": {
        "prompt": {
          "description": "A text description of the desired image(s). The maximum length is 32000 characters for `gpt-image-1`, 1000 characters for `dall-e-2` and 4000 characters for `dall-e-3`.",
          "type": "string",
          "example": "A cute baby sea otter"
        },
        "model": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "string",
              "enum": [
                "dall-e-2",
                "dall-e-3",
                "gpt-image-1"
              ],
              "x-stainless-nominal": false
            }
          ],
          "x-oaiTypeLabel": "string",
          "nullable": true,
          "description": "The model to use for image generation. One of `dall-e-2`, `dall-e-3`, or `gpt-image-1`. Defaults to `dall-e-2` unless a parameter specific to `gpt-image-1` is used."
        },
        "n": {
          "type": "integer",
          "minimum": 1,
          "maximum": 10,
          "default": 1,
          "example": 1,
          "nullable": true,
          "description": "The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported."
        },
        "quality": {
          "type": "string",
          "enum": [
            "standard",
            "hd",
            "low",
            "medium",
            "high",
            "auto"
          ],
          "default": "auto",
          "example": "medium",
          "nullable": true,
          "description": "The quality of the image that will be generated. \n\n- `auto` (default value) will automatically select the best quality for the given model.\n- `high`, `medium` and `low` are supported for `gpt-image-1`.\n- `hd` and `standard` are supported for `dall-e-3`.\n- `standard` is the only option for `dall-e-2`.\n"
        },
        "response_format": {
          "type": "string",
          "enum": [
            "url",
            "b64_json"
          ],
          "default": "url",
          "example": "url",
          "nullable": true,
          "description": "The format in which generated images with `dall-e-2` and `dall-e-3` are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated. This parameter isn't supported for `gpt-image-1` which will always return base64-encoded images."
        },
        "output_format": {
          "type": "string",
          "enum": [
            "png",
            "jpeg",
            "webp"
          ],
          "default": "png",
          "example": "png",
          "nullable": true,
          "description": "The format in which the generated images are returned. This parameter is only supported for `gpt-image-1`. Must be one of `png`, `jpeg`, or `webp`."
        },
        "output_compression": {
          "type": "integer",
          "default": 100,
          "example": 100,
          "nullable": true,
          "description": "The compression level (0-100%) for the generated images. This parameter is only supported for `gpt-image-1` with the `webp` or `jpeg` output formats, and defaults to 100."
        },
        "stream": {
          "type": "boolean",
          "default": false,
          "example": false,
          "nullable": true,
          "description": "Generate the image in streaming mode. Defaults to `false`. See the \n[Image generation guide](https://platform.openai.com/docs/guides/image-generation) for more information.\nThis parameter is only supported for `gpt-image-1`.\n"
        },
        "partial_images": {
          "$ref": "#/components/schemas/PartialImages"
        },
        "size": {
          "type": "string",
          "enum": [
            "auto",
            "1024x1024",
            "1536x1024",
            "1024x1536",
            "256x256",
            "512x512",
            "1792x1024",
            "1024x1792"
          ],
          "default": "auto",
          "example": "1024x1024",
          "nullable": true,
          "description": "The size of the generated images. Must be one of `1024x1024`, `1536x1024` (landscape), `1024x1536` (portrait), or `auto` (default value) for `gpt-image-1`, one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`, and one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3`."
        },
        "moderation": {
          "type": "string",
          "enum": [
            "low",
            "auto"
          ],
          "default": "auto",
          "example": "low",
          "nullable": true,
          "description": "Control the content-moderation level for images generated by `gpt-image-1`. Must be either `low` for less restrictive filtering or `auto` (default value)."
        },
        "background": {
          "type": "string",
          "enum": [
            "transparent",
            "opaque",
            "auto"
          ],
          "default": "auto",
          "example": "transparent",
          "nullable": true,
          "description": "Allows to set transparency for the background of the generated image(s). \nThis parameter is only supported for `gpt-image-1`. Must be one of \n`transparent`, `opaque` or `auto` (default value). When `auto` is used, the \nmodel will automatically determine the best background for the image.\n\nIf `transparent`, the output format needs to support transparency, so it \nshould be set to either `png` (default value) or `webp`.\n"
        },
        "style": {
          "type": "string",
          "enum": [
            "vivid",
            "natural"
          ],
          "default": "vivid",
          "example": "vivid",
          "nullable": true,
          "description": "The style of the generated images. This parameter is only supported for `dall-e-3`. Must be one of `vivid` or `natural`. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images."
        },
        "user": {
          "type": "string",
          "example": "user-1234",
          "description": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#end-user-ids).\n"
        }
      },
      "required": [
        "prompt"
      ],
      "examples": []
    },
    {
      "name": "CreateImageVariationRequest",
      "type": "object",
      "description": "",
      "properties": {
        "image": {
          "description": "The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.",
          "type": "string",
          "format": "binary",
          "x-oaiMeta": {
            "exampleFilePath": "otter.png"
          }
        },
        "model": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "string",
              "enum": [
                "dall-e-2"
              ],
              "x-stainless-const": true
            }
          ],
          "x-oaiTypeLabel": "string",
          "nullable": true,
          "description": "The model to use for image generation. Only `dall-e-2` is supported at this time."
        },
        "n": {
          "type": "integer",
          "minimum": 1,
          "maximum": 10,
          "default": 1,
          "example": 1,
          "nullable": true,
          "description": "The number of images to generate. Must be between 1 and 10."
        },
        "response_format": {
          "type": "string",
          "enum": [
            "url",
            "b64_json"
          ],
          "default": "url",
          "example": "url",
          "nullable": true,
          "description": "The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated."
        },
        "size": {
          "type": "string",
          "enum": [
            "256x256",
            "512x512",
            "1024x1024"
          ],
          "default": "1024x1024",
          "example": "1024x1024",
          "nullable": true,
          "description": "The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`."
        },
        "user": {
          "type": "string",
          "example": "user-1234",
          "description": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#end-user-ids).\n"
        }
      },
      "required": [
        "image"
      ],
      "examples": []
    },
    {
      "name": "CreateMessageRequest",
      "type": "object",
      "description": "",
      "properties": {
        "role": {
          "type": "string",
          "enum": [
            "user",
            "assistant"
          ],
          "description": "The role of the entity that is creating the message. Allowed values include:\n- `user`: Indicates the message is sent by an actual user and should be used in most cases to represent user-generated messages.\n- `assistant`: Indicates the message is generated by the assistant. Use this value to insert messages from the assistant into the conversation.\n"
        },
        "content": {
          "anyOf": [
            {
              "type": "string",
              "description": "The text contents of the message.",
              "title": "Text content"
            },
            {
              "type": "array",
              "description": "An array of content parts with a defined type, each can be of type `text` or images can be passed with `image_url` or `image_file`. Image types are only supported on [Vision-compatible models](https://platform.openai.com/docs/models).",
              "title": "Array of content parts",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/MessageContentImageFileObject"
                  },
                  {
                    "$ref": "#/components/schemas/MessageContentImageUrlObject"
                  },
                  {
                    "$ref": "#/components/schemas/MessageRequestContentTextObject"
                  }
                ],
                "discriminator": {
                  "propertyName": "type"
                }
              },
              "minItems": 1
            }
          ]
        },
        "attachments": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "file_id": {
                "type": "string",
                "description": "The ID of the file to attach to the message."
              },
              "tools": {
                "description": "The tools to add this file to.",
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/AssistantToolsCode"
                    },
                    {
                      "$ref": "#/components/schemas/AssistantToolsFileSearchTypeOnly"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "type"
                  }
                }
              }
            }
          },
          "description": "A list of files attached to the message, and the tools they should be added to.",
          "required": [
            "file_id",
            "tools"
          ],
          "nullable": true
        },
        "metadata": {
          "$ref": "#/components/schemas/Metadata"
        }
      },
      "required": [
        "role",
        "content"
      ],
      "examples": []
    },
    {
      "name": "CreateModelResponseProperties",
      "type": "object",
      "description": "",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "CreateModerationRequest",
      "type": "object",
      "description": "",
      "properties": {
        "input": {
          "description": "Input (or inputs) to classify. Can be a single string, an array of strings, or\nan array of multi-modal input objects similar to other models.\n",
          "anyOf": [
            {
              "type": "string",
              "description": "A string of text to classify for moderation.",
              "default": "",
              "example": "I want to kill them."
            },
            {
              "type": "array",
              "description": "An array of strings to classify for moderation.",
              "items": {
                "type": "string",
                "default": "",
                "example": "I want to kill them."
              }
            },
            {
              "type": "array",
              "description": "An array of multi-modal inputs to the moderation model.",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/ModerationImageURLInput"
                  },
                  {
                    "$ref": "#/components/schemas/ModerationTextInput"
                  }
                ],
                "discriminator": {
                  "propertyName": "type"
                }
              },
              "title": "Moderation Multi Modal Array"
            }
          ]
        },
        "model": {
          "description": "The content moderation model you would like to use. Learn more in\n[the moderation guide](https://platform.openai.com/docs/guides/moderation), and learn about\navailable models [here](https://platform.openai.com/docs/models#moderation).\n",
          "nullable": false,
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "string",
              "enum": [
                "omni-moderation-latest",
                "omni-moderation-2024-09-26",
                "text-moderation-latest",
                "text-moderation-stable"
              ],
              "x-stainless-nominal": false
            }
          ],
          "x-oaiTypeLabel": "string"
        }
      },
      "required": [
        "input"
      ],
      "examples": []
    },
    {
      "name": "CreateModerationResponse",
      "type": "object",
      "description": "Represents if a given text input is potentially harmful.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier for the moderation request."
        },
        "model": {
          "type": "string",
          "description": "The model used to generate the moderation results."
        },
        "results": {
          "type": "array",
          "description": "A list of moderation objects.",
          "items": {
            "type": "object",
            "properties": {
              "flagged": {
                "type": "boolean",
                "description": "Whether any of the below categories are flagged."
              },
              "categories": {
                "type": "object",
                "description": "A list of the categories, and whether they are flagged or not.",
                "properties": {
                  "hate": {
                    "type": "boolean",
                    "description": "Content that expresses, incites, or promotes hate based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste. Hateful content aimed at non-protected groups (e.g., chess players) is harassment."
                  },
                  "hate/threatening": {
                    "type": "boolean",
                    "description": "Hateful content that also includes violence or serious harm towards the targeted group based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste."
                  },
                  "harassment": {
                    "type": "boolean",
                    "description": "Content that expresses, incites, or promotes harassing language towards any target."
                  },
                  "harassment/threatening": {
                    "type": "boolean",
                    "description": "Harassment content that also includes violence or serious harm towards any target."
                  },
                  "illicit": {
                    "type": "boolean",
                    "nullable": true,
                    "description": "Content that includes instructions or advice that facilitate the planning or execution of wrongdoing, or that gives advice or instruction on how to commit illicit acts. For example, \"how to shoplift\" would fit this category."
                  },
                  "illicit/violent": {
                    "type": "boolean",
                    "nullable": true,
                    "description": "Content that includes instructions or advice that facilitate the planning or execution of wrongdoing that also includes violence, or that gives advice or instruction on the procurement of any weapon."
                  },
                  "self-harm": {
                    "type": "boolean",
                    "description": "Content that promotes, encourages, or depicts acts of self-harm, such as suicide, cutting, and eating disorders."
                  },
                  "self-harm/intent": {
                    "type": "boolean",
                    "description": "Content where the speaker expresses that they are engaging or intend to engage in acts of self-harm, such as suicide, cutting, and eating disorders."
                  },
                  "self-harm/instructions": {
                    "type": "boolean",
                    "description": "Content that encourages performing acts of self-harm, such as suicide, cutting, and eating disorders, or that gives instructions or advice on how to commit such acts."
                  },
                  "sexual": {
                    "type": "boolean",
                    "description": "Content meant to arouse sexual excitement, such as the description of sexual activity, or that promotes sexual services (excluding sex education and wellness)."
                  },
                  "sexual/minors": {
                    "type": "boolean",
                    "description": "Sexual content that includes an individual who is under 18 years old."
                  },
                  "violence": {
                    "type": "boolean",
                    "description": "Content that depicts death, violence, or physical injury."
                  },
                  "violence/graphic": {
                    "type": "boolean",
                    "description": "Content that depicts death, violence, or physical injury in graphic detail."
                  }
                },
                "required": [
                  "hate",
                  "hate/threatening",
                  "harassment",
                  "harassment/threatening",
                  "illicit",
                  "illicit/violent",
                  "self-harm",
                  "self-harm/intent",
                  "self-harm/instructions",
                  "sexual",
                  "sexual/minors",
                  "violence",
                  "violence/graphic"
                ]
              },
              "category_scores": {
                "type": "object",
                "description": "A list of the categories along with their scores as predicted by model.",
                "properties": {
                  "hate": {
                    "type": "number",
                    "description": "The score for the category 'hate'."
                  },
                  "hate/threatening": {
                    "type": "number",
                    "description": "The score for the category 'hate/threatening'."
                  },
                  "harassment": {
                    "type": "number",
                    "description": "The score for the category 'harassment'."
                  },
                  "harassment/threatening": {
                    "type": "number",
                    "description": "The score for the category 'harassment/threatening'."
                  },
                  "illicit": {
                    "type": "number",
                    "description": "The score for the category 'illicit'."
                  },
                  "illicit/violent": {
                    "type": "number",
                    "description": "The score for the category 'illicit/violent'."
                  },
                  "self-harm": {
                    "type": "number",
                    "description": "The score for the category 'self-harm'."
                  },
                  "self-harm/intent": {
                    "type": "number",
                    "description": "The score for the category 'self-harm/intent'."
                  },
                  "self-harm/instructions": {
                    "type": "number",
                    "description": "The score for the category 'self-harm/instructions'."
                  },
                  "sexual": {
                    "type": "number",
                    "description": "The score for the category 'sexual'."
                  },
                  "sexual/minors": {
                    "type": "number",
                    "description": "The score for the category 'sexual/minors'."
                  },
                  "violence": {
                    "type": "number",
                    "description": "The score for the category 'violence'."
                  },
                  "violence/graphic": {
                    "type": "number",
                    "description": "The score for the category 'violence/graphic'."
                  }
                },
                "required": [
                  "hate",
                  "hate/threatening",
                  "harassment",
                  "harassment/threatening",
                  "illicit",
                  "illicit/violent",
                  "self-harm",
                  "self-harm/intent",
                  "self-harm/instructions",
                  "sexual",
                  "sexual/minors",
                  "violence",
                  "violence/graphic"
                ]
              },
              "category_applied_input_types": {
                "type": "object",
                "description": "A list of the categories along with the input type(s) that the score applies to.",
                "properties": {
                  "hate": {
                    "type": "array",
                    "description": "The applied input type(s) for the category 'hate'.",
                    "items": {
                      "type": "string",
                      "enum": [
                        "text"
                      ],
                      "x-stainless-const": true
                    }
                  },
                  "hate/threatening": {
                    "type": "array",
                    "description": "The applied input type(s) for the category 'hate/threatening'.",
                    "items": {
                      "type": "string",
                      "enum": [
                        "text"
                      ],
                      "x-stainless-const": true
                    }
                  },
                  "harassment": {
                    "type": "array",
                    "description": "The applied input type(s) for the category 'harassment'.",
                    "items": {
                      "type": "string",
                      "enum": [
                        "text"
                      ],
                      "x-stainless-const": true
                    }
                  },
                  "harassment/threatening": {
                    "type": "array",
                    "description": "The applied input type(s) for the category 'harassment/threatening'.",
                    "items": {
                      "type": "string",
                      "enum": [
                        "text"
                      ],
                      "x-stainless-const": true
                    }
                  },
                  "illicit": {
                    "type": "array",
                    "description": "The applied input type(s) for the category 'illicit'.",
                    "items": {
                      "type": "string",
                      "enum": [
                        "text"
                      ],
                      "x-stainless-const": true
                    }
                  },
                  "illicit/violent": {
                    "type": "array",
                    "description": "The applied input type(s) for the category 'illicit/violent'.",
                    "items": {
                      "type": "string",
                      "enum": [
                        "text"
                      ],
                      "x-stainless-const": true
                    }
                  },
                  "self-harm": {
                    "type": "array",
                    "description": "The applied input type(s) for the category 'self-harm'.",
                    "items": {
                      "type": "string",
                      "enum": [
                        "text",
                        "image"
                      ]
                    }
                  },
                  "self-harm/intent": {
                    "type": "array",
                    "description": "The applied input type(s) for the category 'self-harm/intent'.",
                    "items": {
                      "type": "string",
                      "enum": [
                        "text",
                        "image"
                      ]
                    }
                  },
                  "self-harm/instructions": {
                    "type": "array",
                    "description": "The applied input type(s) for the category 'self-harm/instructions'.",
                    "items": {
                      "type": "string",
                      "enum": [
                        "text",
                        "image"
                      ]
                    }
                  },
                  "sexual": {
                    "type": "array",
                    "description": "The applied input type(s) for the category 'sexual'.",
                    "items": {
                      "type": "string",
                      "enum": [
                        "text",
                        "image"
                      ]
                    }
                  },
                  "sexual/minors": {
                    "type": "array",
                    "description": "The applied input type(s) for the category 'sexual/minors'.",
                    "items": {
                      "type": "string",
                      "enum": [
                        "text"
                      ],
                      "x-stainless-const": true
                    }
                  },
                  "violence": {
                    "type": "array",
                    "description": "The applied input type(s) for the category 'violence'.",
                    "items": {
                      "type": "string",
                      "enum": [
                        "text",
                        "image"
                      ]
                    }
                  },
                  "violence/graphic": {
                    "type": "array",
                    "description": "The applied input type(s) for the category 'violence/graphic'.",
                    "items": {
                      "type": "string",
                      "enum": [
                        "text",
                        "image"
                      ]
                    }
                  }
                },
                "required": [
                  "hate",
                  "hate/threatening",
                  "harassment",
                  "harassment/threatening",
                  "illicit",
                  "illicit/violent",
                  "self-harm",
                  "self-harm/intent",
                  "self-harm/instructions",
                  "sexual",
                  "sexual/minors",
                  "violence",
                  "violence/graphic"
                ]
              }
            },
            "required": [
              "flagged",
              "categories",
              "category_scores",
              "category_applied_input_types"
            ]
          }
        }
      },
      "required": [
        "id",
        "model",
        "results"
      ],
      "examples": []
    },
    {
      "name": "CreateResponse",
      "type": "object",
      "description": "",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "CreateRunRequest",
      "type": "object",
      "description": "",
      "properties": {
        "assistant_id": {
          "description": "The ID of the [assistant](https://platform.openai.com/docs/api-reference/assistants) to use to execute this run.",
          "type": "string"
        },
        "model": {
          "description": "The ID of the [Model](https://platform.openai.com/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/components/schemas/AssistantSupportedModels"
            }
          ],
          "x-oaiTypeLabel": "string",
          "nullable": true
        },
        "reasoning_effort": {
          "$ref": "#/components/schemas/ReasoningEffort"
        },
        "instructions": {
          "description": "Overrides the [instructions](https://platform.openai.com/docs/api-reference/assistants/createAssistant) of the assistant. This is useful for modifying the behavior on a per-run basis.",
          "type": "string",
          "nullable": true
        },
        "additional_instructions": {
          "description": "Appends additional instructions at the end of the instructions for the run. This is useful for modifying the behavior on a per-run basis without overriding other instructions.",
          "type": "string",
          "nullable": true
        },
        "additional_messages": {
          "description": "Adds additional messages to the thread before creating the run.",
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/CreateMessageRequest"
          },
          "nullable": true
        },
        "tools": {
          "description": "Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.",
          "nullable": true,
          "type": "array",
          "maxItems": 20,
          "items": {
            "$ref": "#/components/schemas/AssistantTool"
          }
        },
        "metadata": {
          "$ref": "#/components/schemas/Metadata"
        },
        "temperature": {
          "type": "number",
          "minimum": 0,
          "maximum": 2,
          "default": 1,
          "example": 1,
          "nullable": true,
          "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n"
        },
        "top_p": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "default": 1,
          "example": 1,
          "nullable": true,
          "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.\n"
        },
        "stream": {
          "type": "boolean",
          "nullable": true,
          "description": "If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.\n"
        },
        "max_prompt_tokens": {
          "type": "integer",
          "nullable": true,
          "description": "The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.\n",
          "minimum": 256
        },
        "max_completion_tokens": {
          "type": "integer",
          "nullable": true,
          "description": "The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.\n",
          "minimum": 256
        },
        "truncation_strategy": {
          "allOf": [
            {
              "$ref": "#/components/schemas/TruncationObject"
            },
            {
              "nullable": true
            }
          ]
        },
        "tool_choice": {
          "allOf": [
            {
              "$ref": "#/components/schemas/AssistantsApiToolChoiceOption"
            },
            {
              "nullable": true
            }
          ]
        },
        "parallel_tool_calls": {
          "$ref": "#/components/schemas/ParallelToolCalls"
        },
        "response_format": {
          "$ref": "#/components/schemas/AssistantsApiResponseFormatOption",
          "nullable": true
        }
      },
      "required": [
        "assistant_id"
      ],
      "examples": []
    },
    {
      "name": "CreateSpeechRequest",
      "type": "object",
      "description": "",
      "properties": {
        "model": {
          "description": "One of the available [TTS models](https://platform.openai.com/docs/models#tts): `tts-1`, `tts-1-hd` or `gpt-4o-mini-tts`.\n",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "string",
              "enum": [
                "tts-1",
                "tts-1-hd",
                "gpt-4o-mini-tts"
              ],
              "x-stainless-nominal": false
            }
          ],
          "x-oaiTypeLabel": "string"
        },
        "input": {
          "type": "string",
          "description": "The text to generate audio for. The maximum length is 4096 characters.",
          "maxLength": 4096
        },
        "instructions": {
          "type": "string",
          "description": "Control the voice of your generated audio with additional instructions. Does not work with `tts-1` or `tts-1-hd`.",
          "maxLength": 4096
        },
        "voice": {
          "description": "The voice to use when generating the audio. Supported voices are `alloy`, `ash`, `ballad`, `coral`, `echo`, `fable`, `onyx`, `nova`, `sage`, `shimmer`, and `verse`. Previews of the voices are available in the [Text to speech guide](https://platform.openai.com/docs/guides/text-to-speech#voice-options).",
          "$ref": "#/components/schemas/VoiceIdsShared"
        },
        "response_format": {
          "description": "The format to audio in. Supported formats are `mp3`, `opus`, `aac`, `flac`, `wav`, and `pcm`.",
          "default": "mp3",
          "type": "string",
          "enum": [
            "mp3",
            "opus",
            "aac",
            "flac",
            "wav",
            "pcm"
          ]
        },
        "speed": {
          "description": "The speed of the generated audio. Select a value from `0.25` to `4.0`. `1.0` is the default.",
          "type": "number",
          "default": 1,
          "minimum": 0.25,
          "maximum": 4
        },
        "stream_format": {
          "description": "The format to stream the audio in. Supported formats are `sse` and `audio`. `sse` is not supported for `tts-1` or `tts-1-hd`.",
          "type": "string",
          "default": "audio",
          "enum": [
            "sse",
            "audio"
          ]
        }
      },
      "required": [
        "model",
        "input",
        "voice"
      ],
      "examples": []
    },
    {
      "name": "CreateSpeechResponseStreamEvent",
      "type": "object",
      "description": "",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "CreateThreadAndRunRequest",
      "type": "object",
      "description": "",
      "properties": {
        "assistant_id": {
          "description": "The ID of the [assistant](https://platform.openai.com/docs/api-reference/assistants) to use to execute this run.",
          "type": "string"
        },
        "thread": {
          "$ref": "#/components/schemas/CreateThreadRequest"
        },
        "model": {
          "description": "The ID of the [Model](https://platform.openai.com/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "string",
              "enum": [
                "gpt-5",
                "gpt-5-mini",
                "gpt-5-nano",
                "gpt-5-2025-08-07",
                "gpt-5-mini-2025-08-07",
                "gpt-5-nano-2025-08-07",
                "gpt-4.1",
                "gpt-4.1-mini",
                "gpt-4.1-nano",
                "gpt-4.1-2025-04-14",
                "gpt-4.1-mini-2025-04-14",
                "gpt-4.1-nano-2025-04-14",
                "gpt-4o",
                "gpt-4o-2024-11-20",
                "gpt-4o-2024-08-06",
                "gpt-4o-2024-05-13",
                "gpt-4o-mini",
                "gpt-4o-mini-2024-07-18",
                "gpt-4.5-preview",
                "gpt-4.5-preview-2025-02-27",
                "gpt-4-turbo",
                "gpt-4-turbo-2024-04-09",
                "gpt-4-0125-preview",
                "gpt-4-turbo-preview",
                "gpt-4-1106-preview",
                "gpt-4-vision-preview",
                "gpt-4",
                "gpt-4-0314",
                "gpt-4-0613",
                "gpt-4-32k",
                "gpt-4-32k-0314",
                "gpt-4-32k-0613",
                "gpt-3.5-turbo",
                "gpt-3.5-turbo-16k",
                "gpt-3.5-turbo-0613",
                "gpt-3.5-turbo-1106",
                "gpt-3.5-turbo-0125",
                "gpt-3.5-turbo-16k-0613"
              ]
            }
          ],
          "x-oaiTypeLabel": "string",
          "nullable": true
        },
        "instructions": {
          "description": "Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis.",
          "type": "string",
          "nullable": true
        },
        "tools": {
          "description": "Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.",
          "nullable": true,
          "type": "array",
          "maxItems": 20,
          "items": {
            "$ref": "#/components/schemas/AssistantTool"
          }
        },
        "tool_resources": {
          "type": "object",
          "description": "A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n",
          "properties": {
            "code_interpreter": {
              "type": "object",
              "properties": {
                "file_ids": {
                  "type": "array",
                  "description": "A list of [file](https://platform.openai.com/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.\n",
                  "default": [],
                  "maxItems": 20,
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "file_search": {
              "type": "object",
              "properties": {
                "vector_store_ids": {
                  "type": "array",
                  "description": "The ID of the [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.\n",
                  "maxItems": 1,
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "nullable": true
        },
        "metadata": {
          "$ref": "#/components/schemas/Metadata"
        },
        "temperature": {
          "type": "number",
          "minimum": 0,
          "maximum": 2,
          "default": 1,
          "example": 1,
          "nullable": true,
          "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n"
        },
        "top_p": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "default": 1,
          "example": 1,
          "nullable": true,
          "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.\n"
        },
        "stream": {
          "type": "boolean",
          "nullable": true,
          "description": "If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.\n"
        },
        "max_prompt_tokens": {
          "type": "integer",
          "nullable": true,
          "description": "The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.\n",
          "minimum": 256
        },
        "max_completion_tokens": {
          "type": "integer",
          "nullable": true,
          "description": "The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.\n",
          "minimum": 256
        },
        "truncation_strategy": {
          "allOf": [
            {
              "$ref": "#/components/schemas/TruncationObject"
            },
            {
              "nullable": true
            }
          ]
        },
        "tool_choice": {
          "allOf": [
            {
              "$ref": "#/components/schemas/AssistantsApiToolChoiceOption"
            },
            {
              "nullable": true
            }
          ]
        },
        "parallel_tool_calls": {
          "$ref": "#/components/schemas/ParallelToolCalls"
        },
        "response_format": {
          "$ref": "#/components/schemas/AssistantsApiResponseFormatOption",
          "nullable": true
        }
      },
      "required": [
        "assistant_id"
      ],
      "examples": []
    },
    {
      "name": "CreateThreadRequest",
      "type": "object",
      "description": "Options to create a new thread. If no thread is provided when running a \nrequest, an empty thread will be created.\n",
      "properties": {
        "messages": {
          "description": "A list of [messages](https://platform.openai.com/docs/api-reference/messages) to start the thread with.",
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/CreateMessageRequest"
          }
        },
        "tool_resources": {
          "type": "object",
          "description": "A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n",
          "properties": {
            "code_interpreter": {
              "type": "object",
              "properties": {
                "file_ids": {
                  "type": "array",
                  "description": "A list of [file](https://platform.openai.com/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.\n",
                  "default": [],
                  "maxItems": 20,
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "file_search": {
              "type": "object",
              "properties": {
                "vector_store_ids": {
                  "type": "array",
                  "description": "The [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.\n",
                  "maxItems": 1,
                  "items": {
                    "type": "string"
                  }
                },
                "vector_stores": {
                  "type": "array",
                  "description": "A helper to create a [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object) with file_ids and attach it to this thread. There can be a maximum of 1 vector store attached to the thread.\n",
                  "maxItems": 1,
                  "items": {
                    "type": "object",
                    "properties": {
                      "file_ids": {
                        "type": "array",
                        "description": "A list of [file](https://platform.openai.com/docs/api-reference/files) IDs to add to the vector store. There can be a maximum of 10000 files in a vector store.\n",
                        "maxItems": 10000,
                        "items": {
                          "type": "string"
                        }
                      },
                      "chunking_strategy": {
                        "type": "object",
                        "description": "The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.",
                        "anyOf": [
                          {
                            "type": "object",
                            "title": "Auto Chunking Strategy",
                            "description": "The default strategy. This strategy currently uses a `max_chunk_size_tokens` of `800` and `chunk_overlap_tokens` of `400`.",
                            "additionalProperties": false,
                            "properties": {
                              "type": {
                                "type": "string",
                                "description": "Always `auto`.",
                                "enum": [
                                  "auto"
                                ],
                                "x-stainless-const": true
                              }
                            },
                            "required": [
                              "type"
                            ]
                          },
                          {
                            "type": "object",
                            "title": "Static Chunking Strategy",
                            "additionalProperties": false,
                            "properties": {
                              "type": {
                                "type": "string",
                                "description": "Always `static`.",
                                "enum": [
                                  "static"
                                ],
                                "x-stainless-const": true
                              },
                              "static": {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "max_chunk_size_tokens": {
                                    "type": "integer",
                                    "minimum": 100,
                                    "maximum": 4096,
                                    "description": "The maximum number of tokens in each chunk. The default value is `800`. The minimum value is `100` and the maximum value is `4096`."
                                  },
                                  "chunk_overlap_tokens": {
                                    "type": "integer",
                                    "description": "The number of tokens that overlap between chunks. The default value is `400`.\n\nNote that the overlap must not exceed half of `max_chunk_size_tokens`.\n"
                                  }
                                },
                                "required": [
                                  "max_chunk_size_tokens",
                                  "chunk_overlap_tokens"
                                ]
                              }
                            },
                            "required": [
                              "type",
                              "static"
                            ],
                            "x-stainless-naming": {
                              "java": {
                                "type_name": "StaticObject"
                              },
                              "kotlin": {
                                "type_name": "StaticObject"
                              }
                            }
                          }
                        ],
                        "discriminator": {
                          "propertyName": "type"
                        }
                      },
                      "metadata": {
                        "$ref": "#/components/schemas/Metadata"
                      }
                    }
                  }
                }
              },
              "anyOf": [
                {
                  "required": [
                    "vector_store_ids"
                  ]
                },
                {
                  "required": [
                    "vector_stores"
                  ]
                }
              ]
            }
          },
          "nullable": true
        },
        "metadata": {
          "$ref": "#/components/schemas/Metadata"
        }
      },
      "required": [],
      "examples": []
    },
    {
      "name": "CreateTranscriptionRequest",
      "type": "object",
      "description": "",
      "properties": {
        "file": {
          "description": "The audio file object (not file name) to transcribe, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.\n",
          "type": "string",
          "x-oaiTypeLabel": "file",
          "format": "binary",
          "x-oaiMeta": {
            "exampleFilePath": "speech.mp3"
          }
        },
        "model": {
          "description": "ID of the model to use. The options are `gpt-4o-transcribe`, `gpt-4o-mini-transcribe`, and `whisper-1` (which is powered by our open source Whisper V2 model).\n",
          "example": "gpt-4o-transcribe",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "string",
              "enum": [
                "whisper-1",
                "gpt-4o-transcribe",
                "gpt-4o-mini-transcribe"
              ],
              "x-stainless-const": true,
              "x-stainless-nominal": false
            }
          ],
          "x-oaiTypeLabel": "string"
        },
        "language": {
          "description": "The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g. `en`) format will improve accuracy and latency.\n",
          "type": "string"
        },
        "prompt": {
          "description": "An optional text to guide the model's style or continue a previous audio segment. The [prompt](https://platform.openai.com/docs/guides/speech-to-text#prompting) should match the audio language.\n",
          "type": "string"
        },
        "response_format": {
          "$ref": "#/components/schemas/AudioResponseFormat"
        },
        "temperature": {
          "description": "The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.\n",
          "type": "number",
          "default": 0
        },
        "stream": {
          "description": "If set to true, the model response data will be streamed to the client\nas it is generated using [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format). \nSee the [Streaming section of the Speech-to-Text guide](https://platform.openai.com/docs/guides/speech-to-text?lang=curl#streaming-transcriptions)\nfor more information.\n\nNote: Streaming is not supported for the `whisper-1` model and will be ignored.\n",
          "type": "boolean",
          "nullable": true,
          "default": false
        },
        "chunking_strategy": {
          "$ref": "#/components/schemas/TranscriptionChunkingStrategy"
        },
        "timestamp_granularities": {
          "description": "The timestamp granularities to populate for this transcription. `response_format` must be set `verbose_json` to use timestamp granularities. Either or both of these options are supported: `word`, or `segment`. Note: There is no additional latency for segment timestamps, but generating word timestamps incurs additional latency.\n",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "word",
              "segment"
            ]
          },
          "default": [
            "segment"
          ]
        },
        "include": {
          "description": "Additional information to include in the transcription response. \n`logprobs` will return the log probabilities of the tokens in the \nresponse to understand the model's confidence in the transcription. \n`logprobs` only works with response_format set to `json` and only with \nthe models `gpt-4o-transcribe` and `gpt-4o-mini-transcribe`.\n",
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/TranscriptionInclude"
          }
        }
      },
      "required": [
        "file",
        "model"
      ],
      "examples": []
    },
    {
      "name": "CreateTranscriptionResponseJson",
      "type": "object",
      "description": "Represents a transcription response returned by model, based on the provided input.",
      "properties": {
        "text": {
          "type": "string",
          "description": "The transcribed text."
        },
        "logprobs": {
          "type": "array",
          "optional": true,
          "description": "The log probabilities of the tokens in the transcription. Only returned with the models `gpt-4o-transcribe` and `gpt-4o-mini-transcribe` if `logprobs` is added to the `include` array.\n",
          "items": {
            "type": "object",
            "properties": {
              "token": {
                "type": "string",
                "description": "The token in the transcription."
              },
              "logprob": {
                "type": "number",
                "description": "The log probability of the token."
              },
              "bytes": {
                "type": "array",
                "items": {
                  "type": "number"
                },
                "description": "The bytes of the token."
              }
            }
          }
        },
        "usage": {
          "type": "object",
          "description": "Token usage statistics for the request.",
          "anyOf": [
            {
              "$ref": "#/components/schemas/TranscriptTextUsageTokens",
              "title": "Token Usage"
            },
            {
              "$ref": "#/components/schemas/TranscriptTextUsageDuration",
              "title": "Duration Usage"
            }
          ],
          "discriminator": {
            "propertyName": "type"
          }
        }
      },
      "required": [
        "text"
      ],
      "examples": []
    },
    {
      "name": "CreateTranscriptionResponseStreamEvent",
      "type": "object",
      "description": "",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "CreateTranscriptionResponseVerboseJson",
      "type": "object",
      "description": "Represents a verbose json transcription response returned by model, based on the provided input.",
      "properties": {
        "language": {
          "type": "string",
          "description": "The language of the input audio."
        },
        "duration": {
          "type": "number",
          "description": "The duration of the input audio."
        },
        "text": {
          "type": "string",
          "description": "The transcribed text."
        },
        "words": {
          "type": "array",
          "description": "Extracted words and their corresponding timestamps.",
          "items": {
            "$ref": "#/components/schemas/TranscriptionWord"
          }
        },
        "segments": {
          "type": "array",
          "description": "Segments of the transcribed text and their corresponding details.",
          "items": {
            "$ref": "#/components/schemas/TranscriptionSegment"
          }
        },
        "usage": {
          "$ref": "#/components/schemas/TranscriptTextUsageDuration"
        }
      },
      "required": [
        "language",
        "duration",
        "text"
      ],
      "examples": []
    },
    {
      "name": "CreateTranslationRequest",
      "type": "object",
      "description": "",
      "properties": {
        "file": {
          "description": "The audio file object (not file name) translate, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.\n",
          "type": "string",
          "x-oaiTypeLabel": "file",
          "format": "binary",
          "x-oaiMeta": {
            "exampleFilePath": "speech.mp3"
          }
        },
        "model": {
          "description": "ID of the model to use. Only `whisper-1` (which is powered by our open source Whisper V2 model) is currently available.\n",
          "example": "whisper-1",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "string",
              "enum": [
                "whisper-1"
              ],
              "x-stainless-const": true
            }
          ],
          "x-oaiTypeLabel": "string"
        },
        "prompt": {
          "description": "An optional text to guide the model's style or continue a previous audio segment. The [prompt](https://platform.openai.com/docs/guides/speech-to-text#prompting) should be in English.\n",
          "type": "string"
        },
        "response_format": {
          "description": "The format of the output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`.\n",
          "type": "string",
          "enum": [
            "json",
            "text",
            "srt",
            "verbose_json",
            "vtt"
          ],
          "default": "json"
        },
        "temperature": {
          "description": "The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.\n",
          "type": "number",
          "default": 0
        }
      },
      "required": [
        "file",
        "model"
      ],
      "examples": []
    },
    {
      "name": "CreateTranslationResponseJson",
      "type": "object",
      "description": "",
      "properties": {
        "text": {
          "type": "string"
        }
      },
      "required": [
        "text"
      ],
      "examples": []
    },
    {
      "name": "CreateTranslationResponseVerboseJson",
      "type": "object",
      "description": "",
      "properties": {
        "language": {
          "type": "string",
          "description": "The language of the output translation (always `english`)."
        },
        "duration": {
          "type": "number",
          "description": "The duration of the input audio."
        },
        "text": {
          "type": "string",
          "description": "The translated text."
        },
        "segments": {
          "type": "array",
          "description": "Segments of the translated text and their corresponding details.",
          "items": {
            "$ref": "#/components/schemas/TranscriptionSegment"
          }
        }
      },
      "required": [
        "language",
        "duration",
        "text"
      ],
      "examples": []
    },
    {
      "name": "CreateUploadRequest",
      "type": "object",
      "description": "",
      "properties": {
        "filename": {
          "description": "The name of the file to upload.\n",
          "type": "string"
        },
        "purpose": {
          "description": "The intended purpose of the uploaded file.\n\nSee the [documentation on File purposes](https://platform.openai.com/docs/api-reference/files/create#files-create-purpose).\n",
          "type": "string",
          "enum": [
            "assistants",
            "batch",
            "fine-tune",
            "vision"
          ]
        },
        "bytes": {
          "description": "The number of bytes in the file you are uploading.\n",
          "type": "integer"
        },
        "mime_type": {
          "description": "The MIME type of the file.\n\nThis must fall within the supported MIME types for your file purpose. See the supported MIME types for assistants and vision.\n",
          "type": "string"
        },
        "expires_after": {
          "$ref": "#/components/schemas/FileExpirationAfter"
        }
      },
      "required": [
        "filename",
        "purpose",
        "bytes",
        "mime_type"
      ],
      "examples": []
    },
    {
      "name": "CreateVectorStoreFileBatchRequest",
      "type": "object",
      "description": "",
      "properties": {
        "file_ids": {
          "description": "A list of [File](https://platform.openai.com/docs/api-reference/files) IDs that the vector store should use. Useful for tools like `file_search` that can access files.",
          "type": "array",
          "minItems": 1,
          "maxItems": 500,
          "items": {
            "type": "string"
          }
        },
        "chunking_strategy": {
          "$ref": "#/components/schemas/ChunkingStrategyRequestParam"
        },
        "attributes": {
          "$ref": "#/components/schemas/VectorStoreFileAttributes"
        }
      },
      "required": [
        "file_ids"
      ],
      "examples": []
    },
    {
      "name": "CreateVectorStoreFileRequest",
      "type": "object",
      "description": "",
      "properties": {
        "file_id": {
          "description": "A [File](https://platform.openai.com/docs/api-reference/files) ID that the vector store should use. Useful for tools like `file_search` that can access files.",
          "type": "string"
        },
        "chunking_strategy": {
          "$ref": "#/components/schemas/ChunkingStrategyRequestParam"
        },
        "attributes": {
          "$ref": "#/components/schemas/VectorStoreFileAttributes"
        }
      },
      "required": [
        "file_id"
      ],
      "examples": []
    },
    {
      "name": "CreateVectorStoreRequest",
      "type": "object",
      "description": "",
      "properties": {
        "file_ids": {
          "description": "A list of [File](https://platform.openai.com/docs/api-reference/files) IDs that the vector store should use. Useful for tools like `file_search` that can access files.",
          "type": "array",
          "maxItems": 500,
          "items": {
            "type": "string"
          }
        },
        "name": {
          "description": "The name of the vector store.",
          "type": "string"
        },
        "expires_after": {
          "$ref": "#/components/schemas/VectorStoreExpirationAfter"
        },
        "chunking_strategy": {
          "$ref": "#/components/schemas/ChunkingStrategyRequestParam"
        },
        "metadata": {
          "$ref": "#/components/schemas/Metadata"
        }
      },
      "required": [],
      "examples": []
    },
    {
      "name": "CustomTool",
      "type": "object",
      "description": "A custom tool that processes input using a specified format. Learn more about\n[custom tools](https://platform.openai.com/docs/guides/function-calling#custom-tools).\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "custom"
          ],
          "description": "The type of the custom tool. Always `custom`.",
          "x-stainless-const": true
        },
        "name": {
          "type": "string",
          "description": "The name of the custom tool, used to identify it in tool calls."
        },
        "description": {
          "type": "string",
          "description": "Optional description of the custom tool, used to provide more context.\n"
        },
        "format": {
          "description": "The input format for the custom tool. Default is unconstrained text.\n",
          "anyOf": [
            {
              "type": "object",
              "title": "Text format",
              "description": "Unconstrained free-form text.",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "text"
                  ],
                  "description": "Unconstrained text format. Always `text`.",
                  "x-stainless-const": true
                }
              },
              "required": [
                "type"
              ],
              "additionalProperties": false
            },
            {
              "type": "object",
              "title": "Grammar format",
              "description": "A grammar defined by the user.",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "grammar"
                  ],
                  "description": "Grammar format. Always `grammar`.",
                  "x-stainless-const": true
                },
                "definition": {
                  "type": "string",
                  "description": "The grammar definition."
                },
                "syntax": {
                  "type": "string",
                  "description": "The syntax of the grammar definition. One of `lark` or `regex`.",
                  "enum": [
                    "lark",
                    "regex"
                  ]
                }
              },
              "required": [
                "type",
                "definition",
                "syntax"
              ],
              "additionalProperties": false
            }
          ],
          "discriminator": {
            "propertyName": "type"
          }
        }
      },
      "required": [
        "type",
        "name"
      ],
      "examples": []
    },
    {
      "name": "CustomToolCall",
      "type": "object",
      "description": "A call to a custom tool created by the model.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "custom_tool_call"
          ],
          "x-stainless-const": true,
          "description": "The type of the custom tool call. Always `custom_tool_call`.\n"
        },
        "id": {
          "type": "string",
          "description": "The unique ID of the custom tool call in the OpenAI platform.\n"
        },
        "call_id": {
          "type": "string",
          "description": "An identifier used to map this custom tool call to a tool call output.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the custom tool being called.\n"
        },
        "input": {
          "type": "string",
          "description": "The input for the custom tool call generated by the model.\n"
        }
      },
      "required": [
        "type",
        "call_id",
        "name",
        "input"
      ],
      "examples": []
    },
    {
      "name": "CustomToolCallOutput",
      "type": "object",
      "description": "The output of a custom tool call from your code, being sent back to the model.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "custom_tool_call_output"
          ],
          "x-stainless-const": true,
          "description": "The type of the custom tool call output. Always `custom_tool_call_output`.\n"
        },
        "id": {
          "type": "string",
          "description": "The unique ID of the custom tool call output in the OpenAI platform.\n"
        },
        "call_id": {
          "type": "string",
          "description": "The call ID, used to map this custom tool call output to a custom tool call.\n"
        },
        "output": {
          "type": "string",
          "description": "The output from the custom tool call generated by your code.\n"
        }
      },
      "required": [
        "type",
        "call_id",
        "output"
      ],
      "examples": []
    },
    {
      "name": "CustomToolChatCompletions",
      "type": "object",
      "description": "A custom tool that processes input using a specified format.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "custom"
          ],
          "description": "The type of the custom tool. Always `custom`.",
          "x-stainless-const": true
        },
        "custom": {
          "type": "object",
          "title": "Custom tool properties",
          "description": "Properties of the custom tool.\n",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the custom tool, used to identify it in tool calls."
            },
            "description": {
              "type": "string",
              "description": "Optional description of the custom tool, used to provide more context.\n"
            },
            "format": {
              "description": "The input format for the custom tool. Default is unconstrained text.\n",
              "anyOf": [
                {
                  "type": "object",
                  "title": "Text format",
                  "description": "Unconstrained free-form text.",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "text"
                      ],
                      "description": "Unconstrained text format. Always `text`.",
                      "x-stainless-const": true
                    }
                  },
                  "required": [
                    "type"
                  ],
                  "additionalProperties": false
                },
                {
                  "type": "object",
                  "title": "Grammar format",
                  "description": "A grammar defined by the user.",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "grammar"
                      ],
                      "description": "Grammar format. Always `grammar`.",
                      "x-stainless-const": true
                    },
                    "grammar": {
                      "type": "object",
                      "title": "Grammar format",
                      "description": "Your chosen grammar.",
                      "properties": {
                        "definition": {
                          "type": "string",
                          "description": "The grammar definition."
                        },
                        "syntax": {
                          "type": "string",
                          "description": "The syntax of the grammar definition. One of `lark` or `regex`.",
                          "enum": [
                            "lark",
                            "regex"
                          ]
                        }
                      },
                      "required": [
                        "definition",
                        "syntax"
                      ]
                    }
                  },
                  "required": [
                    "type",
                    "grammar"
                  ],
                  "additionalProperties": false
                }
              ],
              "discriminator": {
                "propertyName": "type"
              }
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "required": [
        "type",
        "custom"
      ],
      "examples": []
    },
    {
      "name": "DeleteAssistantResponse",
      "type": "object",
      "description": "",
      "properties": {
        "id": {
          "type": "string"
        },
        "deleted": {
          "type": "boolean"
        },
        "object": {
          "type": "string",
          "enum": [
            "assistant.deleted"
          ],
          "x-stainless-const": true
        }
      },
      "required": [
        "id",
        "object",
        "deleted"
      ],
      "examples": []
    },
    {
      "name": "DeleteCertificateResponse",
      "type": "object",
      "description": "",
      "properties": {
        "object": {
          "description": "The object type, must be `certificate.deleted`.",
          "x-stainless-const": true,
          "const": "certificate.deleted"
        },
        "id": {
          "type": "string",
          "description": "The ID of the certificate that was deleted."
        }
      },
      "required": [
        "object",
        "id"
      ],
      "examples": []
    },
    {
      "name": "DeleteFileResponse",
      "type": "object",
      "description": "",
      "properties": {
        "id": {
          "type": "string"
        },
        "object": {
          "type": "string",
          "enum": [
            "file"
          ],
          "x-stainless-const": true
        },
        "deleted": {
          "type": "boolean"
        }
      },
      "required": [
        "id",
        "object",
        "deleted"
      ],
      "examples": []
    },
    {
      "name": "DeleteFineTuningCheckpointPermissionResponse",
      "type": "object",
      "description": "",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the fine-tuned model checkpoint permission that was deleted."
        },
        "object": {
          "type": "string",
          "description": "The object type, which is always \"checkpoint.permission\".",
          "enum": [
            "checkpoint.permission"
          ],
          "x-stainless-const": true
        },
        "deleted": {
          "type": "boolean",
          "description": "Whether the fine-tuned model checkpoint permission was successfully deleted."
        }
      },
      "required": [
        "id",
        "object",
        "deleted"
      ],
      "examples": []
    },
    {
      "name": "DeleteMessageResponse",
      "type": "object",
      "description": "",
      "properties": {
        "id": {
          "type": "string"
        },
        "deleted": {
          "type": "boolean"
        },
        "object": {
          "type": "string",
          "enum": [
            "thread.message.deleted"
          ],
          "x-stainless-const": true
        }
      },
      "required": [
        "id",
        "object",
        "deleted"
      ],
      "examples": []
    },
    {
      "name": "DeleteModelResponse",
      "type": "object",
      "description": "",
      "properties": {
        "id": {
          "type": "string"
        },
        "deleted": {
          "type": "boolean"
        },
        "object": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "object",
        "deleted"
      ],
      "examples": []
    },
    {
      "name": "DeleteThreadResponse",
      "type": "object",
      "description": "",
      "properties": {
        "id": {
          "type": "string"
        },
        "deleted": {
          "type": "boolean"
        },
        "object": {
          "type": "string",
          "enum": [
            "thread.deleted"
          ],
          "x-stainless-const": true
        }
      },
      "required": [
        "id",
        "object",
        "deleted"
      ],
      "examples": []
    },
    {
      "name": "DeleteVectorStoreFileResponse",
      "type": "object",
      "description": "",
      "properties": {
        "id": {
          "type": "string"
        },
        "deleted": {
          "type": "boolean"
        },
        "object": {
          "type": "string",
          "enum": [
            "vector_store.file.deleted"
          ],
          "x-stainless-const": true
        }
      },
      "required": [
        "id",
        "object",
        "deleted"
      ],
      "examples": []
    },
    {
      "name": "DeleteVectorStoreResponse",
      "type": "object",
      "description": "",
      "properties": {
        "id": {
          "type": "string"
        },
        "deleted": {
          "type": "boolean"
        },
        "object": {
          "type": "string",
          "enum": [
            "vector_store.deleted"
          ],
          "x-stainless-const": true
        }
      },
      "required": [
        "id",
        "object",
        "deleted"
      ],
      "examples": []
    },
    {
      "name": "DeletedConversation",
      "type": "object",
      "description": "",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "DoneEvent",
      "type": "object",
      "description": "Occurs when a stream ends.",
      "properties": {
        "event": {
          "type": "string",
          "enum": [
            "done"
          ],
          "x-stainless-const": true
        },
        "data": {
          "type": "string",
          "enum": [
            "[DONE]"
          ],
          "x-stainless-const": true
        }
      },
      "required": [
        "event",
        "data"
      ],
      "examples": []
    },
    {
      "name": "DoubleClick",
      "type": "object",
      "description": "A double click action.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "double_click"
          ],
          "default": "double_click",
          "description": "Specifies the event type. For a double click action, this property is \nalways set to `double_click`.\n",
          "x-stainless-const": true
        },
        "x": {
          "type": "integer",
          "description": "The x-coordinate where the double click occurred.\n"
        },
        "y": {
          "type": "integer",
          "description": "The y-coordinate where the double click occurred.\n"
        }
      },
      "required": [
        "type",
        "x",
        "y"
      ],
      "examples": []
    },
    {
      "name": "Drag",
      "type": "object",
      "description": "A drag action.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "drag"
          ],
          "default": "drag",
          "description": "Specifies the event type. For a drag action, this property is \nalways set to `drag`.\n",
          "x-stainless-const": true
        },
        "path": {
          "type": "array",
          "description": "An array of coordinates representing the path of the drag action. Coordinates will appear as an array\nof objects, eg\n```\n[\n  { x: 100, y: 200 },\n  { x: 200, y: 300 }\n]\n```\n",
          "items": {
            "title": "Drag path coordinates",
            "description": "A series of x/y coordinate pairs in the drag path.\n",
            "$ref": "#/components/schemas/Coordinate"
          }
        }
      },
      "required": [
        "type",
        "path"
      ],
      "examples": []
    },
    {
      "name": "EasyInputMessage",
      "type": "object",
      "description": "A message input to the model with a role indicating instruction following\nhierarchy. Instructions given with the `developer` or `system` role take\nprecedence over instructions given with the `user` role. Messages with the\n`assistant` role are presumed to have been generated by the model in previous\ninteractions.\n",
      "properties": {
        "role": {
          "type": "string",
          "description": "The role of the message input. One of `user`, `assistant`, `system`, or\n`developer`.\n",
          "enum": [
            "user",
            "assistant",
            "system",
            "developer"
          ]
        },
        "content": {
          "description": "Text, image, or audio input to the model, used to generate a response.\nCan also contain previous assistant responses.\n",
          "anyOf": [
            {
              "type": "string",
              "title": "Text input",
              "description": "A text input to the model.\n"
            },
            {
              "$ref": "#/components/schemas/InputMessageContentList"
            }
          ]
        },
        "type": {
          "type": "string",
          "description": "The type of the message input. Always `message`.\n",
          "enum": [
            "message"
          ],
          "x-stainless-const": true
        }
      },
      "required": [
        "role",
        "content"
      ],
      "examples": []
    },
    {
      "name": "Embedding",
      "type": "object",
      "description": "Represents an embedding vector returned by embedding endpoint.\n",
      "properties": {
        "index": {
          "type": "integer",
          "description": "The index of the embedding in the list of embeddings."
        },
        "embedding": {
          "type": "array",
          "description": "The embedding vector, which is a list of floats. The length of vector depends on the model as listed in the [embedding guide](https://platform.openai.com/docs/guides/embeddings).\n",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "object": {
          "type": "string",
          "description": "The object type, which is always \"embedding\".",
          "enum": [
            "embedding"
          ],
          "x-stainless-const": true
        }
      },
      "required": [
        "index",
        "object",
        "embedding"
      ],
      "examples": []
    },
    {
      "name": "Error",
      "type": "object",
      "description": "",
      "properties": {
        "code": {
          "type": "string",
          "nullable": true
        },
        "message": {
          "type": "string",
          "nullable": false
        },
        "param": {
          "type": "string",
          "nullable": true
        },
        "type": {
          "type": "string",
          "nullable": false
        }
      },
      "required": [
        "type",
        "message",
        "param",
        "code"
      ],
      "examples": []
    },
    {
      "name": "ErrorEvent",
      "type": "object",
      "description": "Occurs when an [error](https://platform.openai.com/docs/guides/error-codes#api-errors) occurs. This can happen due to an internal server error or a timeout.",
      "properties": {
        "event": {
          "type": "string",
          "enum": [
            "error"
          ],
          "x-stainless-const": true
        },
        "data": {
          "$ref": "#/components/schemas/Error"
        }
      },
      "required": [
        "event",
        "data"
      ],
      "examples": []
    },
    {
      "name": "ErrorResponse",
      "type": "object",
      "description": "",
      "properties": {
        "error": {
          "$ref": "#/components/schemas/Error"
        }
      },
      "required": [
        "error"
      ],
      "examples": []
    },
    {
      "name": "Eval",
      "type": "object",
      "description": "An Eval object with a data source config and testing criteria.\nAn Eval represents a task to be done for your LLM integration.\nLike:\n - Improve the quality of my chatbot\n - See how well my chatbot handles customer support\n - Check if o4-mini is better at my usecase than gpt-4o\n",
      "properties": {
        "object": {
          "type": "string",
          "enum": [
            "eval"
          ],
          "default": "eval",
          "description": "The object type.",
          "x-stainless-const": true
        },
        "id": {
          "type": "string",
          "description": "Unique identifier for the evaluation."
        },
        "name": {
          "type": "string",
          "description": "The name of the evaluation.",
          "example": "Chatbot effectiveness Evaluation"
        },
        "data_source_config": {
          "type": "object",
          "description": "Configuration of data sources used in runs of the evaluation.",
          "anyOf": [
            {
              "$ref": "#/components/schemas/EvalCustomDataSourceConfig"
            },
            {
              "$ref": "#/components/schemas/EvalLogsDataSourceConfig"
            },
            {
              "$ref": "#/components/schemas/EvalStoredCompletionsDataSourceConfig"
            }
          ],
          "discriminator": {
            "propertyName": "type"
          }
        },
        "testing_criteria": {
          "description": "A list of testing criteria.",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/EvalGraderLabelModel"
              },
              {
                "$ref": "#/components/schemas/EvalGraderStringCheck"
              },
              {
                "$ref": "#/components/schemas/EvalGraderTextSimilarity"
              },
              {
                "$ref": "#/components/schemas/EvalGraderPython"
              },
              {
                "$ref": "#/components/schemas/EvalGraderScoreModel"
              }
            ]
          }
        },
        "created_at": {
          "type": "integer",
          "description": "The Unix timestamp (in seconds) for when the eval was created."
        },
        "metadata": {
          "$ref": "#/components/schemas/Metadata"
        }
      },
      "required": [
        "id",
        "data_source_config",
        "object",
        "testing_criteria",
        "name",
        "created_at",
        "metadata"
      ],
      "examples": []
    },
    {
      "name": "EvalApiError",
      "type": "object",
      "description": "An object representing an error response from the Eval API.\n",
      "properties": {
        "code": {
          "type": "string",
          "description": "The error code."
        },
        "message": {
          "type": "string",
          "description": "The error message."
        }
      },
      "required": [
        "code",
        "message"
      ],
      "examples": []
    },
    {
      "name": "EvalCustomDataSourceConfig",
      "type": "object",
      "description": "A CustomDataSourceConfig which specifies the schema of your `item` and optionally `sample` namespaces.\nThe response schema defines the shape of the data that will be:\n- Used to define your testing criteria and\n- What data is required when creating a run\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "custom"
          ],
          "default": "custom",
          "description": "The type of data source. Always `custom`.",
          "x-stainless-const": true
        },
        "schema": {
          "type": "object",
          "description": "The json schema for the run data source items.\nLearn how to build JSON schemas [here](https://json-schema.org/).\n",
          "additionalProperties": true
        }
      },
      "required": [
        "type",
        "schema"
      ],
      "examples": []
    },
    {
      "name": "EvalGraderLabelModel",
      "type": "object",
      "description": "",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "EvalGraderPython",
      "type": "object",
      "description": "",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "EvalGraderScoreModel",
      "type": "object",
      "description": "",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "EvalGraderStringCheck",
      "type": "object",
      "description": "",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "EvalGraderTextSimilarity",
      "type": "object",
      "description": "",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "EvalItem",
      "type": "object",
      "description": "A message input to the model with a role indicating instruction following\nhierarchy. Instructions given with the `developer` or `system` role take\nprecedence over instructions given with the `user` role. Messages with the\n`assistant` role are presumed to have been generated by the model in previous\ninteractions.\n",
      "properties": {
        "role": {
          "type": "string",
          "description": "The role of the message input. One of `user`, `assistant`, `system`, or\n`developer`.\n",
          "enum": [
            "user",
            "assistant",
            "system",
            "developer"
          ]
        },
        "content": {
          "description": "Inputs to the model - can contain template strings.\n",
          "anyOf": [
            {
              "type": "string",
              "title": "Text input",
              "description": "A text input to the model.\n"
            },
            {
              "$ref": "#/components/schemas/InputTextContent"
            },
            {
              "type": "object",
              "title": "Output text",
              "description": "A text output from the model.\n",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The type of the output text. Always `output_text`.\n",
                  "enum": [
                    "output_text"
                  ],
                  "x-stainless-const": true
                },
                "text": {
                  "type": "string",
                  "description": "The text output from the model.\n"
                }
              },
              "required": [
                "type",
                "text"
              ]
            },
            {
              "type": "object",
              "title": "Input image",
              "description": "An image input to the model.\n",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The type of the image input. Always `input_image`.\n",
                  "enum": [
                    "input_image"
                  ],
                  "x-stainless-const": true
                },
                "image_url": {
                  "type": "string",
                  "description": "The URL of the image input.\n"
                },
                "detail": {
                  "type": "string",
                  "description": "The detail level of the image to be sent to the model. One of `high`, `low`, or `auto`. Defaults to `auto`.\n"
                }
              },
              "required": [
                "type",
                "image_url"
              ]
            },
            {
              "type": "array",
              "title": "An array of Input text and Input image",
              "description": "A list of inputs, each of which may be either an input text or input image object.\n"
            }
          ]
        },
        "type": {
          "type": "string",
          "description": "The type of the message input. Always `message`.\n",
          "enum": [
            "message"
          ],
          "x-stainless-const": true
        }
      },
      "required": [
        "role",
        "content"
      ],
      "examples": []
    },
    {
      "name": "EvalJsonlFileContentSource",
      "type": "object",
      "description": "",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "file_content"
          ],
          "default": "file_content",
          "description": "The type of jsonl source. Always `file_content`.",
          "x-stainless-const": true
        },
        "content": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "item": {
                "type": "object",
                "additionalProperties": true
              },
              "sample": {
                "type": "object",
                "additionalProperties": true
              }
            },
            "required": [
              "item"
            ]
          },
          "description": "The content of the jsonl file."
        }
      },
      "required": [
        "type",
        "content"
      ],
      "examples": []
    },
    {
      "name": "EvalJsonlFileIdSource",
      "type": "object",
      "description": "",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "file_id"
          ],
          "default": "file_id",
          "description": "The type of jsonl source. Always `file_id`.",
          "x-stainless-const": true
        },
        "id": {
          "type": "string",
          "description": "The identifier of the file."
        }
      },
      "required": [
        "type",
        "id"
      ],
      "examples": []
    },
    {
      "name": "EvalList",
      "type": "object",
      "description": "An object representing a list of evals.\n",
      "properties": {
        "object": {
          "type": "string",
          "enum": [
            "list"
          ],
          "default": "list",
          "description": "The type of this object. It is always set to \"list\".\n",
          "x-stainless-const": true
        },
        "data": {
          "type": "array",
          "description": "An array of eval objects.\n",
          "items": {
            "$ref": "#/components/schemas/Eval"
          }
        },
        "first_id": {
          "type": "string",
          "description": "The identifier of the first eval in the data array."
        },
        "last_id": {
          "type": "string",
          "description": "The identifier of the last eval in the data array."
        },
        "has_more": {
          "type": "boolean",
          "description": "Indicates whether there are more evals available."
        }
      },
      "required": [
        "object",
        "data",
        "first_id",
        "last_id",
        "has_more"
      ],
      "examples": []
    },
    {
      "name": "EvalLogsDataSourceConfig",
      "type": "object",
      "description": "A LogsDataSourceConfig which specifies the metadata property of your logs query.\nThis is usually metadata like `usecase=chatbot` or `prompt-version=v2`, etc.\nThe schema returned by this data source config is used to defined what variables are available in your evals.\n`item` and `sample` are both defined when using this data source config.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "logs"
          ],
          "default": "logs",
          "description": "The type of data source. Always `logs`.",
          "x-stainless-const": true
        },
        "metadata": {
          "$ref": "#/components/schemas/Metadata"
        },
        "schema": {
          "type": "object",
          "description": "The json schema for the run data source items.\nLearn how to build JSON schemas [here](https://json-schema.org/).\n",
          "additionalProperties": true
        }
      },
      "required": [
        "type",
        "schema"
      ],
      "examples": []
    },
    {
      "name": "EvalResponsesSource",
      "type": "object",
      "description": "A EvalResponsesSource object describing a run data source configuration.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "responses"
          ],
          "description": "The type of run data source. Always `responses`."
        },
        "metadata": {
          "type": "object",
          "nullable": true,
          "description": "Metadata filter for the responses. This is a query parameter used to select responses."
        },
        "model": {
          "type": "string",
          "nullable": true,
          "description": "The name of the model to find responses for. This is a query parameter used to select responses."
        },
        "instructions_search": {
          "type": "string",
          "nullable": true,
          "description": "Optional string to search the 'instructions' field. This is a query parameter used to select responses."
        },
        "created_after": {
          "type": "integer",
          "minimum": 0,
          "nullable": true,
          "description": "Only include items created after this timestamp (inclusive). This is a query parameter used to select responses."
        },
        "created_before": {
          "type": "integer",
          "minimum": 0,
          "nullable": true,
          "description": "Only include items created before this timestamp (inclusive). This is a query parameter used to select responses."
        },
        "reasoning_effort": {
          "$ref": "#/components/schemas/ReasoningEffort",
          "nullable": true,
          "description": "Optional reasoning effort parameter. This is a query parameter used to select responses."
        },
        "temperature": {
          "type": "number",
          "nullable": true,
          "description": "Sampling temperature. This is a query parameter used to select responses."
        },
        "top_p": {
          "type": "number",
          "nullable": true,
          "description": "Nucleus sampling parameter. This is a query parameter used to select responses."
        },
        "users": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "nullable": true,
          "description": "List of user identifiers. This is a query parameter used to select responses."
        },
        "tools": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "nullable": true,
          "description": "List of tool names. This is a query parameter used to select responses."
        }
      },
      "required": [
        "type"
      ],
      "examples": []
    },
    {
      "name": "EvalRun",
      "type": "object",
      "description": "A schema representing an evaluation run.\n",
      "properties": {
        "object": {
          "type": "string",
          "enum": [
            "eval.run"
          ],
          "default": "eval.run",
          "description": "The type of the object. Always \"eval.run\".",
          "x-stainless-const": true
        },
        "id": {
          "type": "string",
          "description": "Unique identifier for the evaluation run."
        },
        "eval_id": {
          "type": "string",
          "description": "The identifier of the associated evaluation."
        },
        "status": {
          "type": "string",
          "description": "The status of the evaluation run."
        },
        "model": {
          "type": "string",
          "description": "The model that is evaluated, if applicable."
        },
        "name": {
          "type": "string",
          "description": "The name of the evaluation run."
        },
        "created_at": {
          "type": "integer",
          "description": "Unix timestamp (in seconds) when the evaluation run was created."
        },
        "report_url": {
          "type": "string",
          "description": "The URL to the rendered evaluation run report on the UI dashboard."
        },
        "result_counts": {
          "type": "object",
          "description": "Counters summarizing the outcomes of the evaluation run.",
          "properties": {
            "total": {
              "type": "integer",
              "description": "Total number of executed output items."
            },
            "errored": {
              "type": "integer",
              "description": "Number of output items that resulted in an error."
            },
            "failed": {
              "type": "integer",
              "description": "Number of output items that failed to pass the evaluation."
            },
            "passed": {
              "type": "integer",
              "description": "Number of output items that passed the evaluation."
            }
          },
          "required": [
            "total",
            "errored",
            "failed",
            "passed"
          ]
        },
        "per_model_usage": {
          "type": "array",
          "description": "Usage statistics for each model during the evaluation run.",
          "items": {
            "type": "object",
            "properties": {
              "model_name": {
                "type": "string",
                "description": "The name of the model.",
                "x-stainless-naming": {
                  "python": {
                    "property_name": "run_model_name"
                  }
                }
              },
              "invocation_count": {
                "type": "integer",
                "description": "The number of invocations."
              },
              "prompt_tokens": {
                "type": "integer",
                "description": "The number of prompt tokens used."
              },
              "completion_tokens": {
                "type": "integer",
                "description": "The number of completion tokens generated."
              },
              "total_tokens": {
                "type": "integer",
                "description": "The total number of tokens used."
              },
              "cached_tokens": {
                "type": "integer",
                "description": "The number of tokens retrieved from cache."
              }
            },
            "required": [
              "model_name",
              "invocation_count",
              "prompt_tokens",
              "completion_tokens",
              "total_tokens",
              "cached_tokens"
            ]
          }
        },
        "per_testing_criteria_results": {
          "type": "array",
          "description": "Results per testing criteria applied during the evaluation run.",
          "items": {
            "type": "object",
            "properties": {
              "testing_criteria": {
                "type": "string",
                "description": "A description of the testing criteria."
              },
              "passed": {
                "type": "integer",
                "description": "Number of tests passed for this criteria."
              },
              "failed": {
                "type": "integer",
                "description": "Number of tests failed for this criteria."
              }
            },
            "required": [
              "testing_criteria",
              "passed",
              "failed"
            ]
          }
        },
        "data_source": {
          "type": "object",
          "description": "Information about the run's data source.",
          "anyOf": [
            {
              "$ref": "#/components/schemas/CreateEvalJsonlRunDataSource"
            },
            {
              "$ref": "#/components/schemas/CreateEvalCompletionsRunDataSource"
            },
            {
              "$ref": "#/components/schemas/CreateEvalResponsesRunDataSource"
            }
          ],
          "discriminator": {
            "propertyName": "type"
          }
        },
        "metadata": {
          "$ref": "#/components/schemas/Metadata"
        },
        "error": {
          "$ref": "#/components/schemas/EvalApiError"
        }
      },
      "required": [
        "object",
        "id",
        "eval_id",
        "status",
        "model",
        "name",
        "created_at",
        "report_url",
        "result_counts",
        "per_model_usage",
        "per_testing_criteria_results",
        "data_source",
        "metadata",
        "error"
      ],
      "examples": []
    },
    {
      "name": "EvalRunList",
      "type": "object",
      "description": "An object representing a list of runs for an evaluation.\n",
      "properties": {
        "object": {
          "type": "string",
          "enum": [
            "list"
          ],
          "default": "list",
          "description": "The type of this object. It is always set to \"list\".\n",
          "x-stainless-const": true
        },
        "data": {
          "type": "array",
          "description": "An array of eval run objects.\n",
          "items": {
            "$ref": "#/components/schemas/EvalRun"
          }
        },
        "first_id": {
          "type": "string",
          "description": "The identifier of the first eval run in the data array."
        },
        "last_id": {
          "type": "string",
          "description": "The identifier of the last eval run in the data array."
        },
        "has_more": {
          "type": "boolean",
          "description": "Indicates whether there are more evals available."
        }
      },
      "required": [
        "object",
        "data",
        "first_id",
        "last_id",
        "has_more"
      ],
      "examples": []
    },
    {
      "name": "EvalRunOutputItem",
      "type": "object",
      "description": "A schema representing an evaluation run output item.\n",
      "properties": {
        "object": {
          "type": "string",
          "enum": [
            "eval.run.output_item"
          ],
          "default": "eval.run.output_item",
          "description": "The type of the object. Always \"eval.run.output_item\".",
          "x-stainless-const": true
        },
        "id": {
          "type": "string",
          "description": "Unique identifier for the evaluation run output item."
        },
        "run_id": {
          "type": "string",
          "description": "The identifier of the evaluation run associated with this output item."
        },
        "eval_id": {
          "type": "string",
          "description": "The identifier of the evaluation group."
        },
        "created_at": {
          "type": "integer",
          "description": "Unix timestamp (in seconds) when the evaluation run was created."
        },
        "status": {
          "type": "string",
          "description": "The status of the evaluation run."
        },
        "datasource_item_id": {
          "type": "integer",
          "description": "The identifier for the data source item."
        },
        "datasource_item": {
          "type": "object",
          "description": "Details of the input data source item.",
          "additionalProperties": true
        },
        "results": {
          "type": "array",
          "description": "A list of results from the evaluation run.",
          "items": {
            "type": "object",
            "description": "A result object.",
            "additionalProperties": true
          }
        },
        "sample": {
          "type": "object",
          "description": "A sample containing the input and output of the evaluation run.",
          "properties": {
            "input": {
              "type": "array",
              "description": "An array of input messages.",
              "items": {
                "type": "object",
                "description": "An input message.",
                "properties": {
                  "role": {
                    "type": "string",
                    "description": "The role of the message sender (e.g., system, user, developer)."
                  },
                  "content": {
                    "type": "string",
                    "description": "The content of the message."
                  }
                },
                "required": [
                  "role",
                  "content"
                ]
              }
            },
            "output": {
              "type": "array",
              "description": "An array of output messages.",
              "items": {
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string",
                    "description": "The role of the message (e.g. \"system\", \"assistant\", \"user\")."
                  },
                  "content": {
                    "type": "string",
                    "description": "The content of the message."
                  }
                }
              }
            },
            "finish_reason": {
              "type": "string",
              "description": "The reason why the sample generation was finished."
            },
            "model": {
              "type": "string",
              "description": "The model used for generating the sample."
            },
            "usage": {
              "type": "object",
              "description": "Token usage details for the sample.",
              "properties": {
                "total_tokens": {
                  "type": "integer",
                  "description": "The total number of tokens used."
                },
                "completion_tokens": {
                  "type": "integer",
                  "description": "The number of completion tokens generated."
                },
                "prompt_tokens": {
                  "type": "integer",
                  "description": "The number of prompt tokens used."
                },
                "cached_tokens": {
                  "type": "integer",
                  "description": "The number of tokens retrieved from cache."
                }
              },
              "required": [
                "total_tokens",
                "completion_tokens",
                "prompt_tokens",
                "cached_tokens"
              ]
            },
            "error": {
              "$ref": "#/components/schemas/EvalApiError"
            },
            "temperature": {
              "type": "number",
              "description": "The sampling temperature used."
            },
            "max_completion_tokens": {
              "type": "integer",
              "description": "The maximum number of tokens allowed for completion."
            },
            "top_p": {
              "type": "number",
              "description": "The top_p value used for sampling."
            },
            "seed": {
              "type": "integer",
              "description": "The seed used for generating the sample."
            }
          },
          "required": [
            "input",
            "output",
            "finish_reason",
            "model",
            "usage",
            "error",
            "temperature",
            "max_completion_tokens",
            "top_p",
            "seed"
          ]
        }
      },
      "required": [
        "object",
        "id",
        "run_id",
        "eval_id",
        "created_at",
        "status",
        "datasource_item_id",
        "datasource_item",
        "results",
        "sample"
      ],
      "examples": []
    },
    {
      "name": "EvalRunOutputItemList",
      "type": "object",
      "description": "An object representing a list of output items for an evaluation run.\n",
      "properties": {
        "object": {
          "type": "string",
          "enum": [
            "list"
          ],
          "default": "list",
          "description": "The type of this object. It is always set to \"list\".\n",
          "x-stainless-const": true
        },
        "data": {
          "type": "array",
          "description": "An array of eval run output item objects.\n",
          "items": {
            "$ref": "#/components/schemas/EvalRunOutputItem"
          }
        },
        "first_id": {
          "type": "string",
          "description": "The identifier of the first eval run output item in the data array."
        },
        "last_id": {
          "type": "string",
          "description": "The identifier of the last eval run output item in the data array."
        },
        "has_more": {
          "type": "boolean",
          "description": "Indicates whether there are more eval run output items available."
        }
      },
      "required": [
        "object",
        "data",
        "first_id",
        "last_id",
        "has_more"
      ],
      "examples": []
    },
    {
      "name": "EvalStoredCompletionsDataSourceConfig",
      "type": "object",
      "description": "Deprecated in favor of LogsDataSourceConfig.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "stored_completions"
          ],
          "default": "stored_completions",
          "description": "The type of data source. Always `stored_completions`.",
          "x-stainless-const": true
        },
        "metadata": {
          "$ref": "#/components/schemas/Metadata"
        },
        "schema": {
          "type": "object",
          "description": "The json schema for the run data source items.\nLearn how to build JSON schemas [here](https://json-schema.org/).\n",
          "additionalProperties": true
        }
      },
      "required": [
        "type",
        "schema"
      ],
      "examples": []
    },
    {
      "name": "EvalStoredCompletionsSource",
      "type": "object",
      "description": "A StoredCompletionsRunDataSource configuration describing a set of filters\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "stored_completions"
          ],
          "default": "stored_completions",
          "description": "The type of source. Always `stored_completions`.",
          "x-stainless-const": true
        },
        "metadata": {
          "$ref": "#/components/schemas/Metadata"
        },
        "model": {
          "type": "string",
          "nullable": true,
          "description": "An optional model to filter by (e.g., 'gpt-4o')."
        },
        "created_after": {
          "type": "integer",
          "nullable": true,
          "description": "An optional Unix timestamp to filter items created after this time."
        },
        "created_before": {
          "type": "integer",
          "nullable": true,
          "description": "An optional Unix timestamp to filter items created before this time."
        },
        "limit": {
          "type": "integer",
          "nullable": true,
          "description": "An optional maximum number of items to return."
        }
      },
      "required": [
        "type"
      ],
      "examples": []
    },
    {
      "name": "FileExpirationAfter",
      "type": "object",
      "description": "The expiration policy for a file. By default, files with `purpose=batch` expire after 30 days and all other files are persisted until they are manually deleted.",
      "properties": {
        "anchor": {
          "description": "Anchor timestamp after which the expiration policy applies. Supported anchors: `created_at`.",
          "type": "string",
          "enum": [
            "created_at"
          ],
          "x-stainless-const": true
        },
        "seconds": {
          "description": "The number of seconds after the anchor time that the file will expire. Must be between 3600 (1 hour) and 2592000 (30 days).",
          "type": "integer",
          "minimum": 3600,
          "maximum": 2592000
        }
      },
      "required": [
        "anchor",
        "seconds"
      ],
      "examples": []
    },
    {
      "name": "FilePath",
      "type": "object",
      "description": "A path to a file.\n",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the file path. Always `file_path`.\n",
          "enum": [
            "file_path"
          ],
          "x-stainless-const": true
        },
        "file_id": {
          "type": "string",
          "description": "The ID of the file.\n"
        },
        "index": {
          "type": "integer",
          "description": "The index of the file in the list of files.\n"
        }
      },
      "required": [
        "type",
        "file_id",
        "index"
      ],
      "examples": []
    },
    {
      "name": "FileSearchRanker",
      "type": "string",
      "description": "The ranker to use for the file search. If not specified will use the `auto` ranker.",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "FileSearchRankingOptions",
      "type": "object",
      "description": "The ranking options for the file search. If not specified, the file search tool will use the `auto` ranker and a score_threshold of 0.\n\nSee the [file search tool documentation](https://platform.openai.com/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n",
      "properties": {
        "ranker": {
          "$ref": "#/components/schemas/FileSearchRanker"
        },
        "score_threshold": {
          "type": "number",
          "description": "The score threshold for the file search. All values must be a floating point number between 0 and 1.",
          "minimum": 0,
          "maximum": 1
        }
      },
      "required": [
        "score_threshold"
      ],
      "examples": []
    },
    {
      "name": "FileSearchToolCall",
      "type": "object",
      "description": "The results of a file search tool call. See the \n[file search guide](https://platform.openai.com/docs/guides/tools-file-search) for more information.\n",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID of the file search tool call.\n"
        },
        "type": {
          "type": "string",
          "enum": [
            "file_search_call"
          ],
          "description": "The type of the file search tool call. Always `file_search_call`.\n",
          "x-stainless-const": true
        },
        "status": {
          "type": "string",
          "description": "The status of the file search tool call. One of `in_progress`, \n`searching`, `incomplete` or `failed`,\n",
          "enum": [
            "in_progress",
            "searching",
            "completed",
            "incomplete",
            "failed"
          ]
        },
        "queries": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The queries used to search for files.\n"
        },
        "results": {
          "type": "array",
          "description": "The results of the file search tool call.\n",
          "items": {
            "type": "object",
            "properties": {
              "file_id": {
                "type": "string",
                "description": "The unique ID of the file.\n"
              },
              "text": {
                "type": "string",
                "description": "The text that was retrieved from the file.\n"
              },
              "filename": {
                "type": "string",
                "description": "The name of the file.\n"
              },
              "attributes": {
                "$ref": "#/components/schemas/VectorStoreFileAttributes"
              },
              "score": {
                "type": "number",
                "format": "float",
                "description": "The relevance score of the file - a value between 0 and 1.\n"
              }
            }
          },
          "nullable": true
        }
      },
      "required": [
        "id",
        "type",
        "status",
        "queries"
      ],
      "examples": []
    },
    {
      "name": "FineTuneChatCompletionRequestAssistantMessage",
      "type": "object",
      "description": "",
      "properties": {},
      "required": [
        "role"
      ],
      "examples": []
    },
    {
      "name": "FineTuneChatRequestInput",
      "type": "object",
      "description": "The per-line training example of a fine-tuning input file for chat models using the supervised method.\nInput messages may contain text or image content only. Audio and file input messages\nare not currently supported for fine-tuning.\n",
      "properties": {
        "messages": {
          "type": "array",
          "minItems": 1,
          "items": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ChatCompletionRequestSystemMessage"
              },
              {
                "$ref": "#/components/schemas/ChatCompletionRequestUserMessage"
              },
              {
                "$ref": "#/components/schemas/FineTuneChatCompletionRequestAssistantMessage"
              },
              {
                "$ref": "#/components/schemas/ChatCompletionRequestToolMessage"
              },
              {
                "$ref": "#/components/schemas/ChatCompletionRequestFunctionMessage"
              }
            ]
          }
        },
        "tools": {
          "type": "array",
          "description": "A list of tools the model may generate JSON inputs for.",
          "items": {
            "$ref": "#/components/schemas/ChatCompletionTool"
          }
        },
        "parallel_tool_calls": {
          "$ref": "#/components/schemas/ParallelToolCalls"
        },
        "functions": {
          "deprecated": true,
          "description": "A list of functions the model may generate JSON inputs for.",
          "type": "array",
          "minItems": 1,
          "maxItems": 128,
          "items": {
            "$ref": "#/components/schemas/ChatCompletionFunctions"
          }
        }
      },
      "required": [],
      "examples": []
    },
    {
      "name": "FineTuneDPOHyperparameters",
      "type": "object",
      "description": "The hyperparameters used for the DPO fine-tuning job.",
      "properties": {
        "beta": {
          "description": "The beta value for the DPO method. A higher beta value will increase the weight of the penalty between the policy and reference model.\n",
          "anyOf": [
            {
              "type": "string",
              "enum": [
                "auto"
              ],
              "x-stainless-const": true
            },
            {
              "type": "number",
              "minimum": 0,
              "maximum": 2,
              "exclusiveMinimum": true
            }
          ]
        },
        "batch_size": {
          "description": "Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.\n",
          "default": "auto",
          "anyOf": [
            {
              "type": "string",
              "enum": [
                "auto"
              ],
              "x-stainless-const": true
            },
            {
              "type": "integer",
              "minimum": 1,
              "maximum": 256
            }
          ]
        },
        "learning_rate_multiplier": {
          "description": "Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.\n",
          "anyOf": [
            {
              "type": "string",
              "enum": [
                "auto"
              ],
              "x-stainless-const": true
            },
            {
              "type": "number",
              "minimum": 0,
              "exclusiveMinimum": true
            }
          ]
        },
        "n_epochs": {
          "description": "The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.\n",
          "default": "auto",
          "anyOf": [
            {
              "type": "string",
              "enum": [
                "auto"
              ],
              "x-stainless-const": true
            },
            {
              "type": "integer",
              "minimum": 1,
              "maximum": 50
            }
          ]
        }
      },
      "required": [],
      "examples": []
    },
    {
      "name": "FineTuneDPOMethod",
      "type": "object",
      "description": "Configuration for the DPO fine-tuning method.",
      "properties": {
        "hyperparameters": {
          "$ref": "#/components/schemas/FineTuneDPOHyperparameters"
        }
      },
      "required": [],
      "examples": []
    },
    {
      "name": "FineTuneMethod",
      "type": "object",
      "description": "The method used for fine-tuning.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of method. Is either `supervised`, `dpo`, or `reinforcement`.",
          "enum": [
            "supervised",
            "dpo",
            "reinforcement"
          ]
        },
        "supervised": {
          "$ref": "#/components/schemas/FineTuneSupervisedMethod"
        },
        "dpo": {
          "$ref": "#/components/schemas/FineTuneDPOMethod"
        },
        "reinforcement": {
          "$ref": "#/components/schemas/FineTuneReinforcementMethod"
        }
      },
      "required": [
        "type"
      ],
      "examples": []
    },
    {
      "name": "FineTunePreferenceRequestInput",
      "type": "object",
      "description": "The per-line training example of a fine-tuning input file for chat models using the dpo method.\nInput messages may contain text or image content only. Audio and file input messages\nare not currently supported for fine-tuning.\n",
      "properties": {
        "input": {
          "type": "object",
          "properties": {
            "messages": {
              "type": "array",
              "minItems": 1,
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/ChatCompletionRequestSystemMessage"
                  },
                  {
                    "$ref": "#/components/schemas/ChatCompletionRequestUserMessage"
                  },
                  {
                    "$ref": "#/components/schemas/FineTuneChatCompletionRequestAssistantMessage"
                  },
                  {
                    "$ref": "#/components/schemas/ChatCompletionRequestToolMessage"
                  },
                  {
                    "$ref": "#/components/schemas/ChatCompletionRequestFunctionMessage"
                  }
                ]
              }
            },
            "tools": {
              "type": "array",
              "description": "A list of tools the model may generate JSON inputs for.",
              "items": {
                "$ref": "#/components/schemas/ChatCompletionTool"
              }
            },
            "parallel_tool_calls": {
              "$ref": "#/components/schemas/ParallelToolCalls"
            }
          }
        },
        "preferred_output": {
          "type": "array",
          "description": "The preferred completion message for the output.",
          "maxItems": 1,
          "items": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ChatCompletionRequestAssistantMessage"
              }
            ]
          }
        },
        "non_preferred_output": {
          "type": "array",
          "description": "The non-preferred completion message for the output.",
          "maxItems": 1,
          "items": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ChatCompletionRequestAssistantMessage"
              }
            ]
          }
        }
      },
      "required": [],
      "examples": []
    },
    {
      "name": "FineTuneReinforcementHyperparameters",
      "type": "object",
      "description": "The hyperparameters used for the reinforcement fine-tuning job.",
      "properties": {
        "batch_size": {
          "description": "Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.\n",
          "default": "auto",
          "anyOf": [
            {
              "type": "string",
              "enum": [
                "auto"
              ],
              "x-stainless-const": true
            },
            {
              "type": "integer",
              "minimum": 1,
              "maximum": 256
            }
          ]
        },
        "learning_rate_multiplier": {
          "description": "Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.\n",
          "anyOf": [
            {
              "type": "string",
              "enum": [
                "auto"
              ],
              "x-stainless-const": true
            },
            {
              "type": "number",
              "minimum": 0,
              "exclusiveMinimum": true
            }
          ]
        },
        "n_epochs": {
          "description": "The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.\n",
          "default": "auto",
          "anyOf": [
            {
              "type": "string",
              "enum": [
                "auto"
              ],
              "x-stainless-const": true
            },
            {
              "type": "integer",
              "minimum": 1,
              "maximum": 50
            }
          ]
        },
        "reasoning_effort": {
          "description": "Level of reasoning effort.\n",
          "type": "string",
          "enum": [
            "default",
            "low",
            "medium",
            "high"
          ],
          "default": "default"
        },
        "compute_multiplier": {
          "description": "Multiplier on amount of compute used for exploring search space during training.\n",
          "anyOf": [
            {
              "type": "string",
              "enum": [
                "auto"
              ],
              "x-stainless-const": true
            },
            {
              "type": "number",
              "minimum": 1e-05,
              "maximum": 10,
              "exclusiveMinimum": true
            }
          ]
        },
        "eval_interval": {
          "description": "The number of training steps between evaluation runs.\n",
          "default": "auto",
          "anyOf": [
            {
              "type": "string",
              "enum": [
                "auto"
              ],
              "x-stainless-const": true
            },
            {
              "type": "integer",
              "minimum": 1
            }
          ]
        },
        "eval_samples": {
          "description": "Number of evaluation samples to generate per training step.\n",
          "default": "auto",
          "anyOf": [
            {
              "type": "string",
              "enum": [
                "auto"
              ],
              "x-stainless-const": true
            },
            {
              "type": "integer",
              "minimum": 1
            }
          ]
        }
      },
      "required": [],
      "examples": []
    },
    {
      "name": "FineTuneReinforcementMethod",
      "type": "object",
      "description": "Configuration for the reinforcement fine-tuning method.",
      "properties": {
        "grader": {
          "type": "object",
          "description": "The grader used for the fine-tuning job.",
          "anyOf": [
            {
              "$ref": "#/components/schemas/GraderStringCheck"
            },
            {
              "$ref": "#/components/schemas/GraderTextSimilarity"
            },
            {
              "$ref": "#/components/schemas/GraderPython"
            },
            {
              "$ref": "#/components/schemas/GraderScoreModel"
            },
            {
              "$ref": "#/components/schemas/GraderMulti"
            }
          ]
        },
        "hyperparameters": {
          "$ref": "#/components/schemas/FineTuneReinforcementHyperparameters"
        }
      },
      "required": [
        "grader"
      ],
      "examples": []
    },
    {
      "name": "FineTuneReinforcementRequestInput",
      "type": "object",
      "description": "Per-line training example for reinforcement fine-tuning. Note that `messages` and `tools` are the only reserved keywords.\nAny other arbitrary key-value data can be included on training datapoints and will be available to reference during grading under the `{{ item.XXX }}` template variable.\nInput messages may contain text or image content only. Audio and file input messages\nare not currently supported for fine-tuning.\n",
      "properties": {
        "messages": {
          "type": "array",
          "minItems": 1,
          "items": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ChatCompletionRequestDeveloperMessage"
              },
              {
                "$ref": "#/components/schemas/ChatCompletionRequestUserMessage"
              },
              {
                "$ref": "#/components/schemas/FineTuneChatCompletionRequestAssistantMessage"
              },
              {
                "$ref": "#/components/schemas/ChatCompletionRequestToolMessage"
              }
            ]
          }
        },
        "tools": {
          "type": "array",
          "description": "A list of tools the model may generate JSON inputs for.",
          "items": {
            "$ref": "#/components/schemas/ChatCompletionTool"
          }
        }
      },
      "required": [
        "messages"
      ],
      "examples": []
    },
    {
      "name": "FineTuneSupervisedHyperparameters",
      "type": "object",
      "description": "The hyperparameters used for the fine-tuning job.",
      "properties": {
        "batch_size": {
          "description": "Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.\n",
          "default": "auto",
          "anyOf": [
            {
              "type": "string",
              "enum": [
                "auto"
              ],
              "x-stainless-const": true
            },
            {
              "type": "integer",
              "minimum": 1,
              "maximum": 256
            }
          ]
        },
        "learning_rate_multiplier": {
          "description": "Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.\n",
          "anyOf": [
            {
              "type": "string",
              "enum": [
                "auto"
              ],
              "x-stainless-const": true
            },
            {
              "type": "number",
              "minimum": 0,
              "exclusiveMinimum": true
            }
          ]
        },
        "n_epochs": {
          "description": "The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.\n",
          "default": "auto",
          "anyOf": [
            {
              "type": "string",
              "enum": [
                "auto"
              ],
              "x-stainless-const": true
            },
            {
              "type": "integer",
              "minimum": 1,
              "maximum": 50
            }
          ]
        }
      },
      "required": [],
      "examples": []
    },
    {
      "name": "FineTuneSupervisedMethod",
      "type": "object",
      "description": "Configuration for the supervised fine-tuning method.",
      "properties": {
        "hyperparameters": {
          "$ref": "#/components/schemas/FineTuneSupervisedHyperparameters"
        }
      },
      "required": [],
      "examples": []
    },
    {
      "name": "FineTuningCheckpointPermission",
      "type": "object",
      "description": "The `checkpoint.permission` object represents a permission for a fine-tuned model checkpoint.\n",
      "properties": {
        "id": {
          "type": "string",
          "description": "The permission identifier, which can be referenced in the API endpoints."
        },
        "created_at": {
          "type": "integer",
          "description": "The Unix timestamp (in seconds) for when the permission was created."
        },
        "project_id": {
          "type": "string",
          "description": "The project identifier that the permission is for."
        },
        "object": {
          "type": "string",
          "description": "The object type, which is always \"checkpoint.permission\".",
          "enum": [
            "checkpoint.permission"
          ],
          "x-stainless-const": true
        }
      },
      "required": [
        "created_at",
        "id",
        "object",
        "project_id"
      ],
      "examples": []
    },
    {
      "name": "FineTuningIntegration",
      "type": "object",
      "description": "",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the integration being enabled for the fine-tuning job",
          "enum": [
            "wandb"
          ],
          "x-stainless-const": true
        },
        "wandb": {
          "type": "object",
          "description": "The settings for your integration with Weights and Biases. This payload specifies the project that\nmetrics will be sent to. Optionally, you can set an explicit display name for your run, add tags\nto your run, and set a default entity (team, username, etc) to be associated with your run.\n",
          "required": [
            "project"
          ],
          "properties": {
            "project": {
              "description": "The name of the project that the new run will be created under.\n",
              "type": "string",
              "example": "my-wandb-project"
            },
            "name": {
              "description": "A display name to set for the run. If not set, we will use the Job ID as the name.\n",
              "nullable": true,
              "type": "string"
            },
            "entity": {
              "description": "The entity to use for the run. This allows you to set the team or username of the WandB user that you would\nlike associated with the run. If not set, the default entity for the registered WandB API key is used.\n",
              "nullable": true,
              "type": "string"
            },
            "tags": {
              "description": "A list of tags to be attached to the newly created run. These tags are passed through directly to WandB. Some\ndefault tags are generated by OpenAI: \"openai/finetune\", \"openai/{base-model}\", \"openai/{ftjob-abcdef}\".\n",
              "type": "array",
              "items": {
                "type": "string",
                "example": "custom-tag"
              }
            }
          }
        }
      },
      "required": [
        "type",
        "wandb"
      ],
      "examples": []
    },
    {
      "name": "FineTuningJob",
      "type": "object",
      "description": "The `fine_tuning.job` object represents a fine-tuning job that has been created through the API.\n",
      "properties": {
        "id": {
          "type": "string",
          "description": "The object identifier, which can be referenced in the API endpoints."
        },
        "created_at": {
          "type": "integer",
          "description": "The Unix timestamp (in seconds) for when the fine-tuning job was created."
        },
        "error": {
          "type": "object",
          "nullable": true,
          "description": "For fine-tuning jobs that have `failed`, this will contain more information on the cause of the failure.",
          "properties": {
            "code": {
              "type": "string",
              "description": "A machine-readable error code."
            },
            "message": {
              "type": "string",
              "description": "A human-readable error message."
            },
            "param": {
              "type": "string",
              "description": "The parameter that was invalid, usually `training_file` or `validation_file`. This field will be null if the failure was not parameter-specific.",
              "nullable": true
            }
          },
          "required": [
            "code",
            "message",
            "param"
          ]
        },
        "fine_tuned_model": {
          "type": "string",
          "nullable": true,
          "description": "The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running."
        },
        "finished_at": {
          "type": "integer",
          "nullable": true,
          "description": "The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running."
        },
        "hyperparameters": {
          "type": "object",
          "description": "The hyperparameters used for the fine-tuning job. This value will only be returned when running `supervised` jobs.",
          "properties": {
            "batch_size": {
              "nullable": true,
              "description": "Number of examples in each batch. A larger batch size means that model parameters\nare updated less frequently, but with lower variance.\n",
              "anyOf": [
                {
                  "type": "string",
                  "enum": [
                    "auto"
                  ],
                  "x-stainless-const": true,
                  "title": "Auto"
                },
                {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 256,
                  "title": "Manual"
                }
              ]
            },
            "learning_rate_multiplier": {
              "description": "Scaling factor for the learning rate. A smaller learning rate may be useful to avoid\noverfitting.\n",
              "anyOf": [
                {
                  "type": "string",
                  "enum": [
                    "auto"
                  ],
                  "x-stainless-const": true,
                  "title": "Auto"
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "exclusiveMinimum": true
                }
              ]
            },
            "n_epochs": {
              "description": "The number of epochs to train the model for. An epoch refers to one full cycle\nthrough the training dataset.\n",
              "default": "auto",
              "anyOf": [
                {
                  "type": "string",
                  "enum": [
                    "auto"
                  ],
                  "x-stainless-const": true,
                  "title": "Auto"
                },
                {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 50
                }
              ]
            }
          }
        },
        "model": {
          "type": "string",
          "description": "The base model that is being fine-tuned."
        },
        "object": {
          "type": "string",
          "description": "The object type, which is always \"fine_tuning.job\".",
          "enum": [
            "fine_tuning.job"
          ],
          "x-stainless-const": true
        },
        "organization_id": {
          "type": "string",
          "description": "The organization that owns the fine-tuning job."
        },
        "result_files": {
          "type": "array",
          "description": "The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](https://platform.openai.com/docs/api-reference/files/retrieve-contents).",
          "items": {
            "type": "string",
            "example": "file-abc123"
          }
        },
        "status": {
          "type": "string",
          "description": "The current status of the fine-tuning job, which can be either `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`.",
          "enum": [
            "validating_files",
            "queued",
            "running",
            "succeeded",
            "failed",
            "cancelled"
          ]
        },
        "trained_tokens": {
          "type": "integer",
          "nullable": true,
          "description": "The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running."
        },
        "training_file": {
          "type": "string",
          "description": "The file ID used for training. You can retrieve the training data with the [Files API](https://platform.openai.com/docs/api-reference/files/retrieve-contents)."
        },
        "validation_file": {
          "type": "string",
          "nullable": true,
          "description": "The file ID used for validation. You can retrieve the validation results with the [Files API](https://platform.openai.com/docs/api-reference/files/retrieve-contents)."
        },
        "integrations": {
          "type": "array",
          "nullable": true,
          "description": "A list of integrations to enable for this fine-tuning job.",
          "maxItems": 5,
          "items": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/FineTuningIntegration"
              }
            ],
            "discriminator": {
              "propertyName": "type"
            }
          }
        },
        "seed": {
          "type": "integer",
          "description": "The seed used for the fine-tuning job."
        },
        "estimated_finish": {
          "type": "integer",
          "nullable": true,
          "description": "The Unix timestamp (in seconds) for when the fine-tuning job is estimated to finish. The value will be null if the fine-tuning job is not running."
        },
        "method": {
          "$ref": "#/components/schemas/FineTuneMethod"
        },
        "metadata": {
          "$ref": "#/components/schemas/Metadata"
        }
      },
      "required": [
        "created_at",
        "error",
        "finished_at",
        "fine_tuned_model",
        "hyperparameters",
        "id",
        "model",
        "object",
        "organization_id",
        "result_files",
        "status",
        "trained_tokens",
        "training_file",
        "validation_file",
        "seed"
      ],
      "examples": []
    },
    {
      "name": "FineTuningJobCheckpoint",
      "type": "object",
      "description": "The `fine_tuning.job.checkpoint` object represents a model checkpoint for a fine-tuning job that is ready to use.\n",
      "properties": {
        "id": {
          "type": "string",
          "description": "The checkpoint identifier, which can be referenced in the API endpoints."
        },
        "created_at": {
          "type": "integer",
          "description": "The Unix timestamp (in seconds) for when the checkpoint was created."
        },
        "fine_tuned_model_checkpoint": {
          "type": "string",
          "description": "The name of the fine-tuned checkpoint model that is created."
        },
        "step_number": {
          "type": "integer",
          "description": "The step number that the checkpoint was created at."
        },
        "metrics": {
          "type": "object",
          "description": "Metrics at the step number during the fine-tuning job.",
          "properties": {
            "step": {
              "type": "number"
            },
            "train_loss": {
              "type": "number"
            },
            "train_mean_token_accuracy": {
              "type": "number"
            },
            "valid_loss": {
              "type": "number"
            },
            "valid_mean_token_accuracy": {
              "type": "number"
            },
            "full_valid_loss": {
              "type": "number"
            },
            "full_valid_mean_token_accuracy": {
              "type": "number"
            }
          }
        },
        "fine_tuning_job_id": {
          "type": "string",
          "description": "The name of the fine-tuning job that this checkpoint was created from."
        },
        "object": {
          "type": "string",
          "description": "The object type, which is always \"fine_tuning.job.checkpoint\".",
          "enum": [
            "fine_tuning.job.checkpoint"
          ],
          "x-stainless-const": true
        }
      },
      "required": [
        "created_at",
        "fine_tuning_job_id",
        "fine_tuned_model_checkpoint",
        "id",
        "metrics",
        "object",
        "step_number"
      ],
      "examples": []
    },
    {
      "name": "FineTuningJobEvent",
      "type": "object",
      "description": "Fine-tuning job event object",
      "properties": {
        "object": {
          "type": "string",
          "description": "The object type, which is always \"fine_tuning.job.event\".",
          "enum": [
            "fine_tuning.job.event"
          ],
          "x-stainless-const": true
        },
        "id": {
          "type": "string",
          "description": "The object identifier."
        },
        "created_at": {
          "type": "integer",
          "description": "The Unix timestamp (in seconds) for when the fine-tuning job was created."
        },
        "level": {
          "type": "string",
          "description": "The log level of the event.",
          "enum": [
            "info",
            "warn",
            "error"
          ]
        },
        "message": {
          "type": "string",
          "description": "The message of the event."
        },
        "type": {
          "type": "string",
          "description": "The type of event.",
          "enum": [
            "message",
            "metrics"
          ]
        },
        "data": {
          "type": "object",
          "description": "The data associated with the event."
        }
      },
      "required": [
        "id",
        "object",
        "created_at",
        "level",
        "message"
      ],
      "examples": []
    },
    {
      "name": "FunctionObject",
      "type": "object",
      "description": "",
      "properties": {
        "description": {
          "type": "string",
          "description": "A description of what the function does, used by the model to choose when and how to call the function."
        },
        "name": {
          "type": "string",
          "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."
        },
        "parameters": {
          "$ref": "#/components/schemas/FunctionParameters"
        },
        "strict": {
          "type": "boolean",
          "nullable": true,
          "default": false,
          "description": "Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](https://platform.openai.com/docs/guides/function-calling)."
        }
      },
      "required": [
        "name"
      ],
      "examples": []
    },
    {
      "name": "FunctionParameters",
      "type": "object",
      "description": "The parameters the functions accepts, described as a JSON Schema object. See the [guide](https://platform.openai.com/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format. \n\nOmitting `parameters` defines a function with an empty parameter list.",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "FunctionToolCall",
      "type": "object",
      "description": "A tool call to run a function. See the \n[function calling guide](https://platform.openai.com/docs/guides/function-calling) for more information.\n",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID of the function tool call.\n"
        },
        "type": {
          "type": "string",
          "enum": [
            "function_call"
          ],
          "description": "The type of the function tool call. Always `function_call`.\n",
          "x-stainless-const": true
        },
        "call_id": {
          "type": "string",
          "description": "The unique ID of the function tool call generated by the model.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the function to run.\n"
        },
        "arguments": {
          "type": "string",
          "description": "A JSON string of the arguments to pass to the function.\n"
        },
        "status": {
          "type": "string",
          "description": "The status of the item. One of `in_progress`, `completed`, or\n`incomplete`. Populated when items are returned via API.\n",
          "enum": [
            "in_progress",
            "completed",
            "incomplete"
          ]
        }
      },
      "required": [
        "type",
        "call_id",
        "name",
        "arguments"
      ],
      "examples": []
    },
    {
      "name": "FunctionToolCallOutput",
      "type": "object",
      "description": "The output of a function tool call.\n",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID of the function tool call output. Populated when this item\nis returned via API.\n"
        },
        "type": {
          "type": "string",
          "enum": [
            "function_call_output"
          ],
          "description": "The type of the function tool call output. Always `function_call_output`.\n",
          "x-stainless-const": true
        },
        "call_id": {
          "type": "string",
          "description": "The unique ID of the function tool call generated by the model.\n"
        },
        "output": {
          "type": "string",
          "description": "A JSON string of the output of the function tool call.\n"
        },
        "status": {
          "type": "string",
          "description": "The status of the item. One of `in_progress`, `completed`, or\n`incomplete`. Populated when items are returned via API.\n",
          "enum": [
            "in_progress",
            "completed",
            "incomplete"
          ]
        }
      },
      "required": [
        "type",
        "call_id",
        "output"
      ],
      "examples": []
    },
    {
      "name": "FunctionToolCallOutputResource",
      "type": "object",
      "description": "",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "FunctionToolCallResource",
      "type": "object",
      "description": "",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "GraderLabelModel",
      "type": "object",
      "description": "A LabelModelGrader object which uses a model to assign labels to each item\nin the evaluation.\n",
      "properties": {
        "type": {
          "description": "The object type, which is always `label_model`.",
          "type": "string",
          "enum": [
            "label_model"
          ],
          "x-stainless-const": true
        },
        "name": {
          "type": "string",
          "description": "The name of the grader."
        },
        "model": {
          "type": "string",
          "description": "The model to use for the evaluation. Must support structured outputs."
        },
        "input": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/EvalItem"
          }
        },
        "labels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The labels to assign to each item in the evaluation."
        },
        "passing_labels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The labels that indicate a passing result. Must be a subset of labels."
        }
      },
      "required": [
        "type",
        "model",
        "input",
        "passing_labels",
        "labels",
        "name"
      ],
      "examples": []
    },
    {
      "name": "GraderMulti",
      "type": "object",
      "description": "A MultiGrader object combines the output of multiple graders to produce a single score.",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "multi"
          ],
          "default": "multi",
          "description": "The object type, which is always `multi`.",
          "x-stainless-const": true
        },
        "name": {
          "type": "string",
          "description": "The name of the grader."
        },
        "graders": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/GraderStringCheck"
            },
            {
              "$ref": "#/components/schemas/GraderTextSimilarity"
            },
            {
              "$ref": "#/components/schemas/GraderPython"
            },
            {
              "$ref": "#/components/schemas/GraderScoreModel"
            },
            {
              "$ref": "#/components/schemas/GraderLabelModel"
            }
          ]
        },
        "calculate_output": {
          "type": "string",
          "description": "A formula to calculate the output based on grader results."
        }
      },
      "required": [
        "name",
        "type",
        "graders",
        "calculate_output"
      ],
      "examples": []
    },
    {
      "name": "GraderPython",
      "type": "object",
      "description": "A PythonGrader object that runs a python script on the input.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "python"
          ],
          "description": "The object type, which is always `python`.",
          "x-stainless-const": true
        },
        "name": {
          "type": "string",
          "description": "The name of the grader."
        },
        "source": {
          "type": "string",
          "description": "The source code of the python script."
        },
        "image_tag": {
          "type": "string",
          "description": "The image tag to use for the python script."
        }
      },
      "required": [
        "type",
        "name",
        "source"
      ],
      "examples": []
    },
    {
      "name": "GraderScoreModel",
      "type": "object",
      "description": "A ScoreModelGrader object that uses a model to assign a score to the input.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "score_model"
          ],
          "description": "The object type, which is always `score_model`.",
          "x-stainless-const": true
        },
        "name": {
          "type": "string",
          "description": "The name of the grader."
        },
        "model": {
          "type": "string",
          "description": "The model to use for the evaluation."
        },
        "sampling_params": {
          "type": "object",
          "description": "The sampling parameters for the model."
        },
        "input": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/EvalItem"
          },
          "description": "The input text. This may include template strings."
        },
        "range": {
          "type": "array",
          "items": {
            "type": "number",
            "min_items": 2,
            "max_items": 2
          },
          "description": "The range of the score. Defaults to `[0, 1]`."
        }
      },
      "required": [
        "type",
        "name",
        "input",
        "model"
      ],
      "examples": []
    },
    {
      "name": "GraderStringCheck",
      "type": "object",
      "description": "A StringCheckGrader object that performs a string comparison between input and reference using a specified operation.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "string_check"
          ],
          "description": "The object type, which is always `string_check`.",
          "x-stainless-const": true
        },
        "name": {
          "type": "string",
          "description": "The name of the grader."
        },
        "input": {
          "type": "string",
          "description": "The input text. This may include template strings."
        },
        "reference": {
          "type": "string",
          "description": "The reference text. This may include template strings."
        },
        "operation": {
          "type": "string",
          "enum": [
            "eq",
            "ne",
            "like",
            "ilike"
          ],
          "description": "The string check operation to perform. One of `eq`, `ne`, `like`, or `ilike`."
        }
      },
      "required": [
        "type",
        "name",
        "input",
        "reference",
        "operation"
      ],
      "examples": []
    },
    {
      "name": "GraderTextSimilarity",
      "type": "object",
      "description": "A TextSimilarityGrader object which grades text based on similarity metrics.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "text_similarity"
          ],
          "default": "text_similarity",
          "description": "The type of grader.",
          "x-stainless-const": true
        },
        "name": {
          "type": "string",
          "description": "The name of the grader."
        },
        "input": {
          "type": "string",
          "description": "The text being graded."
        },
        "reference": {
          "type": "string",
          "description": "The text being graded against."
        },
        "evaluation_metric": {
          "type": "string",
          "enum": [
            "cosine",
            "fuzzy_match",
            "bleu",
            "gleu",
            "meteor",
            "rouge_1",
            "rouge_2",
            "rouge_3",
            "rouge_4",
            "rouge_5",
            "rouge_l"
          ],
          "description": "The evaluation metric to use. One of `cosine`, `fuzzy_match`, `bleu`, \n`gleu`, `meteor`, `rouge_1`, `rouge_2`, `rouge_3`, `rouge_4`, `rouge_5`, \nor `rouge_l`.\n"
        }
      },
      "required": [
        "type",
        "name",
        "input",
        "reference",
        "evaluation_metric"
      ],
      "examples": []
    },
    {
      "name": "Image",
      "type": "object",
      "description": "Represents the content or the URL of an image generated by the OpenAI API.",
      "properties": {
        "b64_json": {
          "type": "string",
          "description": "The base64-encoded JSON of the generated image. Default value for `gpt-image-1`, and only present if `response_format` is set to `b64_json` for `dall-e-2` and `dall-e-3`."
        },
        "url": {
          "type": "string",
          "description": "When using `dall-e-2` or `dall-e-3`, the URL of the generated image if `response_format` is set to `url` (default value). Unsupported for `gpt-image-1`."
        },
        "revised_prompt": {
          "type": "string",
          "description": "For `dall-e-3` only, the revised prompt that was used to generate the image."
        }
      },
      "required": [],
      "examples": []
    },
    {
      "name": "ImageEditCompletedEvent",
      "type": "object",
      "description": "Emitted when image editing has completed and the final image is available.\n",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the event. Always `image_edit.completed`.\n",
          "enum": [
            "image_edit.completed"
          ],
          "x-stainless-const": true
        },
        "b64_json": {
          "type": "string",
          "description": "Base64-encoded final edited image data, suitable for rendering as an image.\n"
        },
        "created_at": {
          "type": "integer",
          "description": "The Unix timestamp when the event was created.\n"
        },
        "size": {
          "type": "string",
          "description": "The size of the edited image.\n",
          "enum": [
            "1024x1024",
            "1024x1536",
            "1536x1024",
            "auto"
          ]
        },
        "quality": {
          "type": "string",
          "description": "The quality setting for the edited image.\n",
          "enum": [
            "low",
            "medium",
            "high",
            "auto"
          ]
        },
        "background": {
          "type": "string",
          "description": "The background setting for the edited image.\n",
          "enum": [
            "transparent",
            "opaque",
            "auto"
          ]
        },
        "output_format": {
          "type": "string",
          "description": "The output format for the edited image.\n",
          "enum": [
            "png",
            "webp",
            "jpeg"
          ]
        },
        "usage": {
          "$ref": "#/components/schemas/ImagesUsage"
        }
      },
      "required": [
        "type",
        "b64_json",
        "created_at",
        "size",
        "quality",
        "background",
        "output_format",
        "usage"
      ],
      "examples": []
    },
    {
      "name": "ImageEditPartialImageEvent",
      "type": "object",
      "description": "Emitted when a partial image is available during image editing streaming.\n",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the event. Always `image_edit.partial_image`.\n",
          "enum": [
            "image_edit.partial_image"
          ],
          "x-stainless-const": true
        },
        "b64_json": {
          "type": "string",
          "description": "Base64-encoded partial image data, suitable for rendering as an image.\n"
        },
        "created_at": {
          "type": "integer",
          "description": "The Unix timestamp when the event was created.\n"
        },
        "size": {
          "type": "string",
          "description": "The size of the requested edited image.\n",
          "enum": [
            "1024x1024",
            "1024x1536",
            "1536x1024",
            "auto"
          ]
        },
        "quality": {
          "type": "string",
          "description": "The quality setting for the requested edited image.\n",
          "enum": [
            "low",
            "medium",
            "high",
            "auto"
          ]
        },
        "background": {
          "type": "string",
          "description": "The background setting for the requested edited image.\n",
          "enum": [
            "transparent",
            "opaque",
            "auto"
          ]
        },
        "output_format": {
          "type": "string",
          "description": "The output format for the requested edited image.\n",
          "enum": [
            "png",
            "webp",
            "jpeg"
          ]
        },
        "partial_image_index": {
          "type": "integer",
          "description": "0-based index for the partial image (streaming).\n"
        }
      },
      "required": [
        "type",
        "b64_json",
        "created_at",
        "size",
        "quality",
        "background",
        "output_format",
        "partial_image_index"
      ],
      "examples": []
    },
    {
      "name": "ImageEditStreamEvent",
      "type": "object",
      "description": "",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "ImageGenCompletedEvent",
      "type": "object",
      "description": "Emitted when image generation has completed and the final image is available.\n",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the event. Always `image_generation.completed`.\n",
          "enum": [
            "image_generation.completed"
          ],
          "x-stainless-const": true
        },
        "b64_json": {
          "type": "string",
          "description": "Base64-encoded image data, suitable for rendering as an image.\n"
        },
        "created_at": {
          "type": "integer",
          "description": "The Unix timestamp when the event was created.\n"
        },
        "size": {
          "type": "string",
          "description": "The size of the generated image.\n",
          "enum": [
            "1024x1024",
            "1024x1536",
            "1536x1024",
            "auto"
          ]
        },
        "quality": {
          "type": "string",
          "description": "The quality setting for the generated image.\n",
          "enum": [
            "low",
            "medium",
            "high",
            "auto"
          ]
        },
        "background": {
          "type": "string",
          "description": "The background setting for the generated image.\n",
          "enum": [
            "transparent",
            "opaque",
            "auto"
          ]
        },
        "output_format": {
          "type": "string",
          "description": "The output format for the generated image.\n",
          "enum": [
            "png",
            "webp",
            "jpeg"
          ]
        },
        "usage": {
          "$ref": "#/components/schemas/ImagesUsage"
        }
      },
      "required": [
        "type",
        "b64_json",
        "created_at",
        "size",
        "quality",
        "background",
        "output_format",
        "usage"
      ],
      "examples": []
    },
    {
      "name": "ImageGenPartialImageEvent",
      "type": "object",
      "description": "Emitted when a partial image is available during image generation streaming.\n",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the event. Always `image_generation.partial_image`.\n",
          "enum": [
            "image_generation.partial_image"
          ],
          "x-stainless-const": true
        },
        "b64_json": {
          "type": "string",
          "description": "Base64-encoded partial image data, suitable for rendering as an image.\n"
        },
        "created_at": {
          "type": "integer",
          "description": "The Unix timestamp when the event was created.\n"
        },
        "size": {
          "type": "string",
          "description": "The size of the requested image.\n",
          "enum": [
            "1024x1024",
            "1024x1536",
            "1536x1024",
            "auto"
          ]
        },
        "quality": {
          "type": "string",
          "description": "The quality setting for the requested image.\n",
          "enum": [
            "low",
            "medium",
            "high",
            "auto"
          ]
        },
        "background": {
          "type": "string",
          "description": "The background setting for the requested image.\n",
          "enum": [
            "transparent",
            "opaque",
            "auto"
          ]
        },
        "output_format": {
          "type": "string",
          "description": "The output format for the requested image.\n",
          "enum": [
            "png",
            "webp",
            "jpeg"
          ]
        },
        "partial_image_index": {
          "type": "integer",
          "description": "0-based index for the partial image (streaming).\n"
        }
      },
      "required": [
        "type",
        "b64_json",
        "created_at",
        "size",
        "quality",
        "background",
        "output_format",
        "partial_image_index"
      ],
      "examples": []
    },
    {
      "name": "ImageGenStreamEvent",
      "type": "object",
      "description": "",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "ImageGenTool",
      "type": "object",
      "description": "A tool that generates images using a model like `gpt-image-1`.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "image_generation"
          ],
          "description": "The type of the image generation tool. Always `image_generation`.\n",
          "x-stainless-const": true
        },
        "model": {
          "type": "string",
          "enum": [
            "gpt-image-1"
          ],
          "description": "The image generation model to use. Default: `gpt-image-1`.\n",
          "default": "gpt-image-1"
        },
        "quality": {
          "type": "string",
          "enum": [
            "low",
            "medium",
            "high",
            "auto"
          ],
          "description": "The quality of the generated image. One of `low`, `medium`, `high`, \nor `auto`. Default: `auto`.\n",
          "default": "auto"
        },
        "size": {
          "type": "string",
          "enum": [
            "1024x1024",
            "1024x1536",
            "1536x1024",
            "auto"
          ],
          "description": "The size of the generated image. One of `1024x1024`, `1024x1536`, \n`1536x1024`, or `auto`. Default: `auto`.\n",
          "default": "auto"
        },
        "output_format": {
          "type": "string",
          "enum": [
            "png",
            "webp",
            "jpeg"
          ],
          "description": "The output format of the generated image. One of `png`, `webp`, or \n`jpeg`. Default: `png`.\n",
          "default": "png"
        },
        "output_compression": {
          "type": "integer",
          "minimum": 0,
          "maximum": 100,
          "description": "Compression level for the output image. Default: 100.\n",
          "default": 100
        },
        "moderation": {
          "type": "string",
          "enum": [
            "auto",
            "low"
          ],
          "description": "Moderation level for the generated image. Default: `auto`.\n",
          "default": "auto"
        },
        "background": {
          "type": "string",
          "enum": [
            "transparent",
            "opaque",
            "auto"
          ],
          "description": "Background type for the generated image. One of `transparent`, \n`opaque`, or `auto`. Default: `auto`.\n",
          "default": "auto"
        },
        "input_fidelity": {
          "$ref": "#/components/schemas/ImageInputFidelity"
        },
        "input_image_mask": {
          "type": "object",
          "description": "Optional mask for inpainting. Contains `image_url` \n(string, optional) and `file_id` (string, optional).\n",
          "properties": {
            "image_url": {
              "type": "string",
              "description": "Base64-encoded mask image.\n"
            },
            "file_id": {
              "type": "string",
              "description": "File ID for the mask image.\n"
            }
          },
          "required": [],
          "additionalProperties": false
        },
        "partial_images": {
          "type": "integer",
          "minimum": 0,
          "maximum": 3,
          "description": "Number of partial images to generate in streaming mode, from 0 (default value) to 3.\n",
          "default": 0
        }
      },
      "required": [
        "type"
      ],
      "examples": []
    },
    {
      "name": "ImageGenToolCall",
      "type": "object",
      "description": "An image generation request made by the model.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "image_generation_call"
          ],
          "description": "The type of the image generation call. Always `image_generation_call`.\n",
          "x-stainless-const": true
        },
        "id": {
          "type": "string",
          "description": "The unique ID of the image generation call.\n"
        },
        "status": {
          "type": "string",
          "enum": [
            "in_progress",
            "completed",
            "generating",
            "failed"
          ],
          "description": "The status of the image generation call.\n"
        },
        "result": {
          "type": "string",
          "description": "The generated image encoded in base64.\n",
          "nullable": true
        }
      },
      "required": [
        "type",
        "id",
        "status",
        "result"
      ],
      "examples": []
    },
    {
      "name": "ImageInputFidelity",
      "type": "string",
      "description": "Control how much effort the model will exert to match the style and features,\nespecially facial features, of input images. This parameter is only supported\nfor `gpt-image-1`. Supports `high` and `low`. Defaults to `low`.\n",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "ImagesResponse",
      "type": "object",
      "description": "The response from the image generation endpoint.",
      "properties": {
        "created": {
          "type": "integer",
          "description": "The Unix timestamp (in seconds) of when the image was created."
        },
        "data": {
          "type": "array",
          "description": "The list of generated images.",
          "items": {
            "$ref": "#/components/schemas/Image"
          }
        },
        "background": {
          "type": "string",
          "description": "The background parameter used for the image generation. Either `transparent` or `opaque`.",
          "enum": [
            "transparent",
            "opaque"
          ]
        },
        "output_format": {
          "type": "string",
          "description": "The output format of the image generation. Either `png`, `webp`, or `jpeg`.",
          "enum": [
            "png",
            "webp",
            "jpeg"
          ]
        },
        "size": {
          "type": "string",
          "description": "The size of the image generated. Either `1024x1024`, `1024x1536`, or `1536x1024`.",
          "enum": [
            "1024x1024",
            "1024x1536",
            "1536x1024"
          ]
        },
        "quality": {
          "type": "string",
          "description": "The quality of the image generated. Either `low`, `medium`, or `high`.",
          "enum": [
            "low",
            "medium",
            "high"
          ]
        },
        "usage": {
          "$ref": "#/components/schemas/ImageGenUsage"
        }
      },
      "required": [
        "created"
      ],
      "examples": []
    },
    {
      "name": "ImagesUsage",
      "type": "object",
      "description": "For `gpt-image-1` only, the token usage information for the image generation.\n",
      "properties": {
        "total_tokens": {
          "type": "integer",
          "description": "The total number of tokens (images and text) used for the image generation.\n"
        },
        "input_tokens": {
          "type": "integer",
          "description": "The number of tokens (images and text) in the input prompt."
        },
        "output_tokens": {
          "type": "integer",
          "description": "The number of image tokens in the output image."
        },
        "input_tokens_details": {
          "type": "object",
          "description": "The input tokens detailed information for the image generation.",
          "required": [
            "text_tokens",
            "image_tokens"
          ],
          "properties": {
            "text_tokens": {
              "type": "integer",
              "description": "The number of text tokens in the input prompt."
            },
            "image_tokens": {
              "type": "integer",
              "description": "The number of image tokens in the input prompt."
            }
          }
        }
      },
      "required": [
        "total_tokens",
        "input_tokens",
        "output_tokens",
        "input_tokens_details"
      ],
      "examples": []
    },
    {
      "name": "Includable",
      "type": "string",
      "description": "Specify additional output data to include in the model response. Currently\nsupported values are:\n- `code_interpreter_call.outputs`: Includes the outputs of python code execution\n  in code interpreter tool call items.\n- `computer_call_output.output.image_url`: Include image urls from the computer call output.\n- `file_search_call.results`: Include the search results of\n  the file search tool call.\n- `message.input_image.image_url`: Include image urls from the input message.\n- `message.output_text.logprobs`: Include logprobs with assistant messages.\n- `reasoning.encrypted_content`: Includes an encrypted version of reasoning\n  tokens in reasoning item outputs. This enables reasoning items to be used in\n  multi-turn conversations when using the Responses API statelessly (like\n  when the `store` parameter is set to `false`, or when an organization is\n  enrolled in the zero data retention program).\n",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "InputAudio",
      "type": "object",
      "description": "An audio input to the model.\n",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the input item. Always `input_audio`.\n",
          "enum": [
            "input_audio"
          ],
          "x-stainless-const": true
        },
        "data": {
          "type": "string",
          "description": "Base64-encoded audio data.\n"
        },
        "format": {
          "type": "string",
          "description": "The format of the audio data. Currently supported formats are `mp3` and\n`wav`.\n",
          "enum": [
            "mp3",
            "wav"
          ]
        }
      },
      "required": [
        "type",
        "data",
        "format"
      ],
      "examples": []
    },
    {
      "name": "InputContent",
      "type": "object",
      "description": "",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "InputItem",
      "type": "object",
      "description": "",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "InputMessage",
      "type": "object",
      "description": "A message input to the model with a role indicating instruction following\nhierarchy. Instructions given with the `developer` or `system` role take\nprecedence over instructions given with the `user` role.\n",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the message input. Always set to `message`.\n",
          "enum": [
            "message"
          ],
          "x-stainless-const": true
        },
        "role": {
          "type": "string",
          "description": "The role of the message input. One of `user`, `system`, or `developer`.\n",
          "enum": [
            "user",
            "system",
            "developer"
          ]
        },
        "status": {
          "type": "string",
          "description": "The status of item. One of `in_progress`, `completed`, or\n`incomplete`. Populated when items are returned via API.\n",
          "enum": [
            "in_progress",
            "completed",
            "incomplete"
          ]
        },
        "content": {
          "$ref": "#/components/schemas/InputMessageContentList"
        }
      },
      "required": [
        "role",
        "content"
      ],
      "examples": []
    },
    {
      "name": "InputMessageContentList",
      "type": "array",
      "description": "A list of one or many input items to the model, containing different content \ntypes.\n",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "InputMessageResource",
      "type": "object",
      "description": "",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "Invite",
      "type": "object",
      "description": "Represents an individual `invite` to the organization.",
      "properties": {
        "object": {
          "type": "string",
          "enum": [
            "organization.invite"
          ],
          "description": "The object type, which is always `organization.invite`",
          "x-stainless-const": true
        },
        "id": {
          "type": "string",
          "description": "The identifier, which can be referenced in API endpoints"
        },
        "email": {
          "type": "string",
          "description": "The email address of the individual to whom the invite was sent"
        },
        "role": {
          "type": "string",
          "enum": [
            "owner",
            "reader"
          ],
          "description": "`owner` or `reader`"
        },
        "status": {
          "type": "string",
          "enum": [
            "accepted",
            "expired",
            "pending"
          ],
          "description": "`accepted`,`expired`, or `pending`"
        },
        "invited_at": {
          "type": "integer",
          "description": "The Unix timestamp (in seconds) of when the invite was sent."
        },
        "expires_at": {
          "type": "integer",
          "description": "The Unix timestamp (in seconds) of when the invite expires."
        },
        "accepted_at": {
          "type": "integer",
          "description": "The Unix timestamp (in seconds) of when the invite was accepted."
        },
        "projects": {
          "type": "array",
          "description": "The projects that were granted membership upon acceptance of the invite.",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Project's public ID"
              },
              "role": {
                "type": "string",
                "enum": [
                  "member",
                  "owner"
                ],
                "description": "Project membership role"
              }
            }
          }
        }
      },
      "required": [
        "object",
        "id",
        "email",
        "role",
        "status",
        "invited_at",
        "expires_at"
      ],
      "examples": []
    },
    {
      "name": "InviteDeleteResponse",
      "type": "object",
      "description": "",
      "properties": {
        "object": {
          "type": "string",
          "enum": [
            "organization.invite.deleted"
          ],
          "description": "The object type, which is always `organization.invite.deleted`",
          "x-stainless-const": true
        },
        "id": {
          "type": "string"
        },
        "deleted": {
          "type": "boolean"
        }
      },
      "required": [
        "object",
        "id",
        "deleted"
      ],
      "examples": []
    },
    {
      "name": "InviteListResponse",
      "type": "object",
      "description": "",
      "properties": {
        "object": {
          "type": "string",
          "enum": [
            "list"
          ],
          "description": "The object type, which is always `list`",
          "x-stainless-const": true
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/Invite"
          }
        },
        "first_id": {
          "type": "string",
          "description": "The first `invite_id` in the retrieved `list`"
        },
        "last_id": {
          "type": "string",
          "description": "The last `invite_id` in the retrieved `list`"
        },
        "has_more": {
          "type": "boolean",
          "description": "The `has_more` property is used for pagination to indicate there are additional results."
        }
      },
      "required": [
        "object",
        "data"
      ],
      "examples": []
    },
    {
      "name": "InviteRequest",
      "type": "object",
      "description": "",
      "properties": {
        "email": {
          "type": "string",
          "description": "Send an email to this address"
        },
        "role": {
          "type": "string",
          "enum": [
            "reader",
            "owner"
          ],
          "description": "`owner` or `reader`"
        },
        "projects": {
          "type": "array",
          "description": "An array of projects to which membership is granted at the same time the org invite is accepted. If omitted, the user will be invited to the default project for compatibility with legacy behavior.",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Project's public ID"
              },
              "role": {
                "type": "string",
                "enum": [
                  "member",
                  "owner"
                ],
                "description": "Project membership role"
              }
            },
            "required": [
              "id",
              "role"
            ]
          }
        }
      },
      "required": [
        "email",
        "role"
      ],
      "examples": []
    },
    {
      "name": "Item",
      "type": "object",
      "description": "Content item used to generate a response.\n",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "ItemResource",
      "type": "object",
      "description": "Content item used to generate a response.\n",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "KeyPress",
      "type": "object",
      "description": "A collection of keypresses the model would like to perform.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "keypress"
          ],
          "default": "keypress",
          "description": "Specifies the event type. For a keypress action, this property is \nalways set to `keypress`.\n",
          "x-stainless-const": true
        },
        "keys": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "One of the keys the model is requesting to be pressed.\n"
          },
          "description": "The combination of keys the model is requesting to be pressed. This is an\narray of strings, each representing a key.\n"
        }
      },
      "required": [
        "type",
        "keys"
      ],
      "examples": []
    },
    {
      "name": "ListAssistantsResponse",
      "type": "object",
      "description": "",
      "properties": {
        "object": {
          "type": "string",
          "example": "list"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/AssistantObject"
          }
        },
        "first_id": {
          "type": "string",
          "example": "asst_abc123"
        },
        "last_id": {
          "type": "string",
          "example": "asst_abc456"
        },
        "has_more": {
          "type": "boolean",
          "example": false
        }
      },
      "required": [
        "object",
        "data",
        "first_id",
        "last_id",
        "has_more"
      ],
      "examples": []
    },
    {
      "name": "ListAuditLogsResponse",
      "type": "object",
      "description": "",
      "properties": {
        "object": {
          "type": "string",
          "enum": [
            "list"
          ],
          "x-stainless-const": true
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/AuditLog"
          }
        },
        "first_id": {
          "type": "string",
          "example": "audit_log-defb456h8dks"
        },
        "last_id": {
          "type": "string",
          "example": "audit_log-hnbkd8s93s"
        },
        "has_more": {
          "type": "boolean"
        }
      },
      "required": [
        "object",
        "data",
        "first_id",
        "last_id",
        "has_more"
      ],
      "examples": []
    },
    {
      "name": "ListBatchesResponse",
      "type": "object",
      "description": "",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/Batch"
          }
        },
        "first_id": {
          "type": "string",
          "example": "batch_abc123"
        },
        "last_id": {
          "type": "string",
          "example": "batch_abc456"
        },
        "has_more": {
          "type": "boolean"
        },
        "object": {
          "type": "string",
          "enum": [
            "list"
          ],
          "x-stainless-const": true
        }
      },
      "required": [
        "object",
        "data",
        "has_more"
      ],
      "examples": []
    },
    {
      "name": "ListCertificatesResponse",
      "type": "object",
      "description": "",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/Certificate"
          }
        },
        "first_id": {
          "type": "string",
          "example": "cert_abc"
        },
        "last_id": {
          "type": "string",
          "example": "cert_abc"
        },
        "has_more": {
          "type": "boolean"
        },
        "object": {
          "type": "string",
          "enum": [
            "list"
          ],
          "x-stainless-const": true
        }
      },
      "required": [
        "object",
        "data",
        "has_more"
      ],
      "examples": []
    },
    {
      "name": "ListFilesResponse",
      "type": "object",
      "description": "",
      "properties": {
        "object": {
          "type": "string",
          "example": "list"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/OpenAIFile"
          }
        },
        "first_id": {
          "type": "string",
          "example": "file-abc123"
        },
        "last_id": {
          "type": "string",
          "example": "file-abc456"
        },
        "has_more": {
          "type": "boolean",
          "example": false
        }
      },
      "required": [
        "object",
        "data",
        "first_id",
        "last_id",
        "has_more"
      ],
      "examples": []
    },
    {
      "name": "ListFineTuningCheckpointPermissionResponse",
      "type": "object",
      "description": "",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/FineTuningCheckpointPermission"
          }
        },
        "object": {
          "type": "string",
          "enum": [
            "list"
          ],
          "x-stainless-const": true
        },
        "first_id": {
          "type": "string",
          "nullable": true
        },
        "last_id": {
          "type": "string",
          "nullable": true
        },
        "has_more": {
          "type": "boolean"
        }
      },
      "required": [
        "object",
        "data",
        "has_more"
      ],
      "examples": []
    },
    {
      "name": "ListFineTuningJobCheckpointsResponse",
      "type": "object",
      "description": "",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/FineTuningJobCheckpoint"
          }
        },
        "object": {
          "type": "string",
          "enum": [
            "list"
          ],
          "x-stainless-const": true
        },
        "first_id": {
          "type": "string",
          "nullable": true
        },
        "last_id": {
          "type": "string",
          "nullable": true
        },
        "has_more": {
          "type": "boolean"
        }
      },
      "required": [
        "object",
        "data",
        "has_more"
      ],
      "examples": []
    },
    {
      "name": "ListFineTuningJobEventsResponse",
      "type": "object",
      "description": "",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/FineTuningJobEvent"
          }
        },
        "object": {
          "type": "string",
          "enum": [
            "list"
          ],
          "x-stainless-const": true
        },
        "has_more": {
          "type": "boolean"
        }
      },
      "required": [
        "object",
        "data",
        "has_more"
      ],
      "examples": []
    },
    {
      "name": "ListMessagesResponse",
      "type": "object",
      "description": "",
      "properties": {
        "object": {
          "type": "string",
          "example": "list"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/MessageObject"
          }
        },
        "first_id": {
          "type": "string",
          "example": "msg_abc123"
        },
        "last_id": {
          "type": "string",
          "example": "msg_abc123"
        },
        "has_more": {
          "type": "boolean",
          "example": false
        }
      },
      "required": [
        "object",
        "data",
        "first_id",
        "last_id",
        "has_more"
      ],
      "examples": []
    },
    {
      "name": "ListModelsResponse",
      "type": "object",
      "description": "",
      "properties": {
        "object": {
          "type": "string",
          "enum": [
            "list"
          ],
          "x-stainless-const": true
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/Model"
          }
        }
      },
      "required": [
        "object",
        "data"
      ],
      "examples": []
    },
    {
      "name": "ListPaginatedFineTuningJobsResponse",
      "type": "object",
      "description": "",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/FineTuningJob"
          }
        },
        "has_more": {
          "type": "boolean"
        },
        "object": {
          "type": "string",
          "enum": [
            "list"
          ],
          "x-stainless-const": true
        }
      },
      "required": [
        "object",
        "data",
        "has_more"
      ],
      "examples": []
    },
    {
      "name": "ListRunStepsResponse",
      "type": "object",
      "description": "",
      "properties": {
        "object": {
          "type": "string",
          "example": "list"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/RunStepObject"
          }
        },
        "first_id": {
          "type": "string",
          "example": "step_abc123"
        },
        "last_id": {
          "type": "string",
          "example": "step_abc456"
        },
        "has_more": {
          "type": "boolean",
          "example": false
        }
      },
      "required": [
        "object",
        "data",
        "first_id",
        "last_id",
        "has_more"
      ],
      "examples": []
    },
    {
      "name": "ListRunsResponse",
      "type": "object",
      "description": "",
      "properties": {
        "object": {
          "type": "string",
          "example": "list"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/RunObject"
          }
        },
        "first_id": {
          "type": "string",
          "example": "run_abc123"
        },
        "last_id": {
          "type": "string",
          "example": "run_abc456"
        },
        "has_more": {
          "type": "boolean",
          "example": false
        }
      },
      "required": [
        "object",
        "data",
        "first_id",
        "last_id",
        "has_more"
      ],
      "examples": []
    },
    {
      "name": "ListVectorStoreFilesResponse",
      "type": "object",
      "description": "",
      "properties": {
        "object": {
          "type": "string",
          "example": "list"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/VectorStoreFileObject"
          }
        },
        "first_id": {
          "type": "string",
          "example": "file-abc123"
        },
        "last_id": {
          "type": "string",
          "example": "file-abc456"
        },
        "has_more": {
          "type": "boolean",
          "example": false
        }
      },
      "required": [
        "object",
        "data",
        "first_id",
        "last_id",
        "has_more"
      ],
      "examples": []
    },
    {
      "name": "ListVectorStoresResponse",
      "type": "object",
      "description": "",
      "properties": {
        "object": {
          "type": "string",
          "example": "list"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/VectorStoreObject"
          }
        },
        "first_id": {
          "type": "string",
          "example": "vs_abc123"
        },
        "last_id": {
          "type": "string",
          "example": "vs_abc456"
        },
        "has_more": {
          "type": "boolean",
          "example": false
        }
      },
      "required": [
        "object",
        "data",
        "first_id",
        "last_id",
        "has_more"
      ],
      "examples": []
    },
    {
      "name": "LocalShellExecAction",
      "type": "object",
      "description": "Execute a shell command on the server.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "exec"
          ],
          "description": "The type of the local shell action. Always `exec`.\n",
          "x-stainless-const": true
        },
        "command": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The command to run.\n"
        },
        "timeout_ms": {
          "type": "integer",
          "description": "Optional timeout in milliseconds for the command.\n",
          "nullable": true
        },
        "working_directory": {
          "type": "string",
          "description": "Optional working directory to run the command in.\n",
          "nullable": true
        },
        "env": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Environment variables to set for the command.\n"
        },
        "user": {
          "type": "string",
          "description": "Optional user to run the command as.\n",
          "nullable": true
        }
      },
      "required": [
        "type",
        "command",
        "env"
      ],
      "examples": []
    },
    {
      "name": "LocalShellTool",
      "type": "object",
      "description": "A tool that allows the model to execute shell commands in a local environment.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "local_shell"
          ],
          "description": "The type of the local shell tool. Always `local_shell`.",
          "x-stainless-const": true
        }
      },
      "required": [
        "type"
      ],
      "examples": []
    },
    {
      "name": "LocalShellToolCall",
      "type": "object",
      "description": "A tool call to run a command on the local shell.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "local_shell_call"
          ],
          "description": "The type of the local shell call. Always `local_shell_call`.\n",
          "x-stainless-const": true
        },
        "id": {
          "type": "string",
          "description": "The unique ID of the local shell call.\n"
        },
        "call_id": {
          "type": "string",
          "description": "The unique ID of the local shell tool call generated by the model.\n"
        },
        "action": {
          "$ref": "#/components/schemas/LocalShellExecAction"
        },
        "status": {
          "type": "string",
          "enum": [
            "in_progress",
            "completed",
            "incomplete"
          ],
          "description": "The status of the local shell call.\n"
        }
      },
      "required": [
        "type",
        "id",
        "call_id",
        "action",
        "status"
      ],
      "examples": []
    },
    {
      "name": "LocalShellToolCallOutput",
      "type": "object",
      "description": "The output of a local shell tool call.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "local_shell_call_output"
          ],
          "description": "The type of the local shell tool call output. Always `local_shell_call_output`.\n",
          "x-stainless-const": true
        },
        "id": {
          "type": "string",
          "description": "The unique ID of the local shell tool call generated by the model.\n"
        },
        "output": {
          "type": "string",
          "description": "A JSON string of the output of the local shell tool call.\n"
        },
        "status": {
          "type": "string",
          "enum": [
            "in_progress",
            "completed",
            "incomplete"
          ],
          "description": "The status of the item. One of `in_progress`, `completed`, or `incomplete`.\n",
          "nullable": true
        }
      },
      "required": [
        "id",
        "type",
        "call_id",
        "output"
      ],
      "examples": []
    },
    {
      "name": "LogProbProperties",
      "type": "object",
      "description": "A log probability object.\n",
      "properties": {
        "token": {
          "type": "string",
          "description": "The token that was used to generate the log probability.\n"
        },
        "logprob": {
          "type": "number",
          "description": "The log probability of the token.\n"
        },
        "bytes": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "The bytes that were used to generate the log probability.\n"
        }
      },
      "required": [
        "token",
        "logprob",
        "bytes"
      ],
      "examples": []
    },
    {
      "name": "MCPApprovalRequest",
      "type": "object",
      "description": "A request for human approval of a tool invocation.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "mcp_approval_request"
          ],
          "description": "The type of the item. Always `mcp_approval_request`.\n",
          "x-stainless-const": true
        },
        "id": {
          "type": "string",
          "description": "The unique ID of the approval request.\n"
        },
        "server_label": {
          "type": "string",
          "description": "The label of the MCP server making the request.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the tool to run.\n"
        },
        "arguments": {
          "type": "string",
          "description": "A JSON string of arguments for the tool.\n"
        }
      },
      "required": [
        "type",
        "id",
        "server_label",
        "name",
        "arguments"
      ],
      "examples": []
    },
    {
      "name": "MCPApprovalResponse",
      "type": "object",
      "description": "A response to an MCP approval request.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "mcp_approval_response"
          ],
          "description": "The type of the item. Always `mcp_approval_response`.\n",
          "x-stainless-const": true
        },
        "id": {
          "type": "string",
          "description": "The unique ID of the approval response\n",
          "nullable": true
        },
        "approval_request_id": {
          "type": "string",
          "description": "The ID of the approval request being answered.\n"
        },
        "approve": {
          "type": "boolean",
          "description": "Whether the request was approved.\n"
        },
        "reason": {
          "type": "string",
          "description": "Optional reason for the decision.\n",
          "nullable": true
        }
      },
      "required": [
        "type",
        "request_id",
        "approve",
        "approval_request_id"
      ],
      "examples": []
    },
    {
      "name": "MCPApprovalResponseResource",
      "type": "object",
      "description": "A response to an MCP approval request.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "mcp_approval_response"
          ],
          "description": "The type of the item. Always `mcp_approval_response`.\n",
          "x-stainless-const": true
        },
        "id": {
          "type": "string",
          "description": "The unique ID of the approval response\n"
        },
        "approval_request_id": {
          "type": "string",
          "description": "The ID of the approval request being answered.\n"
        },
        "approve": {
          "type": "boolean",
          "description": "Whether the request was approved.\n"
        },
        "reason": {
          "type": "string",
          "description": "Optional reason for the decision.\n",
          "nullable": true
        }
      },
      "required": [
        "type",
        "id",
        "request_id",
        "approve",
        "approval_request_id"
      ],
      "examples": []
    },
    {
      "name": "MCPListTools",
      "type": "object",
      "description": "A list of tools available on an MCP server.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "mcp_list_tools"
          ],
          "description": "The type of the item. Always `mcp_list_tools`.\n",
          "x-stainless-const": true
        },
        "id": {
          "type": "string",
          "description": "The unique ID of the list.\n"
        },
        "server_label": {
          "type": "string",
          "description": "The label of the MCP server.\n"
        },
        "tools": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/MCPListToolsTool"
          },
          "description": "The tools available on the server.\n"
        },
        "error": {
          "type": "string",
          "description": "Error message if the server could not list tools.\n",
          "nullable": true
        }
      },
      "required": [
        "type",
        "id",
        "server_label",
        "tools"
      ],
      "examples": []
    },
    {
      "name": "MCPListToolsTool",
      "type": "object",
      "description": "A tool available on an MCP server.\n",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the tool.\n"
        },
        "description": {
          "type": "string",
          "description": "The description of the tool.\n",
          "nullable": true
        },
        "input_schema": {
          "type": "object",
          "description": "The JSON schema describing the tool's input.\n"
        },
        "annotations": {
          "type": "object",
          "description": "Additional annotations about the tool.\n",
          "nullable": true
        }
      },
      "required": [
        "name",
        "input_schema"
      ],
      "examples": []
    },
    {
      "name": "MCPTool",
      "type": "object",
      "description": "Give the model access to additional tools via remote Model Context Protocol \n(MCP) servers. [Learn more about MCP](https://platform.openai.com/docs/guides/tools-remote-mcp).\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "mcp"
          ],
          "description": "The type of the MCP tool. Always `mcp`.",
          "x-stainless-const": true
        },
        "server_label": {
          "type": "string",
          "description": "A label for this MCP server, used to identify it in tool calls.\n"
        },
        "server_url": {
          "type": "string",
          "description": "The URL for the MCP server. One of `server_url` or `connector_id` must be \nprovided.\n"
        },
        "connector_id": {
          "type": "string",
          "enum": [
            "connector_dropbox",
            "connector_gmail",
            "connector_googlecalendar",
            "connector_googledrive",
            "connector_microsoftteams",
            "connector_outlookcalendar",
            "connector_outlookemail",
            "connector_sharepoint"
          ],
          "description": "Identifier for service connectors, like those available in ChatGPT. One of\n`server_url` or `connector_id` must be provided. Learn more about service\nconnectors [here](https://platform.openai.com/docs/guides/tools-remote-mcp#connectors).\n\nCurrently supported `connector_id` values are:\n\n- Dropbox: `connector_dropbox`\n- Gmail: `connector_gmail`\n- Google Calendar: `connector_googlecalendar`\n- Google Drive: `connector_googledrive`\n- Microsoft Teams: `connector_microsoftteams`\n- Outlook Calendar: `connector_outlookcalendar`\n- Outlook Email: `connector_outlookemail`\n- SharePoint: `connector_sharepoint`\n"
        },
        "authorization": {
          "type": "string",
          "description": "An OAuth access token that can be used with a remote MCP server, either \nwith a custom MCP server URL or a service connector. Your application\nmust handle the OAuth authorization flow and provide the token here.\n"
        },
        "server_description": {
          "type": "string",
          "description": "Optional description of the MCP server, used to provide more context.\n"
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "nullable": true,
          "description": "Optional HTTP headers to send to the MCP server. Use for authentication\nor other purposes.\n"
        },
        "allowed_tools": {
          "description": "List of allowed tool names or a filter object.\n",
          "nullable": true,
          "anyOf": [
            {
              "type": "array",
              "title": "MCP allowed tools",
              "description": "A string array of allowed tool names",
              "items": {
                "type": "string"
              }
            },
            {
              "$ref": "#/components/schemas/MCPToolFilter"
            }
          ]
        },
        "require_approval": {
          "description": "Specify which of the MCP server's tools require approval.",
          "nullable": true,
          "anyOf": [
            {
              "type": "object",
              "title": "MCP tool approval filter",
              "description": "Specify which of the MCP server's tools require approval. Can be\n`always`, `never`, or a filter object associated with tools\nthat require approval.\n",
              "properties": {
                "always": {
                  "$ref": "#/components/schemas/MCPToolFilter"
                },
                "never": {
                  "$ref": "#/components/schemas/MCPToolFilter"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "string",
              "title": "MCP tool approval setting",
              "description": "Specify a single approval policy for all tools. One of `always` or \n`never`. When set to `always`, all tools will require approval. When \nset to `never`, all tools will not require approval.\n",
              "enum": [
                "always",
                "never"
              ]
            }
          ]
        }
      },
      "required": [
        "type",
        "server_label"
      ],
      "examples": []
    },
    {
      "name": "MCPToolCall",
      "type": "object",
      "description": "An invocation of a tool on an MCP server.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "mcp_call"
          ],
          "description": "The type of the item. Always `mcp_call`.\n",
          "x-stainless-const": true
        },
        "id": {
          "type": "string",
          "description": "The unique ID of the tool call.\n"
        },
        "server_label": {
          "type": "string",
          "description": "The label of the MCP server running the tool.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the tool that was run.\n"
        },
        "arguments": {
          "type": "string",
          "description": "A JSON string of the arguments passed to the tool.\n"
        },
        "output": {
          "type": "string",
          "description": "The output from the tool call.\n",
          "nullable": true
        },
        "error": {
          "type": "string",
          "description": "The error from the tool call, if any.\n",
          "nullable": true
        }
      },
      "required": [
        "type",
        "id",
        "server_label",
        "name",
        "arguments"
      ],
      "examples": []
    },
    {
      "name": "MCPToolFilter",
      "type": "object",
      "description": "A filter object to specify which tools are allowed.\n",
      "properties": {
        "tool_names": {
          "type": "array",
          "title": "MCP allowed tools",
          "items": {
            "type": "string"
          },
          "description": "List of allowed tool names."
        },
        "read_only": {
          "type": "boolean",
          "description": "Indicates whether or not a tool modifies data or is read-only. If an\nMCP server is [annotated with `readOnlyHint`](https://modelcontextprotocol.io/specification/2025-06-18/schema#toolannotations-readonlyhint),\nit will match this filter.\n"
        }
      },
      "required": [],
      "examples": []
    },
    {
      "name": "MessageContentImageFileObject",
      "type": "object",
      "description": "References an image [File](https://platform.openai.com/docs/api-reference/files) in the content of a message.",
      "properties": {
        "type": {
          "description": "Always `image_file`.",
          "type": "string",
          "enum": [
            "image_file"
          ],
          "x-stainless-const": true
        },
        "image_file": {
          "type": "object",
          "properties": {
            "file_id": {
              "description": "The [File](https://platform.openai.com/docs/api-reference/files) ID of the image in the message content. Set `purpose=\"vision\"` when uploading the File if you need to later display the file content.",
              "type": "string"
            },
            "detail": {
              "type": "string",
              "description": "Specifies the detail level of the image if specified by the user. `low` uses fewer tokens, you can opt in to high resolution using `high`.",
              "enum": [
                "auto",
                "low",
                "high"
              ],
              "default": "auto"
            }
          },
          "required": [
            "file_id"
          ]
        }
      },
      "required": [
        "type",
        "image_file"
      ],
      "examples": []
    },
    {
      "name": "MessageContentImageUrlObject",
      "type": "object",
      "description": "References an image URL in the content of a message.",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "image_url"
          ],
          "description": "The type of the content part.",
          "x-stainless-const": true
        },
        "image_url": {
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "description": "The external URL of the image, must be a supported image types: jpeg, jpg, png, gif, webp.",
              "format": "uri"
            },
            "detail": {
              "type": "string",
              "description": "Specifies the detail level of the image. `low` uses fewer tokens, you can opt in to high resolution using `high`. Default value is `auto`",
              "enum": [
                "auto",
                "low",
                "high"
              ],
              "default": "auto"
            }
          },
          "required": [
            "url"
          ]
        }
      },
      "required": [
        "type",
        "image_url"
      ],
      "examples": []
    },
    {
      "name": "MessageContentRefusalObject",
      "type": "object",
      "description": "The refusal content generated by the assistant.",
      "properties": {
        "type": {
          "description": "Always `refusal`.",
          "type": "string",
          "enum": [
            "refusal"
          ],
          "x-stainless-const": true
        },
        "refusal": {
          "type": "string",
          "nullable": false
        }
      },
      "required": [
        "type",
        "refusal"
      ],
      "examples": []
    },
    {
      "name": "MessageContentTextAnnotationsFileCitationObject",
      "type": "object",
      "description": "A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the \"file_search\" tool to search files.",
      "properties": {
        "type": {
          "description": "Always `file_citation`.",
          "type": "string",
          "enum": [
            "file_citation"
          ],
          "x-stainless-const": true
        },
        "text": {
          "description": "The text in the message content that needs to be replaced.",
          "type": "string"
        },
        "file_citation": {
          "type": "object",
          "properties": {
            "file_id": {
              "description": "The ID of the specific File the citation is from.",
              "type": "string"
            }
          },
          "required": [
            "file_id"
          ]
        },
        "start_index": {
          "type": "integer",
          "minimum": 0
        },
        "end_index": {
          "type": "integer",
          "minimum": 0
        }
      },
      "required": [
        "type",
        "text",
        "file_citation",
        "start_index",
        "end_index"
      ],
      "examples": []
    },
    {
      "name": "MessageContentTextAnnotationsFilePathObject",
      "type": "object",
      "description": "A URL for the file that's generated when the assistant used the `code_interpreter` tool to generate a file.",
      "properties": {
        "type": {
          "description": "Always `file_path`.",
          "type": "string",
          "enum": [
            "file_path"
          ],
          "x-stainless-const": true
        },
        "text": {
          "description": "The text in the message content that needs to be replaced.",
          "type": "string"
        },
        "file_path": {
          "type": "object",
          "properties": {
            "file_id": {
              "description": "The ID of the file that was generated.",
              "type": "string"
            }
          },
          "required": [
            "file_id"
          ]
        },
        "start_index": {
          "type": "integer",
          "minimum": 0
        },
        "end_index": {
          "type": "integer",
          "minimum": 0
        }
      },
      "required": [
        "type",
        "text",
        "file_path",
        "start_index",
        "end_index"
      ],
      "examples": []
    },
    {
      "name": "MessageContentTextObject",
      "type": "object",
      "description": "The text content that is part of a message.",
      "properties": {
        "type": {
          "description": "Always `text`.",
          "type": "string",
          "enum": [
            "text"
          ],
          "x-stainless-const": true
        },
        "text": {
          "type": "object",
          "properties": {
            "value": {
              "description": "The data that makes up the text.",
              "type": "string"
            },
            "annotations": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TextAnnotation"
              }
            }
          },
          "required": [
            "value",
            "annotations"
          ]
        }
      },
      "required": [
        "type",
        "text"
      ],
      "examples": []
    },
    {
      "name": "MessageDeltaContentImageFileObject",
      "type": "object",
      "description": "References an image [File](https://platform.openai.com/docs/api-reference/files) in the content of a message.",
      "properties": {
        "index": {
          "type": "integer",
          "description": "The index of the content part in the message."
        },
        "type": {
          "description": "Always `image_file`.",
          "type": "string",
          "enum": [
            "image_file"
          ],
          "x-stainless-const": true
        },
        "image_file": {
          "type": "object",
          "properties": {
            "file_id": {
              "description": "The [File](https://platform.openai.com/docs/api-reference/files) ID of the image in the message content. Set `purpose=\"vision\"` when uploading the File if you need to later display the file content.",
              "type": "string"
            },
            "detail": {
              "type": "string",
              "description": "Specifies the detail level of the image if specified by the user. `low` uses fewer tokens, you can opt in to high resolution using `high`.",
              "enum": [
                "auto",
                "low",
                "high"
              ],
              "default": "auto"
            }
          }
        }
      },
      "required": [
        "index",
        "type"
      ],
      "examples": []
    },
    {
      "name": "MessageDeltaContentImageUrlObject",
      "type": "object",
      "description": "References an image URL in the content of a message.",
      "properties": {
        "index": {
          "type": "integer",
          "description": "The index of the content part in the message."
        },
        "type": {
          "description": "Always `image_url`.",
          "type": "string",
          "enum": [
            "image_url"
          ],
          "x-stainless-const": true
        },
        "image_url": {
          "type": "object",
          "properties": {
            "url": {
              "description": "The URL of the image, must be a supported image types: jpeg, jpg, png, gif, webp.",
              "type": "string"
            },
            "detail": {
              "type": "string",
              "description": "Specifies the detail level of the image. `low` uses fewer tokens, you can opt in to high resolution using `high`.",
              "enum": [
                "auto",
                "low",
                "high"
              ],
              "default": "auto"
            }
          }
        }
      },
      "required": [
        "index",
        "type"
      ],
      "examples": []
    },
    {
      "name": "MessageDeltaContentRefusalObject",
      "type": "object",
      "description": "The refusal content that is part of a message.",
      "properties": {
        "index": {
          "type": "integer",
          "description": "The index of the refusal part in the message."
        },
        "type": {
          "description": "Always `refusal`.",
          "type": "string",
          "enum": [
            "refusal"
          ],
          "x-stainless-const": true
        },
        "refusal": {
          "type": "string"
        }
      },
      "required": [
        "index",
        "type"
      ],
      "examples": []
    },
    {
      "name": "MessageDeltaContentTextAnnotationsFileCitationObject",
      "type": "object",
      "description": "A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the \"file_search\" tool to search files.",
      "properties": {
        "index": {
          "type": "integer",
          "description": "The index of the annotation in the text content part."
        },
        "type": {
          "description": "Always `file_citation`.",
          "type": "string",
          "enum": [
            "file_citation"
          ],
          "x-stainless-const": true
        },
        "text": {
          "description": "The text in the message content that needs to be replaced.",
          "type": "string"
        },
        "file_citation": {
          "type": "object",
          "properties": {
            "file_id": {
              "description": "The ID of the specific File the citation is from.",
              "type": "string"
            },
            "quote": {
              "description": "The specific quote in the file.",
              "type": "string"
            }
          }
        },
        "start_index": {
          "type": "integer",
          "minimum": 0
        },
        "end_index": {
          "type": "integer",
          "minimum": 0
        }
      },
      "required": [
        "index",
        "type"
      ],
      "examples": []
    },
    {
      "name": "MessageDeltaContentTextAnnotationsFilePathObject",
      "type": "object",
      "description": "A URL for the file that's generated when the assistant used the `code_interpreter` tool to generate a file.",
      "properties": {
        "index": {
          "type": "integer",
          "description": "The index of the annotation in the text content part."
        },
        "type": {
          "description": "Always `file_path`.",
          "type": "string",
          "enum": [
            "file_path"
          ],
          "x-stainless-const": true
        },
        "text": {
          "description": "The text in the message content that needs to be replaced.",
          "type": "string"
        },
        "file_path": {
          "type": "object",
          "properties": {
            "file_id": {
              "description": "The ID of the file that was generated.",
              "type": "string"
            }
          }
        },
        "start_index": {
          "type": "integer",
          "minimum": 0
        },
        "end_index": {
          "type": "integer",
          "minimum": 0
        }
      },
      "required": [
        "index",
        "type"
      ],
      "examples": []
    },
    {
      "name": "MessageDeltaContentTextObject",
      "type": "object",
      "description": "The text content that is part of a message.",
      "properties": {
        "index": {
          "type": "integer",
          "description": "The index of the content part in the message."
        },
        "type": {
          "description": "Always `text`.",
          "type": "string",
          "enum": [
            "text"
          ],
          "x-stainless-const": true
        },
        "text": {
          "type": "object",
          "properties": {
            "value": {
              "description": "The data that makes up the text.",
              "type": "string"
            },
            "annotations": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TextAnnotationDelta"
              }
            }
          }
        }
      },
      "required": [
        "index",
        "type"
      ],
      "examples": []
    },
    {
      "name": "MessageDeltaObject",
      "type": "object",
      "description": "Represents a message delta i.e. any changed fields on a message during streaming.\n",
      "properties": {
        "id": {
          "description": "The identifier of the message, which can be referenced in API endpoints.",
          "type": "string"
        },
        "object": {
          "description": "The object type, which is always `thread.message.delta`.",
          "type": "string",
          "enum": [
            "thread.message.delta"
          ],
          "x-stainless-const": true
        },
        "delta": {
          "description": "The delta containing the fields that have changed on the Message.",
          "type": "object",
          "properties": {
            "role": {
              "description": "The entity that produced the message. One of `user` or `assistant`.",
              "type": "string",
              "enum": [
                "user",
                "assistant"
              ]
            },
            "content": {
              "description": "The content of the message in array of text and/or images.",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/MessageContentDelta"
              }
            }
          }
        }
      },
      "required": [
        "id",
        "object",
        "delta"
      ],
      "examples": []
    },
    {
      "name": "MessageObject",
      "type": "object",
      "description": "Represents a message within a [thread](https://platform.openai.com/docs/api-reference/threads).",
      "properties": {
        "id": {
          "description": "The identifier, which can be referenced in API endpoints.",
          "type": "string"
        },
        "object": {
          "description": "The object type, which is always `thread.message`.",
          "type": "string",
          "enum": [
            "thread.message"
          ],
          "x-stainless-const": true
        },
        "created_at": {
          "description": "The Unix timestamp (in seconds) for when the message was created.",
          "type": "integer"
        },
        "thread_id": {
          "description": "The [thread](https://platform.openai.com/docs/api-reference/threads) ID that this message belongs to.",
          "type": "string"
        },
        "status": {
          "description": "The status of the message, which can be either `in_progress`, `incomplete`, or `completed`.",
          "type": "string",
          "enum": [
            "in_progress",
            "incomplete",
            "completed"
          ]
        },
        "incomplete_details": {
          "description": "On an incomplete message, details about why the message is incomplete.",
          "type": "object",
          "properties": {
            "reason": {
              "type": "string",
              "description": "The reason the message is incomplete.",
              "enum": [
                "content_filter",
                "max_tokens",
                "run_cancelled",
                "run_expired",
                "run_failed"
              ]
            }
          },
          "nullable": true,
          "required": [
            "reason"
          ]
        },
        "completed_at": {
          "description": "The Unix timestamp (in seconds) for when the message was completed.",
          "type": "integer",
          "nullable": true
        },
        "incomplete_at": {
          "description": "The Unix timestamp (in seconds) for when the message was marked as incomplete.",
          "type": "integer",
          "nullable": true
        },
        "role": {
          "description": "The entity that produced the message. One of `user` or `assistant`.",
          "type": "string",
          "enum": [
            "user",
            "assistant"
          ]
        },
        "content": {
          "description": "The content of the message in array of text and/or images.",
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/MessageContent"
          }
        },
        "assistant_id": {
          "description": "If applicable, the ID of the [assistant](https://platform.openai.com/docs/api-reference/assistants) that authored this message.",
          "type": "string",
          "nullable": true
        },
        "run_id": {
          "description": "The ID of the [run](https://platform.openai.com/docs/api-reference/runs) associated with the creation of this message. Value is `null` when messages are created manually using the create message or create thread endpoints.",
          "type": "string",
          "nullable": true
        },
        "attachments": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "file_id": {
                "type": "string",
                "description": "The ID of the file to attach to the message."
              },
              "tools": {
                "description": "The tools to add this file to.",
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/AssistantToolsCode"
                    },
                    {
                      "$ref": "#/components/schemas/AssistantToolsFileSearchTypeOnly"
                    }
                  ]
                }
              }
            }
          },
          "description": "A list of files attached to the message, and the tools they were added to.",
          "nullable": true
        },
        "metadata": {
          "$ref": "#/components/schemas/Metadata"
        }
      },
      "required": [
        "id",
        "object",
        "created_at",
        "thread_id",
        "status",
        "incomplete_details",
        "completed_at",
        "incomplete_at",
        "role",
        "content",
        "assistant_id",
        "run_id",
        "attachments",
        "metadata"
      ],
      "examples": []
    },
    {
      "name": "MessageRequestContentTextObject",
      "type": "object",
      "description": "The text content that is part of a message.",
      "properties": {
        "type": {
          "description": "Always `text`.",
          "type": "string",
          "enum": [
            "text"
          ],
          "x-stainless-const": true
        },
        "text": {
          "type": "string",
          "description": "Text content to be sent to the model"
        }
      },
      "required": [
        "type",
        "text"
      ],
      "examples": []
    },
    {
      "name": "MessageStreamEvent",
      "type": "object",
      "description": "",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "Metadata",
      "type": "object",
      "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "Model",
      "type": "object",
      "description": "Describes an OpenAI model offering that can be used with the API.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The model identifier, which can be referenced in the API endpoints."
        },
        "created": {
          "type": "integer",
          "description": "The Unix timestamp (in seconds) when the model was created."
        },
        "object": {
          "type": "string",
          "description": "The object type, which is always \"model\".",
          "enum": [
            "model"
          ],
          "x-stainless-const": true
        },
        "owned_by": {
          "type": "string",
          "description": "The organization that owns the model."
        }
      },
      "required": [
        "id",
        "object",
        "created",
        "owned_by"
      ],
      "examples": []
    },
    {
      "name": "ModelIds",
      "type": "object",
      "description": "",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "ModelIdsResponses",
      "type": "object",
      "description": "",
      "properties": {},
      "required": [],
      "examples": [
        "gpt-4o"
      ]
    },
    {
      "name": "ModelIdsShared",
      "type": "object",
      "description": "",
      "properties": {},
      "required": [],
      "examples": [
        "gpt-4o"
      ]
    },
    {
      "name": "ModelResponseProperties",
      "type": "object",
      "description": "",
      "properties": {
        "metadata": {
          "$ref": "#/components/schemas/Metadata"
        },
        "top_logprobs": {
          "description": "An integer between 0 and 20 specifying the number of most likely tokens to\nreturn at each token position, each with an associated log probability.\n",
          "type": "integer",
          "minimum": 0,
          "maximum": 20,
          "nullable": true
        },
        "temperature": {
          "type": "number",
          "minimum": 0,
          "maximum": 2,
          "default": 1,
          "example": 1,
          "nullable": true,
          "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\nWe generally recommend altering this or `top_p` but not both.\n"
        },
        "top_p": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "default": 1,
          "example": 1,
          "nullable": true,
          "description": "An alternative to sampling with temperature, called nucleus sampling,\nwhere the model considers the results of the tokens with top_p probability\nmass. So 0.1 means only the tokens comprising the top 10% probability mass\nare considered.\n\nWe generally recommend altering this or `temperature` but not both.\n"
        },
        "user": {
          "type": "string",
          "example": "user-1234",
          "deprecated": true,
          "description": "This field is being replaced by `safety_identifier` and `prompt_cache_key`. Use `prompt_cache_key` instead to maintain caching optimizations.\nA stable identifier for your end-users. \nUsed to boost cache hit rates by better bucketing similar requests and  to help OpenAI detect and prevent abuse. [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#safety-identifiers).\n"
        },
        "safety_identifier": {
          "type": "string",
          "example": "safety-identifier-1234",
          "description": "A stable identifier used to help detect users of your application that may be violating OpenAI's usage policies. \nThe IDs should be a string that uniquely identifies each user. We recommend hashing their username or email address, in order to avoid sending us any identifying information. [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#safety-identifiers).\n"
        },
        "prompt_cache_key": {
          "type": "string",
          "example": "prompt-cache-key-1234",
          "description": "Used by OpenAI to cache responses for similar requests to optimize your cache hit rates. Replaces the `user` field. [Learn more](https://platform.openai.com/docs/guides/prompt-caching).\n"
        },
        "service_tier": {
          "$ref": "#/components/schemas/ServiceTier"
        }
      },
      "required": [],
      "examples": []
    },
    {
      "name": "ModifyAssistantRequest",
      "type": "object",
      "description": "",
      "properties": {
        "model": {
          "description": "ID of the model to use. You can use the [List models](https://platform.openai.com/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](https://platform.openai.com/docs/models) for descriptions of them.\n",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/components/schemas/AssistantSupportedModels"
            }
          ]
        },
        "reasoning_effort": {
          "$ref": "#/components/schemas/ReasoningEffort"
        },
        "name": {
          "description": "The name of the assistant. The maximum length is 256 characters.\n",
          "type": "string",
          "nullable": true,
          "maxLength": 256
        },
        "description": {
          "description": "The description of the assistant. The maximum length is 512 characters.\n",
          "type": "string",
          "nullable": true,
          "maxLength": 512
        },
        "instructions": {
          "description": "The system instructions that the assistant uses. The maximum length is 256,000 characters.\n",
          "type": "string",
          "nullable": true,
          "maxLength": 256000
        },
        "tools": {
          "description": "A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.\n",
          "default": [],
          "type": "array",
          "maxItems": 128,
          "items": {
            "$ref": "#/components/schemas/AssistantTool"
          }
        },
        "tool_resources": {
          "type": "object",
          "description": "A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n",
          "properties": {
            "code_interpreter": {
              "type": "object",
              "properties": {
                "file_ids": {
                  "type": "array",
                  "description": "Overrides the list of [file](https://platform.openai.com/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.\n",
                  "default": [],
                  "maxItems": 20,
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "file_search": {
              "type": "object",
              "properties": {
                "vector_store_ids": {
                  "type": "array",
                  "description": "Overrides the [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.\n",
                  "maxItems": 1,
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "nullable": true
        },
        "metadata": {
          "$ref": "#/components/schemas/Metadata"
        },
        "temperature": {
          "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n",
          "type": "number",
          "minimum": 0,
          "maximum": 2,
          "default": 1,
          "example": 1,
          "nullable": true
        },
        "top_p": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "default": 1,
          "example": 1,
          "nullable": true,
          "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.\n"
        },
        "response_format": {
          "$ref": "#/components/schemas/AssistantsApiResponseFormatOption",
          "nullable": true
        }
      },
      "required": [],
      "examples": []
    },
    {
      "name": "ModifyCertificateRequest",
      "type": "object",
      "description": "",
      "properties": {
        "name": {
          "type": "string",
          "description": "The updated name for the certificate"
        }
      },
      "required": [
        "name"
      ],
      "examples": []
    },
    {
      "name": "ModifyMessageRequest",
      "type": "object",
      "description": "",
      "properties": {
        "metadata": {
          "$ref": "#/components/schemas/Metadata"
        }
      },
      "required": [],
      "examples": []
    },
    {
      "name": "ModifyRunRequest",
      "type": "object",
      "description": "",
      "properties": {
        "metadata": {
          "$ref": "#/components/schemas/Metadata"
        }
      },
      "required": [],
      "examples": []
    },
    {
      "name": "ModifyThreadRequest",
      "type": "object",
      "description": "",
      "properties": {
        "tool_resources": {
          "type": "object",
          "description": "A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n",
          "properties": {
            "code_interpreter": {
              "type": "object",
              "properties": {
                "file_ids": {
                  "type": "array",
                  "description": "A list of [file](https://platform.openai.com/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.\n",
                  "default": [],
                  "maxItems": 20,
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "file_search": {
              "type": "object",
              "properties": {
                "vector_store_ids": {
                  "type": "array",
                  "description": "The [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.\n",
                  "maxItems": 1,
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "nullable": true
        },
        "metadata": {
          "$ref": "#/components/schemas/Metadata"
        }
      },
      "required": [],
      "examples": []
    },
    {
      "name": "Move",
      "type": "object",
      "description": "A mouse move action.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "move"
          ],
          "default": "move",
          "description": "Specifies the event type. For a move action, this property is \nalways set to `move`.\n",
          "x-stainless-const": true
        },
        "x": {
          "type": "integer",
          "description": "The x-coordinate to move to.\n"
        },
        "y": {
          "type": "integer",
          "description": "The y-coordinate to move to.\n"
        }
      },
      "required": [
        "type",
        "x",
        "y"
      ],
      "examples": []
    },
    {
      "name": "OpenAIFile",
      "type": "object",
      "description": "The `File` object represents a document that has been uploaded to OpenAI.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The file identifier, which can be referenced in the API endpoints."
        },
        "bytes": {
          "type": "integer",
          "description": "The size of the file, in bytes."
        },
        "created_at": {
          "type": "integer",
          "description": "The Unix timestamp (in seconds) for when the file was created."
        },
        "expires_at": {
          "type": "integer",
          "description": "The Unix timestamp (in seconds) for when the file will expire."
        },
        "filename": {
          "type": "string",
          "description": "The name of the file."
        },
        "object": {
          "type": "string",
          "description": "The object type, which is always `file`.",
          "enum": [
            "file"
          ],
          "x-stainless-const": true
        },
        "purpose": {
          "type": "string",
          "description": "The intended purpose of the file. Supported values are `assistants`, `assistants_output`, `batch`, `batch_output`, `fine-tune`, `fine-tune-results`, `vision`, and `user_data`.",
          "enum": [
            "assistants",
            "assistants_output",
            "batch",
            "batch_output",
            "fine-tune",
            "fine-tune-results",
            "vision",
            "user_data"
          ]
        },
        "status": {
          "type": "string",
          "deprecated": true,
          "description": "Deprecated. The current status of the file, which can be either `uploaded`, `processed`, or `error`.",
          "enum": [
            "uploaded",
            "processed",
            "error"
          ]
        },
        "status_details": {
          "type": "string",
          "deprecated": true,
          "description": "Deprecated. For details on why a fine-tuning training file failed validation, see the `error` field on `fine_tuning.job`."
        }
      },
      "required": [
        "id",
        "object",
        "bytes",
        "created_at",
        "filename",
        "purpose",
        "status"
      ],
      "examples": []
    },
    {
      "name": "OtherChunkingStrategyResponseParam",
      "type": "object",
      "description": "This is returned when the chunking strategy is unknown. Typically, this is because the file was indexed before the `chunking_strategy` concept was introduced in the API.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Always `other`.",
          "enum": [
            "other"
          ],
          "x-stainless-const": true
        }
      },
      "required": [
        "type"
      ],
      "examples": []
    },
    {
      "name": "OutputAudio",
      "type": "object",
      "description": "An audio output from the model.\n",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the output audio. Always `output_audio`.\n",
          "enum": [
            "output_audio"
          ],
          "x-stainless-const": true
        },
        "data": {
          "type": "string",
          "description": "Base64-encoded audio data from the model.\n"
        },
        "transcript": {
          "type": "string",
          "description": "The transcript of the audio data from the model.\n"
        }
      },
      "required": [
        "type",
        "data",
        "transcript"
      ],
      "examples": []
    },
    {
      "name": "OutputContent",
      "type": "object",
      "description": "",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "OutputItem",
      "type": "object",
      "description": "",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "OutputMessage",
      "type": "object",
      "description": "An output message from the model.\n",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID of the output message.\n",
          "x-stainless-go-json": "omitzero"
        },
        "type": {
          "type": "string",
          "description": "The type of the output message. Always `message`.\n",
          "enum": [
            "message"
          ],
          "x-stainless-const": true
        },
        "role": {
          "type": "string",
          "description": "The role of the output message. Always `assistant`.\n",
          "enum": [
            "assistant"
          ],
          "x-stainless-const": true
        },
        "content": {
          "type": "array",
          "description": "The content of the output message.\n",
          "items": {
            "$ref": "#/components/schemas/OutputContent"
          }
        },
        "status": {
          "type": "string",
          "description": "The status of the message input. One of `in_progress`, `completed`, or\n`incomplete`. Populated when input items are returned via API.\n",
          "enum": [
            "in_progress",
            "completed",
            "incomplete"
          ]
        }
      },
      "required": [
        "id",
        "type",
        "role",
        "content",
        "status"
      ],
      "examples": []
    },
    {
      "name": "ParallelToolCalls",
      "type": "boolean",
      "description": "Whether to enable [parallel function calling](https://platform.openai.com/docs/guides/function-calling#configuring-parallel-function-calling) during tool use.",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "PartialImages",
      "type": "integer",
      "description": "The number of partial images to generate. This parameter is used for\nstreaming responses that return partial images. Value must be between 0 and 3.\nWhen set to 0, the response will be a single image sent in one streaming event.\n\nNote that the final image may be sent before the full number of partial images \nare generated if the full image is generated more quickly.\n",
      "properties": {},
      "required": [],
      "examples": [
        1
      ]
    },
    {
      "name": "PredictionContent",
      "type": "object",
      "description": "Static predicted output content, such as the content of a text file that is\nbeing regenerated.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "content"
          ],
          "description": "The type of the predicted content you want to provide. This type is\ncurrently always `content`.\n",
          "x-stainless-const": true
        },
        "content": {
          "description": "The content that should be matched when generating a model response.\nIf generated tokens would match this content, the entire model response\ncan be returned much more quickly.\n",
          "anyOf": [
            {
              "type": "string",
              "title": "Text content",
              "description": "The content used for a Predicted Output. This is often the\ntext of a file you are regenerating with minor changes.\n"
            },
            {
              "type": "array",
              "description": "An array of content parts with a defined type. Supported options differ based on the [model](https://platform.openai.com/docs/models) being used to generate the response. Can contain text inputs.",
              "title": "Array of content parts",
              "items": {
                "$ref": "#/components/schemas/ChatCompletionRequestMessageContentPartText"
              },
              "minItems": 1
            }
          ]
        }
      },
      "required": [
        "type",
        "content"
      ],
      "examples": []
    },
    {
      "name": "Project",
      "type": "object",
      "description": "Represents an individual project.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The identifier, which can be referenced in API endpoints"
        },
        "object": {
          "type": "string",
          "enum": [
            "organization.project"
          ],
          "description": "The object type, which is always `organization.project`",
          "x-stainless-const": true
        },
        "name": {
          "type": "string",
          "description": "The name of the project. This appears in reporting."
        },
        "created_at": {
          "type": "integer",
          "description": "The Unix timestamp (in seconds) of when the project was created."
        },
        "archived_at": {
          "type": "integer",
          "nullable": true,
          "description": "The Unix timestamp (in seconds) of when the project was archived or `null`."
        },
        "status": {
          "type": "string",
          "enum": [
            "active",
            "archived"
          ],
          "description": "`active` or `archived`"
        }
      },
      "required": [
        "id",
        "object",
        "name",
        "created_at",
        "status"
      ],
      "examples": []
    },
    {
      "name": "ProjectApiKey",
      "type": "object",
      "description": "Represents an individual API key in a project.",
      "properties": {
        "object": {
          "type": "string",
          "enum": [
            "organization.project.api_key"
          ],
          "description": "The object type, which is always `organization.project.api_key`",
          "x-stainless-const": true
        },
        "redacted_value": {
          "type": "string",
          "description": "The redacted value of the API key"
        },
        "name": {
          "type": "string",
          "description": "The name of the API key"
        },
        "created_at": {
          "type": "integer",
          "description": "The Unix timestamp (in seconds) of when the API key was created"
        },
        "last_used_at": {
          "type": "integer",
          "description": "The Unix timestamp (in seconds) of when the API key was last used."
        },
        "id": {
          "type": "string",
          "description": "The identifier, which can be referenced in API endpoints"
        },
        "owner": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "user",
                "service_account"
              ],
              "description": "`user` or `service_account`"
            },
            "user": {
              "$ref": "#/components/schemas/ProjectUser"
            },
            "service_account": {
              "$ref": "#/components/schemas/ProjectServiceAccount"
            }
          }
        }
      },
      "required": [
        "object",
        "redacted_value",
        "name",
        "created_at",
        "last_used_at",
        "id",
        "owner"
      ],
      "examples": []
    },
    {
      "name": "ProjectApiKeyDeleteResponse",
      "type": "object",
      "description": "",
      "properties": {
        "object": {
          "type": "string",
          "enum": [
            "organization.project.api_key.deleted"
          ],
          "x-stainless-const": true
        },
        "id": {
          "type": "string"
        },
        "deleted": {
          "type": "boolean"
        }
      },
      "required": [
        "object",
        "id",
        "deleted"
      ],
      "examples": []
    },
    {
      "name": "ProjectApiKeyListResponse",
      "type": "object",
      "description": "",
      "properties": {
        "object": {
          "type": "string",
          "enum": [
            "list"
          ],
          "x-stainless-const": true
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/ProjectApiKey"
          }
        },
        "first_id": {
          "type": "string"
        },
        "last_id": {
          "type": "string"
        },
        "has_more": {
          "type": "boolean"
        }
      },
      "required": [
        "object",
        "data",
        "first_id",
        "last_id",
        "has_more"
      ],
      "examples": []
    },
    {
      "name": "ProjectCreateRequest",
      "type": "object",
      "description": "",
      "properties": {
        "name": {
          "type": "string",
          "description": "The friendly name of the project, this name appears in reports."
        }
      },
      "required": [
        "name"
      ],
      "examples": []
    },
    {
      "name": "ProjectListResponse",
      "type": "object",
      "description": "",
      "properties": {
        "object": {
          "type": "string",
          "enum": [
            "list"
          ],
          "x-stainless-const": true
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/Project"
          }
        },
        "first_id": {
          "type": "string"
        },
        "last_id": {
          "type": "string"
        },
        "has_more": {
          "type": "boolean"
        }
      },
      "required": [
        "object",
        "data",
        "first_id",
        "last_id",
        "has_more"
      ],
      "examples": []
    },
    {
      "name": "ProjectRateLimit",
      "type": "object",
      "description": "Represents a project rate limit config.",
      "properties": {
        "object": {
          "type": "string",
          "enum": [
            "project.rate_limit"
          ],
          "description": "The object type, which is always `project.rate_limit`",
          "x-stainless-const": true
        },
        "id": {
          "type": "string",
          "description": "The identifier, which can be referenced in API endpoints."
        },
        "model": {
          "type": "string",
          "description": "The model this rate limit applies to."
        },
        "max_requests_per_1_minute": {
          "type": "integer",
          "description": "The maximum requests per minute."
        },
        "max_tokens_per_1_minute": {
          "type": "integer",
          "description": "The maximum tokens per minute."
        },
        "max_images_per_1_minute": {
          "type": "integer",
          "description": "The maximum images per minute. Only present for relevant models."
        },
        "max_audio_megabytes_per_1_minute": {
          "type": "integer",
          "description": "The maximum audio megabytes per minute. Only present for relevant models."
        },
        "max_requests_per_1_day": {
          "type": "integer",
          "description": "The maximum requests per day. Only present for relevant models."
        },
        "batch_1_day_max_input_tokens": {
          "type": "integer",
          "description": "The maximum batch input tokens per day. Only present for relevant models."
        }
      },
      "required": [
        "object",
        "id",
        "model",
        "max_requests_per_1_minute",
        "max_tokens_per_1_minute"
      ],
      "examples": []
    },
    {
      "name": "ProjectRateLimitListResponse",
      "type": "object",
      "description": "",
      "properties": {
        "object": {
          "type": "string",
          "enum": [
            "list"
          ],
          "x-stainless-const": true
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/ProjectRateLimit"
          }
        },
        "first_id": {
          "type": "string"
        },
        "last_id": {
          "type": "string"
        },
        "has_more": {
          "type": "boolean"
        }
      },
      "required": [
        "object",
        "data",
        "first_id",
        "last_id",
        "has_more"
      ],
      "examples": []
    },
    {
      "name": "ProjectRateLimitUpdateRequest",
      "type": "object",
      "description": "",
      "properties": {
        "max_requests_per_1_minute": {
          "type": "integer",
          "description": "The maximum requests per minute."
        },
        "max_tokens_per_1_minute": {
          "type": "integer",
          "description": "The maximum tokens per minute."
        },
        "max_images_per_1_minute": {
          "type": "integer",
          "description": "The maximum images per minute. Only relevant for certain models."
        },
        "max_audio_megabytes_per_1_minute": {
          "type": "integer",
          "description": "The maximum audio megabytes per minute. Only relevant for certain models."
        },
        "max_requests_per_1_day": {
          "type": "integer",
          "description": "The maximum requests per day. Only relevant for certain models."
        },
        "batch_1_day_max_input_tokens": {
          "type": "integer",
          "description": "The maximum batch input tokens per day. Only relevant for certain models."
        }
      },
      "required": [],
      "examples": []
    },
    {
      "name": "ProjectServiceAccount",
      "type": "object",
      "description": "Represents an individual service account in a project.",
      "properties": {
        "object": {
          "type": "string",
          "enum": [
            "organization.project.service_account"
          ],
          "description": "The object type, which is always `organization.project.service_account`",
          "x-stainless-const": true
        },
        "id": {
          "type": "string",
          "description": "The identifier, which can be referenced in API endpoints"
        },
        "name": {
          "type": "string",
          "description": "The name of the service account"
        },
        "role": {
          "type": "string",
          "enum": [
            "owner",
            "member"
          ],
          "description": "`owner` or `member`"
        },
        "created_at": {
          "type": "integer",
          "description": "The Unix timestamp (in seconds) of when the service account was created"
        }
      },
      "required": [
        "object",
        "id",
        "name",
        "role",
        "created_at"
      ],
      "examples": []
    },
    {
      "name": "ProjectServiceAccountApiKey",
      "type": "object",
      "description": "",
      "properties": {
        "object": {
          "type": "string",
          "enum": [
            "organization.project.service_account.api_key"
          ],
          "description": "The object type, which is always `organization.project.service_account.api_key`",
          "x-stainless-const": true
        },
        "value": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "created_at": {
          "type": "integer"
        },
        "id": {
          "type": "string"
        }
      },
      "required": [
        "object",
        "value",
        "name",
        "created_at",
        "id"
      ],
      "examples": []
    },
    {
      "name": "ProjectServiceAccountCreateRequest",
      "type": "object",
      "description": "",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the service account being created."
        }
      },
      "required": [
        "name"
      ],
      "examples": []
    },
    {
      "name": "ProjectServiceAccountCreateResponse",
      "type": "object",
      "description": "",
      "properties": {
        "object": {
          "type": "string",
          "enum": [
            "organization.project.service_account"
          ],
          "x-stainless-const": true
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "role": {
          "type": "string",
          "enum": [
            "member"
          ],
          "description": "Service accounts can only have one role of type `member`",
          "x-stainless-const": true
        },
        "created_at": {
          "type": "integer"
        },
        "api_key": {
          "$ref": "#/components/schemas/ProjectServiceAccountApiKey"
        }
      },
      "required": [
        "object",
        "id",
        "name",
        "role",
        "created_at",
        "api_key"
      ],
      "examples": []
    },
    {
      "name": "ProjectServiceAccountDeleteResponse",
      "type": "object",
      "description": "",
      "properties": {
        "object": {
          "type": "string",
          "enum": [
            "organization.project.service_account.deleted"
          ],
          "x-stainless-const": true
        },
        "id": {
          "type": "string"
        },
        "deleted": {
          "type": "boolean"
        }
      },
      "required": [
        "object",
        "id",
        "deleted"
      ],
      "examples": []
    },
    {
      "name": "ProjectServiceAccountListResponse",
      "type": "object",
      "description": "",
      "properties": {
        "object": {
          "type": "string",
          "enum": [
            "list"
          ],
          "x-stainless-const": true
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/ProjectServiceAccount"
          }
        },
        "first_id": {
          "type": "string"
        },
        "last_id": {
          "type": "string"
        },
        "has_more": {
          "type": "boolean"
        }
      },
      "required": [
        "object",
        "data",
        "first_id",
        "last_id",
        "has_more"
      ],
      "examples": []
    },
    {
      "name": "ProjectUpdateRequest",
      "type": "object",
      "description": "",
      "properties": {
        "name": {
          "type": "string",
          "description": "The updated name of the project, this name appears in reports."
        }
      },
      "required": [
        "name"
      ],
      "examples": []
    },
    {
      "name": "ProjectUser",
      "type": "object",
      "description": "Represents an individual user in a project.",
      "properties": {
        "object": {
          "type": "string",
          "enum": [
            "organization.project.user"
          ],
          "description": "The object type, which is always `organization.project.user`",
          "x-stainless-const": true
        },
        "id": {
          "type": "string",
          "description": "The identifier, which can be referenced in API endpoints"
        },
        "name": {
          "type": "string",
          "description": "The name of the user"
        },
        "email": {
          "type": "string",
          "description": "The email address of the user"
        },
        "role": {
          "type": "string",
          "enum": [
            "owner",
            "member"
          ],
          "description": "`owner` or `member`"
        },
        "added_at": {
          "type": "integer",
          "description": "The Unix timestamp (in seconds) of when the project was added."
        }
      },
      "required": [
        "object",
        "id",
        "name",
        "email",
        "role",
        "added_at"
      ],
      "examples": []
    },
    {
      "name": "ProjectUserCreateRequest",
      "type": "object",
      "description": "",
      "properties": {
        "user_id": {
          "type": "string",
          "description": "The ID of the user."
        },
        "role": {
          "type": "string",
          "enum": [
            "owner",
            "member"
          ],
          "description": "`owner` or `member`"
        }
      },
      "required": [
        "user_id",
        "role"
      ],
      "examples": []
    },
    {
      "name": "ProjectUserDeleteResponse",
      "type": "object",
      "description": "",
      "properties": {
        "object": {
          "type": "string",
          "enum": [
            "organization.project.user.deleted"
          ],
          "x-stainless-const": true
        },
        "id": {
          "type": "string"
        },
        "deleted": {
          "type": "boolean"
        }
      },
      "required": [
        "object",
        "id",
        "deleted"
      ],
      "examples": []
    },
    {
      "name": "ProjectUserListResponse",
      "type": "object",
      "description": "",
      "properties": {
        "object": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/ProjectUser"
          }
        },
        "first_id": {
          "type": "string"
        },
        "last_id": {
          "type": "string"
        },
        "has_more": {
          "type": "boolean"
        }
      },
      "required": [
        "object",
        "data",
        "first_id",
        "last_id",
        "has_more"
      ],
      "examples": []
    },
    {
      "name": "ProjectUserUpdateRequest",
      "type": "object",
      "description": "",
      "properties": {
        "role": {
          "type": "string",
          "enum": [
            "owner",
            "member"
          ],
          "description": "`owner` or `member`"
        }
      },
      "required": [
        "role"
      ],
      "examples": []
    },
    {
      "name": "Prompt",
      "type": "object",
      "description": "Reference to a prompt template and its variables. \n[Learn more](https://platform.openai.com/docs/guides/text?api-mode=responses#reusable-prompts).\n",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier of the prompt template to use."
        },
        "version": {
          "type": "string",
          "description": "Optional version of the prompt template.",
          "nullable": true
        },
        "variables": {
          "$ref": "#/components/schemas/ResponsePromptVariables"
        }
      },
      "required": [
        "id"
      ],
      "examples": []
    },
    {
      "name": "RealtimeClientEvent",
      "type": "object",
      "description": "A realtime client event.\n",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "RealtimeClientEventConversationItemCreate",
      "type": "object",
      "description": "Add a new Item to the Conversation's context, including messages, function \ncalls, and function call responses. This event can be used both to populate a \n\"history\" of the conversation and to add new items mid-stream, but has the \ncurrent limitation that it cannot populate assistant audio messages.\n\nIf successful, the server will respond with a `conversation.item.created` \nevent, otherwise an `error` event will be sent.\n",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "Optional client-generated ID used to identify this event."
        },
        "type": {
          "description": "The event type, must be `conversation.item.create`.",
          "x-stainless-const": true,
          "const": "conversation.item.create"
        },
        "previous_item_id": {
          "type": "string",
          "description": "The ID of the preceding item after which the new item will be inserted. \nIf not set, the new item will be appended to the end of the conversation.\nIf set to `root`, the new item will be added to the beginning of the conversation.\nIf set to an existing ID, it allows an item to be inserted mid-conversation. If the\nID cannot be found, an error will be returned and the item will not be added.\n"
        },
        "item": {
          "$ref": "#/components/schemas/RealtimeConversationItem"
        }
      },
      "required": [
        "type",
        "item"
      ],
      "examples": []
    },
    {
      "name": "RealtimeClientEventConversationItemDelete",
      "type": "object",
      "description": "Send this event when you want to remove any item from the conversation \nhistory. The server will respond with a `conversation.item.deleted` event, \nunless the item does not exist in the conversation history, in which case the \nserver will respond with an error.\n",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "Optional client-generated ID used to identify this event."
        },
        "type": {
          "description": "The event type, must be `conversation.item.delete`.",
          "x-stainless-const": true,
          "const": "conversation.item.delete"
        },
        "item_id": {
          "type": "string",
          "description": "The ID of the item to delete."
        }
      },
      "required": [
        "type",
        "item_id"
      ],
      "examples": []
    },
    {
      "name": "RealtimeClientEventConversationItemRetrieve",
      "type": "object",
      "description": "Send this event when you want to retrieve the server's representation of a specific item in the conversation history. This is useful, for example, to inspect user audio after noise cancellation and VAD.\nThe server will respond with a `conversation.item.retrieved` event, \nunless the item does not exist in the conversation history, in which case the \nserver will respond with an error.\n",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "Optional client-generated ID used to identify this event."
        },
        "type": {
          "description": "The event type, must be `conversation.item.retrieve`.",
          "x-stainless-const": true,
          "const": "conversation.item.retrieve"
        },
        "item_id": {
          "type": "string",
          "description": "The ID of the item to retrieve."
        }
      },
      "required": [
        "type",
        "item_id"
      ],
      "examples": []
    },
    {
      "name": "RealtimeClientEventConversationItemTruncate",
      "type": "object",
      "description": "Send this event to truncate a previous assistant message’s audio. The server \nwill produce audio faster than realtime, so this event is useful when the user \ninterrupts to truncate audio that has already been sent to the client but not \nyet played. This will synchronize the server's understanding of the audio with \nthe client's playback.\n\nTruncating audio will delete the server-side text transcript to ensure there \nis not text in the context that hasn't been heard by the user.\n\nIf successful, the server will respond with a `conversation.item.truncated` \nevent. \n",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "Optional client-generated ID used to identify this event."
        },
        "type": {
          "description": "The event type, must be `conversation.item.truncate`.",
          "x-stainless-const": true,
          "const": "conversation.item.truncate"
        },
        "item_id": {
          "type": "string",
          "description": "The ID of the assistant message item to truncate. Only assistant message \nitems can be truncated.\n"
        },
        "content_index": {
          "type": "integer",
          "description": "The index of the content part to truncate. Set this to 0."
        },
        "audio_end_ms": {
          "type": "integer",
          "description": "Inclusive duration up to which audio is truncated, in milliseconds. If \nthe audio_end_ms is greater than the actual audio duration, the server \nwill respond with an error.\n"
        }
      },
      "required": [
        "type",
        "item_id",
        "content_index",
        "audio_end_ms"
      ],
      "examples": []
    },
    {
      "name": "RealtimeClientEventInputAudioBufferAppend",
      "type": "object",
      "description": "Send this event to append audio bytes to the input audio buffer. The audio \nbuffer is temporary storage you can write to and later commit. In Server VAD \nmode, the audio buffer is used to detect speech and the server will decide \nwhen to commit. When Server VAD is disabled, you must commit the audio buffer\nmanually.\n\nThe client may choose how much audio to place in each event up to a maximum \nof 15 MiB, for example streaming smaller chunks from the client may allow the \nVAD to be more responsive. Unlike made other client events, the server will \nnot send a confirmation response to this event.\n",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "Optional client-generated ID used to identify this event."
        },
        "type": {
          "description": "The event type, must be `input_audio_buffer.append`.",
          "x-stainless-const": true,
          "const": "input_audio_buffer.append"
        },
        "audio": {
          "type": "string",
          "description": "Base64-encoded audio bytes. This must be in the format specified by the \n`input_audio_format` field in the session configuration.\n"
        }
      },
      "required": [
        "type",
        "audio"
      ],
      "examples": []
    },
    {
      "name": "RealtimeClientEventInputAudioBufferClear",
      "type": "object",
      "description": "Send this event to clear the audio bytes in the buffer. The server will \nrespond with an `input_audio_buffer.cleared` event.\n",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "Optional client-generated ID used to identify this event."
        },
        "type": {
          "description": "The event type, must be `input_audio_buffer.clear`.",
          "x-stainless-const": true,
          "const": "input_audio_buffer.clear"
        }
      },
      "required": [
        "type"
      ],
      "examples": []
    },
    {
      "name": "RealtimeClientEventInputAudioBufferCommit",
      "type": "object",
      "description": "Send this event to commit the user input audio buffer, which will create a \nnew user message item in the conversation. This event will produce an error \nif the input audio buffer is empty. When in Server VAD mode, the client does \nnot need to send this event, the server will commit the audio buffer \nautomatically.\n\nCommitting the input audio buffer will trigger input audio transcription \n(if enabled in session configuration), but it will not create a response \nfrom the model. The server will respond with an `input_audio_buffer.committed` \nevent.\n",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "Optional client-generated ID used to identify this event."
        },
        "type": {
          "description": "The event type, must be `input_audio_buffer.commit`.",
          "x-stainless-const": true,
          "const": "input_audio_buffer.commit"
        }
      },
      "required": [
        "type"
      ],
      "examples": []
    },
    {
      "name": "RealtimeClientEventOutputAudioBufferClear",
      "type": "object",
      "description": "**WebRTC Only:** Emit to cut off the current audio response. This will trigger the server to\nstop generating audio and emit a `output_audio_buffer.cleared` event. This \nevent should be preceded by a `response.cancel` client event to stop the \ngeneration of the current response.\n[Learn more](https://platform.openai.com/docs/guides/realtime-conversations#client-and-server-events-for-audio-in-webrtc).\n",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "The unique ID of the client event used for error handling."
        },
        "type": {
          "description": "The event type, must be `output_audio_buffer.clear`.",
          "x-stainless-const": true,
          "const": "output_audio_buffer.clear"
        }
      },
      "required": [
        "type"
      ],
      "examples": []
    },
    {
      "name": "RealtimeClientEventResponseCancel",
      "type": "object",
      "description": "Send this event to cancel an in-progress response. The server will respond \nwith a `response.done` event with a status of `response.status=cancelled`. If \nthere is no response to cancel, the server will respond with an error.\n",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "Optional client-generated ID used to identify this event."
        },
        "type": {
          "description": "The event type, must be `response.cancel`.",
          "x-stainless-const": true,
          "const": "response.cancel"
        },
        "response_id": {
          "type": "string",
          "description": "A specific response ID to cancel - if not provided, will cancel an \nin-progress response in the default conversation.\n"
        }
      },
      "required": [
        "type"
      ],
      "examples": []
    },
    {
      "name": "RealtimeClientEventResponseCreate",
      "type": "object",
      "description": "This event instructs the server to create a Response, which means triggering \nmodel inference. When in Server VAD mode, the server will create Responses \nautomatically.\n\nA Response will include at least one Item, and may have two, in which case \nthe second will be a function call. These Items will be appended to the \nconversation history.\n\nThe server will respond with a `response.created` event, events for Items \nand content created, and finally a `response.done` event to indicate the \nResponse is complete.\n\nThe `response.create` event includes inference configuration like \n`instructions`, and `temperature`. These fields will override the Session's \nconfiguration for this Response only.\n",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "Optional client-generated ID used to identify this event."
        },
        "type": {
          "description": "The event type, must be `response.create`.",
          "x-stainless-const": true,
          "const": "response.create"
        },
        "response": {
          "$ref": "#/components/schemas/RealtimeResponseCreateParams"
        }
      },
      "required": [
        "type"
      ],
      "examples": []
    },
    {
      "name": "RealtimeClientEventSessionUpdate",
      "type": "object",
      "description": "Send this event to update the session’s default configuration.\nThe client may send this event at any time to update any field,\nexcept for `voice`. However, note that once a session has been\ninitialized with a particular `model`, it can’t be changed to\nanother model using `session.update`.\n\nWhen the server receives a `session.update`, it will respond\nwith a `session.updated` event showing the full, effective configuration.\nOnly the fields that are present are updated. To clear a field like\n`instructions`, pass an empty string.\n",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "Optional client-generated ID used to identify this event."
        },
        "type": {
          "description": "The event type, must be `session.update`.",
          "x-stainless-const": true,
          "const": "session.update"
        },
        "session": {
          "$ref": "#/components/schemas/RealtimeSessionCreateRequest"
        }
      },
      "required": [
        "type",
        "session"
      ],
      "examples": []
    },
    {
      "name": "RealtimeClientEventTranscriptionSessionUpdate",
      "type": "object",
      "description": "Send this event to update a transcription session.\n",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "Optional client-generated ID used to identify this event."
        },
        "type": {
          "description": "The event type, must be `transcription_session.update`.",
          "x-stainless-const": true,
          "const": "transcription_session.update"
        },
        "session": {
          "$ref": "#/components/schemas/RealtimeTranscriptionSessionCreateRequest"
        }
      },
      "required": [
        "type",
        "session"
      ],
      "examples": []
    },
    {
      "name": "RealtimeConversationItem",
      "type": "object",
      "description": "The item to add to the conversation.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID of the item, this can be generated by the client to help \nmanage server-side context, but is not required because the server will \ngenerate one if not provided.\n"
        },
        "type": {
          "type": "string",
          "enum": [
            "message",
            "function_call",
            "function_call_output"
          ],
          "description": "The type of the item (`message`, `function_call`, `function_call_output`).\n"
        },
        "object": {
          "type": "string",
          "enum": [
            "realtime.item"
          ],
          "description": "Identifier for the API object being returned - always `realtime.item`.\n",
          "x-stainless-const": true
        },
        "status": {
          "type": "string",
          "enum": [
            "completed",
            "incomplete",
            "in_progress"
          ],
          "description": "The status of the item (`completed`, `incomplete`, `in_progress`). These have no effect \non the conversation, but are accepted for consistency with the \n`conversation.item.created` event.\n"
        },
        "role": {
          "type": "string",
          "enum": [
            "user",
            "assistant",
            "system"
          ],
          "description": "The role of the message sender (`user`, `assistant`, `system`), only \napplicable for `message` items.\n"
        },
        "content": {
          "type": "array",
          "description": "The content of the message, applicable for `message` items. \n- Message items of role `system` support only `input_text` content\n- Message items of role `user` support `input_text` and `input_audio` \n  content\n- Message items of role `assistant` support `text` content.\n",
          "items": {
            "$ref": "#/components/schemas/RealtimeConversationItemContent"
          }
        },
        "call_id": {
          "type": "string",
          "description": "The ID of the function call (for `function_call` and \n`function_call_output` items). If passed on a `function_call_output` \nitem, the server will check that a `function_call` item with the same \nID exists in the conversation history.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the function being called (for `function_call` items).\n"
        },
        "arguments": {
          "type": "string",
          "description": "The arguments of the function call (for `function_call` items).\n"
        },
        "output": {
          "type": "string",
          "description": "The output of the function call (for `function_call_output` items).\n"
        }
      },
      "required": [],
      "examples": []
    },
    {
      "name": "RealtimeConversationItemWithReference",
      "type": "object",
      "description": "The item to add to the conversation.",
      "properties": {
        "id": {
          "type": "string",
          "description": "For an item of type (`message` | `function_call` | `function_call_output`)\nthis field allows the client to assign the unique ID of the item. It is\nnot required because the server will generate one if not provided.\n\nFor an item of type `item_reference`, this field is required and is a\nreference to any item that has previously existed in the conversation.\n"
        },
        "type": {
          "type": "string",
          "enum": [
            "message",
            "function_call",
            "function_call_output",
            "item_reference"
          ],
          "description": "The type of the item (`message`, `function_call`, `function_call_output`, `item_reference`).\n"
        },
        "object": {
          "type": "string",
          "enum": [
            "realtime.item"
          ],
          "description": "Identifier for the API object being returned - always `realtime.item`.\n",
          "x-stainless-const": true
        },
        "status": {
          "type": "string",
          "enum": [
            "completed",
            "incomplete",
            "in_progress"
          ],
          "description": "The status of the item (`completed`, `incomplete`, `in_progress`). These have no effect \non the conversation, but are accepted for consistency with the \n`conversation.item.created` event.\n"
        },
        "role": {
          "type": "string",
          "enum": [
            "user",
            "assistant",
            "system"
          ],
          "description": "The role of the message sender (`user`, `assistant`, `system`), only \napplicable for `message` items.\n"
        },
        "content": {
          "type": "array",
          "description": "The content of the message, applicable for `message` items. \n- Message items of role `system` support only `input_text` content\n- Message items of role `user` support `input_text` and `input_audio` \n  content\n- Message items of role `assistant` support `text` content.\n",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "input_text",
                  "input_audio",
                  "item_reference",
                  "text"
                ],
                "description": "The content type (`input_text`, `input_audio`, `item_reference`, `text`).\n"
              },
              "text": {
                "type": "string",
                "description": "The text content, used for `input_text` and `text` content types.\n"
              },
              "id": {
                "type": "string",
                "description": "ID of a previous conversation item to reference (for `item_reference`\ncontent types in `response.create` events). These can reference both\nclient and server created items.\n"
              },
              "audio": {
                "type": "string",
                "description": "Base64-encoded audio bytes, used for `input_audio` content type.\n"
              },
              "transcript": {
                "type": "string",
                "description": "The transcript of the audio, used for `input_audio` content type.\n"
              }
            }
          }
        },
        "call_id": {
          "type": "string",
          "description": "The ID of the function call (for `function_call` and \n`function_call_output` items). If passed on a `function_call_output` \nitem, the server will check that a `function_call` item with the same \nID exists in the conversation history.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the function being called (for `function_call` items).\n"
        },
        "arguments": {
          "type": "string",
          "description": "The arguments of the function call (for `function_call` items).\n"
        },
        "output": {
          "type": "string",
          "description": "The output of the function call (for `function_call_output` items).\n"
        }
      },
      "required": [],
      "examples": []
    },
    {
      "name": "RealtimeResponse",
      "type": "object",
      "description": "The response resource.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID of the response."
        },
        "object": {
          "description": "The object type, must be `realtime.response`.",
          "x-stainless-const": true,
          "const": "realtime.response"
        },
        "status": {
          "type": "string",
          "enum": [
            "completed",
            "cancelled",
            "failed",
            "incomplete",
            "in_progress"
          ],
          "description": "The final status of the response (`completed`, `cancelled`, `failed`, or \n`incomplete`, `in_progress`).\n"
        },
        "status_details": {
          "type": "object",
          "description": "Additional details about the status.",
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "completed",
                "cancelled",
                "incomplete",
                "failed"
              ],
              "description": "The type of error that caused the response to fail, corresponding \nwith the `status` field (`completed`, `cancelled`, `incomplete`, \n`failed`).\n"
            },
            "reason": {
              "type": "string",
              "enum": [
                "turn_detected",
                "client_cancelled",
                "max_output_tokens",
                "content_filter"
              ],
              "description": "The reason the Response did not complete. For a `cancelled` Response, \none of `turn_detected` (the server VAD detected a new start of speech) \nor `client_cancelled` (the client sent a cancel event). For an \n`incomplete` Response, one of `max_output_tokens` or `content_filter` \n(the server-side safety filter activated and cut off the response).\n"
            },
            "error": {
              "type": "object",
              "description": "A description of the error that caused the response to fail, \npopulated when the `status` is `failed`.\n",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The type of error."
                },
                "code": {
                  "type": "string",
                  "description": "Error code, if any."
                }
              }
            }
          }
        },
        "output": {
          "type": "array",
          "description": "The list of output items generated by the response.",
          "items": {
            "$ref": "#/components/schemas/RealtimeConversationItem"
          }
        },
        "metadata": {
          "$ref": "#/components/schemas/Metadata"
        },
        "usage": {
          "type": "object",
          "description": "Usage statistics for the Response, this will correspond to billing. A \nRealtime API session will maintain a conversation context and append new \nItems to the Conversation, thus output from previous turns (text and \naudio tokens) will become the input for later turns.\n",
          "properties": {
            "total_tokens": {
              "type": "integer",
              "description": "The total number of tokens in the Response including input and output \ntext and audio tokens.\n"
            },
            "input_tokens": {
              "type": "integer",
              "description": "The number of input tokens used in the Response, including text and \naudio tokens.\n"
            },
            "output_tokens": {
              "type": "integer",
              "description": "The number of output tokens sent in the Response, including text and \naudio tokens.\n"
            },
            "input_token_details": {
              "type": "object",
              "description": "Details about the input tokens used in the Response.",
              "properties": {
                "cached_tokens": {
                  "type": "integer",
                  "description": "The number of cached tokens used in the Response."
                },
                "text_tokens": {
                  "type": "integer",
                  "description": "The number of text tokens used in the Response."
                },
                "audio_tokens": {
                  "type": "integer",
                  "description": "The number of audio tokens used in the Response."
                }
              }
            },
            "output_token_details": {
              "type": "object",
              "description": "Details about the output tokens used in the Response.",
              "properties": {
                "text_tokens": {
                  "type": "integer",
                  "description": "The number of text tokens used in the Response."
                },
                "audio_tokens": {
                  "type": "integer",
                  "description": "The number of audio tokens used in the Response."
                }
              }
            }
          }
        },
        "conversation_id": {
          "description": "Which conversation the response is added to, determined by the `conversation`\nfield in the `response.create` event. If `auto`, the response will be added to\nthe default conversation and the value of `conversation_id` will be an id like\n`conv_1234`. If `none`, the response will not be added to any conversation and\nthe value of `conversation_id` will be `null`. If responses are being triggered\nby server VAD, the response will be added to the default conversation, thus\nthe `conversation_id` will be an id like `conv_1234`.\n",
          "type": "string"
        },
        "voice": {
          "$ref": "#/components/schemas/VoiceIdsShared",
          "description": "The voice the model used to respond.\nCurrent voice options are `alloy`, `ash`, `ballad`, `coral`, `echo`, `sage`,\n`shimmer`, and `verse`.\n"
        },
        "modalities": {
          "type": "array",
          "description": "The set of modalities the model used to respond. If there are multiple modalities,\nthe model will pick one, for example if `modalities` is `[\"text\", \"audio\"]`, the model\ncould be responding in either text or audio.\n",
          "items": {
            "type": "string",
            "enum": [
              "text",
              "audio"
            ]
          }
        },
        "output_audio_format": {
          "type": "string",
          "enum": [
            "pcm16",
            "g711_ulaw",
            "g711_alaw"
          ],
          "description": "The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\n"
        },
        "temperature": {
          "type": "number",
          "description": "Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.\n"
        },
        "max_output_tokens": {
          "description": "Maximum number of output tokens for a single assistant response,\ninclusive of tool calls, that was used in this response.\n",
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "string",
              "enum": [
                "inf"
              ],
              "x-stainless-const": true
            }
          ]
        }
      },
      "required": [],
      "examples": []
    },
    {
      "name": "RealtimeResponseCreateParams",
      "type": "object",
      "description": "Create a new Realtime response with these parameters",
      "properties": {
        "modalities": {
          "type": "array",
          "description": "The set of modalities the model can respond with. To disable audio,\nset this to [\"text\"].\n",
          "items": {
            "type": "string",
            "enum": [
              "text",
              "audio"
            ]
          }
        },
        "instructions": {
          "type": "string",
          "description": "The default system instructions (i.e. system message) prepended to model \ncalls. This field allows the client to guide the model on desired \nresponses. The model can be instructed on response content and format, \n(e.g. \"be extremely succinct\", \"act friendly\", \"here are examples of good \nresponses\") and on audio behavior (e.g. \"talk quickly\", \"inject emotion \ninto your voice\", \"laugh frequently\"). The instructions are not guaranteed \nto be followed by the model, but they provide guidance to the model on the \ndesired behavior.\n\nNote that the server sets default instructions which will be used if this \nfield is not set and are visible in the `session.created` event at the \nstart of the session.\n"
        },
        "voice": {
          "$ref": "#/components/schemas/VoiceIdsShared",
          "description": "The voice the model uses to respond. Voice cannot be changed during the \nsession once the model has responded with audio at least once. Current \nvoice options are `alloy`, `ash`, `ballad`, `coral`, `echo`, `sage`,\n`shimmer`, and `verse`.\n"
        },
        "output_audio_format": {
          "type": "string",
          "enum": [
            "pcm16",
            "g711_ulaw",
            "g711_alaw"
          ],
          "description": "The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\n"
        },
        "tools": {
          "type": "array",
          "description": "Tools (functions) available to the model.",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "function"
                ],
                "description": "The type of the tool, i.e. `function`.",
                "x-stainless-const": true
              },
              "name": {
                "type": "string",
                "description": "The name of the function."
              },
              "description": {
                "type": "string",
                "description": "The description of the function, including guidance on when and how \nto call it, and guidance about what to tell the user when calling \n(if anything).\n"
              },
              "parameters": {
                "type": "object",
                "description": "Parameters of the function in JSON Schema."
              }
            }
          }
        },
        "tool_choice": {
          "type": "string",
          "description": "How the model chooses tools. Options are `auto`, `none`, `required`, or \nspecify a function, like `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}`.\n"
        },
        "temperature": {
          "type": "number",
          "description": "Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.\n"
        },
        "max_response_output_tokens": {
          "description": "Maximum number of output tokens for a single assistant response,\ninclusive of tool calls. Provide an integer between 1 and 4096 to\nlimit output tokens, or `inf` for the maximum available tokens for a\ngiven model. Defaults to `inf`.\n",
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "string",
              "enum": [
                "inf"
              ],
              "x-stainless-const": true
            }
          ]
        },
        "conversation": {
          "description": "Controls which conversation the response is added to. Currently supports\n`auto` and `none`, with `auto` as the default value. The `auto` value\nmeans that the contents of the response will be added to the default\nconversation. Set this to `none` to create an out-of-band response which \nwill not add items to default conversation.\n",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "string",
              "default": "auto",
              "enum": [
                "auto",
                "none"
              ]
            }
          ]
        },
        "metadata": {
          "$ref": "#/components/schemas/Metadata"
        },
        "input": {
          "type": "array",
          "description": "Input items to include in the prompt for the model. Using this field\ncreates a new context for this Response instead of using the default\nconversation. An empty array `[]` will clear the context for this Response.\nNote that this can include references to items from the default conversation.\n",
          "items": {
            "$ref": "#/components/schemas/RealtimeConversationItemWithReference"
          }
        }
      },
      "required": [],
      "examples": []
    },
    {
      "name": "RealtimeServerEvent",
      "type": "object",
      "description": "A realtime server event.\n",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "RealtimeServerEventConversationCreated",
      "type": "object",
      "description": "Returned when a conversation is created. Emitted right after session creation.\n",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "The unique ID of the server event."
        },
        "type": {
          "description": "The event type, must be `conversation.created`.",
          "x-stainless-const": true,
          "const": "conversation.created"
        },
        "conversation": {
          "type": "object",
          "description": "The conversation resource.",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique ID of the conversation."
            },
            "object": {
              "description": "The object type, must be `realtime.conversation`.",
              "const": "realtime.conversation"
            }
          }
        }
      },
      "required": [
        "event_id",
        "type",
        "conversation"
      ],
      "examples": []
    },
    {
      "name": "RealtimeServerEventConversationItemCreated",
      "type": "object",
      "description": "Returned when a conversation item is created. There are several scenarios that produce this event:\n  - The server is generating a Response, which if successful will produce \n    either one or two Items, which will be of type `message` \n    (role `assistant`) or type `function_call`.\n  - The input audio buffer has been committed, either by the client or the \n    server (in `server_vad` mode). The server will take the content of the \n    input audio buffer and add it to a new user message Item.\n  - The client has sent a `conversation.item.create` event to add a new Item \n    to the Conversation.\n",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "The unique ID of the server event."
        },
        "type": {
          "description": "The event type, must be `conversation.item.created`.",
          "x-stainless-const": true,
          "const": "conversation.item.created"
        },
        "previous_item_id": {
          "type": "string",
          "nullable": true,
          "description": "The ID of the preceding item in the Conversation context, allows the \nclient to understand the order of the conversation. Can be `null` if the \nitem has no predecessor.\n"
        },
        "item": {
          "$ref": "#/components/schemas/RealtimeConversationItem"
        }
      },
      "required": [
        "event_id",
        "type",
        "item"
      ],
      "examples": []
    },
    {
      "name": "RealtimeServerEventConversationItemDeleted",
      "type": "object",
      "description": "Returned when an item in the conversation is deleted by the client with a \n`conversation.item.delete` event. This event is used to synchronize the \nserver's understanding of the conversation history with the client's view.\n",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "The unique ID of the server event."
        },
        "type": {
          "description": "The event type, must be `conversation.item.deleted`.",
          "x-stainless-const": true,
          "const": "conversation.item.deleted"
        },
        "item_id": {
          "type": "string",
          "description": "The ID of the item that was deleted."
        }
      },
      "required": [
        "event_id",
        "type",
        "item_id"
      ],
      "examples": []
    },
    {
      "name": "RealtimeServerEventConversationItemInputAudioTranscriptionCompleted",
      "type": "object",
      "description": "This event is the output of audio transcription for user audio written to the\nuser audio buffer. Transcription begins when the input audio buffer is\ncommitted by the client or server (in `server_vad` mode). Transcription runs\nasynchronously with Response creation, so this event may come before or after\nthe Response events.\n\nRealtime API models accept audio natively, and thus input transcription is a\nseparate process run on a separate ASR (Automatic Speech Recognition) model.\nThe transcript may diverge somewhat from the model's interpretation, and\nshould be treated as a rough guide.\n",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "The unique ID of the server event."
        },
        "type": {
          "type": "string",
          "enum": [
            "conversation.item.input_audio_transcription.completed"
          ],
          "description": "The event type, must be\n`conversation.item.input_audio_transcription.completed`.\n",
          "x-stainless-const": true
        },
        "item_id": {
          "type": "string",
          "description": "The ID of the user message item containing the audio."
        },
        "content_index": {
          "type": "integer",
          "description": "The index of the content part containing the audio."
        },
        "transcript": {
          "type": "string",
          "description": "The transcribed text."
        },
        "logprobs": {
          "type": "array",
          "description": "The log probabilities of the transcription.",
          "nullable": true,
          "items": {
            "$ref": "#/components/schemas/LogProbProperties"
          }
        },
        "usage": {
          "type": "object",
          "description": "Usage statistics for the transcription.",
          "anyOf": [
            {
              "$ref": "#/components/schemas/TranscriptTextUsageTokens",
              "title": "Token Usage"
            },
            {
              "$ref": "#/components/schemas/TranscriptTextUsageDuration",
              "title": "Duration Usage"
            }
          ]
        }
      },
      "required": [
        "event_id",
        "type",
        "item_id",
        "content_index",
        "transcript",
        "usage"
      ],
      "examples": []
    },
    {
      "name": "RealtimeServerEventConversationItemInputAudioTranscriptionDelta",
      "type": "object",
      "description": "Returned when the text value of an input audio transcription content part is updated.\n",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "The unique ID of the server event."
        },
        "type": {
          "description": "The event type, must be `conversation.item.input_audio_transcription.delta`.",
          "x-stainless-const": true,
          "const": "conversation.item.input_audio_transcription.delta"
        },
        "item_id": {
          "type": "string",
          "description": "The ID of the item."
        },
        "content_index": {
          "type": "integer",
          "description": "The index of the content part in the item's content array."
        },
        "delta": {
          "type": "string",
          "description": "The text delta."
        },
        "logprobs": {
          "type": "array",
          "description": "The log probabilities of the transcription.",
          "nullable": true,
          "items": {
            "$ref": "#/components/schemas/LogProbProperties"
          }
        }
      },
      "required": [
        "event_id",
        "type",
        "item_id"
      ],
      "examples": []
    },
    {
      "name": "RealtimeServerEventConversationItemInputAudioTranscriptionFailed",
      "type": "object",
      "description": "Returned when input audio transcription is configured, and a transcription \nrequest for a user message failed. These events are separate from other \n`error` events so that the client can identify the related Item.\n",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "The unique ID of the server event."
        },
        "type": {
          "type": "string",
          "enum": [
            "conversation.item.input_audio_transcription.failed"
          ],
          "description": "The event type, must be\n`conversation.item.input_audio_transcription.failed`.\n",
          "x-stainless-const": true
        },
        "item_id": {
          "type": "string",
          "description": "The ID of the user message item."
        },
        "content_index": {
          "type": "integer",
          "description": "The index of the content part containing the audio."
        },
        "error": {
          "type": "object",
          "description": "Details of the transcription error.",
          "properties": {
            "type": {
              "type": "string",
              "description": "The type of error."
            },
            "code": {
              "type": "string",
              "description": "Error code, if any."
            },
            "message": {
              "type": "string",
              "description": "A human-readable error message."
            },
            "param": {
              "type": "string",
              "description": "Parameter related to the error, if any."
            }
          }
        }
      },
      "required": [
        "event_id",
        "type",
        "item_id",
        "content_index",
        "error"
      ],
      "examples": []
    },
    {
      "name": "RealtimeServerEventConversationItemRetrieved",
      "type": "object",
      "description": "Returned when a conversation item is retrieved with `conversation.item.retrieve`.\n",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "The unique ID of the server event."
        },
        "type": {
          "description": "The event type, must be `conversation.item.retrieved`.",
          "x-stainless-const": true,
          "const": "conversation.item.retrieved"
        },
        "item": {
          "$ref": "#/components/schemas/RealtimeConversationItem"
        }
      },
      "required": [
        "event_id",
        "type",
        "item"
      ],
      "examples": []
    },
    {
      "name": "RealtimeServerEventConversationItemTruncated",
      "type": "object",
      "description": "Returned when an earlier assistant audio message item is truncated by the \nclient with a `conversation.item.truncate` event. This event is used to \nsynchronize the server's understanding of the audio with the client's playback.\n\nThis action will truncate the audio and remove the server-side text transcript \nto ensure there is no text in the context that hasn't been heard by the user.\n",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "The unique ID of the server event."
        },
        "type": {
          "description": "The event type, must be `conversation.item.truncated`.",
          "x-stainless-const": true,
          "const": "conversation.item.truncated"
        },
        "item_id": {
          "type": "string",
          "description": "The ID of the assistant message item that was truncated."
        },
        "content_index": {
          "type": "integer",
          "description": "The index of the content part that was truncated."
        },
        "audio_end_ms": {
          "type": "integer",
          "description": "The duration up to which the audio was truncated, in milliseconds.\n"
        }
      },
      "required": [
        "event_id",
        "type",
        "item_id",
        "content_index",
        "audio_end_ms"
      ],
      "examples": []
    },
    {
      "name": "RealtimeServerEventError",
      "type": "object",
      "description": "Returned when an error occurs, which could be a client problem or a server \nproblem. Most errors are recoverable and the session will stay open, we \nrecommend to implementors to monitor and log error messages by default.\n",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "The unique ID of the server event."
        },
        "type": {
          "description": "The event type, must be `error`.",
          "x-stainless-const": true,
          "const": "error"
        },
        "error": {
          "type": "object",
          "description": "Details of the error.",
          "required": [
            "type",
            "message"
          ],
          "properties": {
            "type": {
              "type": "string",
              "description": "The type of error (e.g., \"invalid_request_error\", \"server_error\").\n"
            },
            "code": {
              "type": "string",
              "description": "Error code, if any.",
              "nullable": true
            },
            "message": {
              "type": "string",
              "description": "A human-readable error message."
            },
            "param": {
              "type": "string",
              "description": "Parameter related to the error, if any.",
              "nullable": true
            },
            "event_id": {
              "type": "string",
              "description": "The event_id of the client event that caused the error, if applicable.\n",
              "nullable": true
            }
          }
        }
      },
      "required": [
        "event_id",
        "type",
        "error"
      ],
      "examples": []
    },
    {
      "name": "RealtimeServerEventInputAudioBufferCleared",
      "type": "object",
      "description": "Returned when the input audio buffer is cleared by the client with a \n`input_audio_buffer.clear` event.\n",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "The unique ID of the server event."
        },
        "type": {
          "description": "The event type, must be `input_audio_buffer.cleared`.",
          "x-stainless-const": true,
          "const": "input_audio_buffer.cleared"
        }
      },
      "required": [
        "event_id",
        "type"
      ],
      "examples": []
    },
    {
      "name": "RealtimeServerEventInputAudioBufferCommitted",
      "type": "object",
      "description": "Returned when an input audio buffer is committed, either by the client or \nautomatically in server VAD mode. The `item_id` property is the ID of the user\nmessage item that will be created, thus a `conversation.item.created` event \nwill also be sent to the client.\n",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "The unique ID of the server event."
        },
        "type": {
          "description": "The event type, must be `input_audio_buffer.committed`.",
          "x-stainless-const": true,
          "const": "input_audio_buffer.committed"
        },
        "previous_item_id": {
          "type": "string",
          "nullable": true,
          "description": "The ID of the preceding item after which the new item will be inserted.\nCan be `null` if the item has no predecessor.\n"
        },
        "item_id": {
          "type": "string",
          "description": "The ID of the user message item that will be created."
        }
      },
      "required": [
        "event_id",
        "type",
        "item_id"
      ],
      "examples": []
    },
    {
      "name": "RealtimeServerEventInputAudioBufferSpeechStarted",
      "type": "object",
      "description": "Sent by the server when in `server_vad` mode to indicate that speech has been \ndetected in the audio buffer. This can happen any time audio is added to the \nbuffer (unless speech is already detected). The client may want to use this \nevent to interrupt audio playback or provide visual feedback to the user. \n\nThe client should expect to receive a `input_audio_buffer.speech_stopped` event \nwhen speech stops. The `item_id` property is the ID of the user message item \nthat will be created when speech stops and will also be included in the \n`input_audio_buffer.speech_stopped` event (unless the client manually commits \nthe audio buffer during VAD activation).\n",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "The unique ID of the server event."
        },
        "type": {
          "description": "The event type, must be `input_audio_buffer.speech_started`.",
          "x-stainless-const": true,
          "const": "input_audio_buffer.speech_started"
        },
        "audio_start_ms": {
          "type": "integer",
          "description": "Milliseconds from the start of all audio written to the buffer during the \nsession when speech was first detected. This will correspond to the \nbeginning of audio sent to the model, and thus includes the \n`prefix_padding_ms` configured in the Session.\n"
        },
        "item_id": {
          "type": "string",
          "description": "The ID of the user message item that will be created when speech stops.\n"
        }
      },
      "required": [
        "event_id",
        "type",
        "audio_start_ms",
        "item_id"
      ],
      "examples": []
    },
    {
      "name": "RealtimeServerEventInputAudioBufferSpeechStopped",
      "type": "object",
      "description": "Returned in `server_vad` mode when the server detects the end of speech in \nthe audio buffer. The server will also send an `conversation.item.created` \nevent with the user message item that is created from the audio buffer.\n",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "The unique ID of the server event."
        },
        "type": {
          "description": "The event type, must be `input_audio_buffer.speech_stopped`.",
          "x-stainless-const": true,
          "const": "input_audio_buffer.speech_stopped"
        },
        "audio_end_ms": {
          "type": "integer",
          "description": "Milliseconds since the session started when speech stopped. This will \ncorrespond to the end of audio sent to the model, and thus includes the \n`min_silence_duration_ms` configured in the Session.\n"
        },
        "item_id": {
          "type": "string",
          "description": "The ID of the user message item that will be created."
        }
      },
      "required": [
        "event_id",
        "type",
        "audio_end_ms",
        "item_id"
      ],
      "examples": []
    },
    {
      "name": "RealtimeServerEventOutputAudioBufferCleared",
      "type": "object",
      "description": "**WebRTC Only:** Emitted when the output audio buffer is cleared. This happens either in VAD\nmode when the user has interrupted (`input_audio_buffer.speech_started`),\nor when the client has emitted the `output_audio_buffer.clear` event to manually\ncut off the current audio response.\n[Learn more](https://platform.openai.com/docs/guides/realtime-conversations#client-and-server-events-for-audio-in-webrtc).\n",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "The unique ID of the server event."
        },
        "type": {
          "description": "The event type, must be `output_audio_buffer.cleared`.",
          "x-stainless-const": true,
          "const": "output_audio_buffer.cleared"
        },
        "response_id": {
          "type": "string",
          "description": "The unique ID of the response that produced the audio."
        }
      },
      "required": [
        "event_id",
        "type",
        "response_id"
      ],
      "examples": []
    },
    {
      "name": "RealtimeServerEventOutputAudioBufferStarted",
      "type": "object",
      "description": "**WebRTC Only:** Emitted when the server begins streaming audio to the client. This event is\nemitted after an audio content part has been added (`response.content_part.added`)\nto the response.\n[Learn more](https://platform.openai.com/docs/guides/realtime-conversations#client-and-server-events-for-audio-in-webrtc).\n",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "The unique ID of the server event."
        },
        "type": {
          "description": "The event type, must be `output_audio_buffer.started`.",
          "x-stainless-const": true,
          "const": "output_audio_buffer.started"
        },
        "response_id": {
          "type": "string",
          "description": "The unique ID of the response that produced the audio."
        }
      },
      "required": [
        "event_id",
        "type",
        "response_id"
      ],
      "examples": []
    },
    {
      "name": "RealtimeServerEventOutputAudioBufferStopped",
      "type": "object",
      "description": "**WebRTC Only:** Emitted when the output audio buffer has been completely drained on the server,\nand no more audio is forthcoming. This event is emitted after the full response\ndata has been sent to the client (`response.done`).\n[Learn more](https://platform.openai.com/docs/guides/realtime-conversations#client-and-server-events-for-audio-in-webrtc).\n",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "The unique ID of the server event."
        },
        "type": {
          "description": "The event type, must be `output_audio_buffer.stopped`.",
          "x-stainless-const": true,
          "const": "output_audio_buffer.stopped"
        },
        "response_id": {
          "type": "string",
          "description": "The unique ID of the response that produced the audio."
        }
      },
      "required": [
        "event_id",
        "type",
        "response_id"
      ],
      "examples": []
    },
    {
      "name": "RealtimeServerEventRateLimitsUpdated",
      "type": "object",
      "description": "Emitted at the beginning of a Response to indicate the updated rate limits. \nWhen a Response is created some tokens will be \"reserved\" for the output \ntokens, the rate limits shown here reflect that reservation, which is then \nadjusted accordingly once the Response is completed.\n",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "The unique ID of the server event."
        },
        "type": {
          "description": "The event type, must be `rate_limits.updated`.",
          "x-stainless-const": true,
          "const": "rate_limits.updated"
        },
        "rate_limits": {
          "type": "array",
          "description": "List of rate limit information.",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "enum": [
                  "requests",
                  "tokens"
                ],
                "description": "The name of the rate limit (`requests`, `tokens`).\n"
              },
              "limit": {
                "type": "integer",
                "description": "The maximum allowed value for the rate limit."
              },
              "remaining": {
                "type": "integer",
                "description": "The remaining value before the limit is reached."
              },
              "reset_seconds": {
                "type": "number",
                "description": "Seconds until the rate limit resets."
              }
            }
          }
        }
      },
      "required": [
        "event_id",
        "type",
        "rate_limits"
      ],
      "examples": []
    },
    {
      "name": "RealtimeServerEventResponseAudioDelta",
      "type": "object",
      "description": "Returned when the model-generated audio is updated.",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "The unique ID of the server event."
        },
        "type": {
          "description": "The event type, must be `response.audio.delta`.",
          "x-stainless-const": true,
          "const": "response.audio.delta"
        },
        "response_id": {
          "type": "string",
          "description": "The ID of the response."
        },
        "item_id": {
          "type": "string",
          "description": "The ID of the item."
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item in the response."
        },
        "content_index": {
          "type": "integer",
          "description": "The index of the content part in the item's content array."
        },
        "delta": {
          "type": "string",
          "description": "Base64-encoded audio data delta."
        }
      },
      "required": [
        "event_id",
        "type",
        "response_id",
        "item_id",
        "output_index",
        "content_index",
        "delta"
      ],
      "examples": []
    },
    {
      "name": "RealtimeServerEventResponseAudioDone",
      "type": "object",
      "description": "Returned when the model-generated audio is done. Also emitted when a Response\nis interrupted, incomplete, or cancelled.\n",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "The unique ID of the server event."
        },
        "type": {
          "description": "The event type, must be `response.audio.done`.",
          "x-stainless-const": true,
          "const": "response.audio.done"
        },
        "response_id": {
          "type": "string",
          "description": "The ID of the response."
        },
        "item_id": {
          "type": "string",
          "description": "The ID of the item."
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item in the response."
        },
        "content_index": {
          "type": "integer",
          "description": "The index of the content part in the item's content array."
        }
      },
      "required": [
        "event_id",
        "type",
        "response_id",
        "item_id",
        "output_index",
        "content_index"
      ],
      "examples": []
    },
    {
      "name": "RealtimeServerEventResponseAudioTranscriptDelta",
      "type": "object",
      "description": "Returned when the model-generated transcription of audio output is updated.\n",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "The unique ID of the server event."
        },
        "type": {
          "description": "The event type, must be `response.audio_transcript.delta`.",
          "x-stainless-const": true,
          "const": "response.audio_transcript.delta"
        },
        "response_id": {
          "type": "string",
          "description": "The ID of the response."
        },
        "item_id": {
          "type": "string",
          "description": "The ID of the item."
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item in the response."
        },
        "content_index": {
          "type": "integer",
          "description": "The index of the content part in the item's content array."
        },
        "delta": {
          "type": "string",
          "description": "The transcript delta."
        }
      },
      "required": [
        "event_id",
        "type",
        "response_id",
        "item_id",
        "output_index",
        "content_index",
        "delta"
      ],
      "examples": []
    },
    {
      "name": "RealtimeServerEventResponseAudioTranscriptDone",
      "type": "object",
      "description": "Returned when the model-generated transcription of audio output is done\nstreaming. Also emitted when a Response is interrupted, incomplete, or\ncancelled.\n",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "The unique ID of the server event."
        },
        "type": {
          "description": "The event type, must be `response.audio_transcript.done`.",
          "x-stainless-const": true,
          "const": "response.audio_transcript.done"
        },
        "response_id": {
          "type": "string",
          "description": "The ID of the response."
        },
        "item_id": {
          "type": "string",
          "description": "The ID of the item."
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item in the response."
        },
        "content_index": {
          "type": "integer",
          "description": "The index of the content part in the item's content array."
        },
        "transcript": {
          "type": "string",
          "description": "The final transcript of the audio."
        }
      },
      "required": [
        "event_id",
        "type",
        "response_id",
        "item_id",
        "output_index",
        "content_index",
        "transcript"
      ],
      "examples": []
    },
    {
      "name": "RealtimeServerEventResponseContentPartAdded",
      "type": "object",
      "description": "Returned when a new content part is added to an assistant message item during\nresponse generation.\n",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "The unique ID of the server event."
        },
        "type": {
          "description": "The event type, must be `response.content_part.added`.",
          "x-stainless-const": true,
          "const": "response.content_part.added"
        },
        "response_id": {
          "type": "string",
          "description": "The ID of the response."
        },
        "item_id": {
          "type": "string",
          "description": "The ID of the item to which the content part was added."
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item in the response."
        },
        "content_index": {
          "type": "integer",
          "description": "The index of the content part in the item's content array."
        },
        "part": {
          "type": "object",
          "description": "The content part that was added.",
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "text",
                "audio"
              ],
              "description": "The content type (\"text\", \"audio\")."
            },
            "text": {
              "type": "string",
              "description": "The text content (if type is \"text\")."
            },
            "audio": {
              "type": "string",
              "description": "Base64-encoded audio data (if type is \"audio\")."
            },
            "transcript": {
              "type": "string",
              "description": "The transcript of the audio (if type is \"audio\")."
            }
          }
        }
      },
      "required": [
        "event_id",
        "type",
        "response_id",
        "item_id",
        "output_index",
        "content_index",
        "part"
      ],
      "examples": []
    },
    {
      "name": "RealtimeServerEventResponseContentPartDone",
      "type": "object",
      "description": "Returned when a content part is done streaming in an assistant message item.\nAlso emitted when a Response is interrupted, incomplete, or cancelled.\n",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "The unique ID of the server event."
        },
        "type": {
          "description": "The event type, must be `response.content_part.done`.",
          "x-stainless-const": true,
          "const": "response.content_part.done"
        },
        "response_id": {
          "type": "string",
          "description": "The ID of the response."
        },
        "item_id": {
          "type": "string",
          "description": "The ID of the item."
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item in the response."
        },
        "content_index": {
          "type": "integer",
          "description": "The index of the content part in the item's content array."
        },
        "part": {
          "type": "object",
          "description": "The content part that is done.",
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "text",
                "audio"
              ],
              "description": "The content type (\"text\", \"audio\")."
            },
            "text": {
              "type": "string",
              "description": "The text content (if type is \"text\")."
            },
            "audio": {
              "type": "string",
              "description": "Base64-encoded audio data (if type is \"audio\")."
            },
            "transcript": {
              "type": "string",
              "description": "The transcript of the audio (if type is \"audio\")."
            }
          }
        }
      },
      "required": [
        "event_id",
        "type",
        "response_id",
        "item_id",
        "output_index",
        "content_index",
        "part"
      ],
      "examples": []
    },
    {
      "name": "RealtimeServerEventResponseCreated",
      "type": "object",
      "description": "Returned when a new Response is created. The first event of response creation,\nwhere the response is in an initial state of `in_progress`.\n",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "The unique ID of the server event."
        },
        "type": {
          "description": "The event type, must be `response.created`.",
          "x-stainless-const": true,
          "const": "response.created"
        },
        "response": {
          "$ref": "#/components/schemas/RealtimeResponse"
        }
      },
      "required": [
        "event_id",
        "type",
        "response"
      ],
      "examples": []
    },
    {
      "name": "RealtimeServerEventResponseDone",
      "type": "object",
      "description": "Returned when a Response is done streaming. Always emitted, no matter the \nfinal state. The Response object included in the `response.done` event will \ninclude all output Items in the Response but will omit the raw audio data.\n",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "The unique ID of the server event."
        },
        "type": {
          "description": "The event type, must be `response.done`.",
          "x-stainless-const": true,
          "const": "response.done"
        },
        "response": {
          "$ref": "#/components/schemas/RealtimeResponse"
        }
      },
      "required": [
        "event_id",
        "type",
        "response"
      ],
      "examples": []
    },
    {
      "name": "RealtimeServerEventResponseFunctionCallArgumentsDelta",
      "type": "object",
      "description": "Returned when the model-generated function call arguments are updated.\n",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "The unique ID of the server event."
        },
        "type": {
          "description": "The event type, must be `response.function_call_arguments.delta`.\n",
          "x-stainless-const": true,
          "const": "response.function_call_arguments.delta"
        },
        "response_id": {
          "type": "string",
          "description": "The ID of the response."
        },
        "item_id": {
          "type": "string",
          "description": "The ID of the function call item."
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item in the response."
        },
        "call_id": {
          "type": "string",
          "description": "The ID of the function call."
        },
        "delta": {
          "type": "string",
          "description": "The arguments delta as a JSON string."
        }
      },
      "required": [
        "event_id",
        "type",
        "response_id",
        "item_id",
        "output_index",
        "call_id",
        "delta"
      ],
      "examples": []
    },
    {
      "name": "RealtimeServerEventResponseFunctionCallArgumentsDone",
      "type": "object",
      "description": "Returned when the model-generated function call arguments are done streaming.\nAlso emitted when a Response is interrupted, incomplete, or cancelled.\n",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "The unique ID of the server event."
        },
        "type": {
          "description": "The event type, must be `response.function_call_arguments.done`.\n",
          "x-stainless-const": true,
          "const": "response.function_call_arguments.done"
        },
        "response_id": {
          "type": "string",
          "description": "The ID of the response."
        },
        "item_id": {
          "type": "string",
          "description": "The ID of the function call item."
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item in the response."
        },
        "call_id": {
          "type": "string",
          "description": "The ID of the function call."
        },
        "arguments": {
          "type": "string",
          "description": "The final arguments as a JSON string."
        }
      },
      "required": [
        "event_id",
        "type",
        "response_id",
        "item_id",
        "output_index",
        "call_id",
        "arguments"
      ],
      "examples": []
    },
    {
      "name": "RealtimeServerEventResponseOutputItemAdded",
      "type": "object",
      "description": "Returned when a new Item is created during Response generation.",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "The unique ID of the server event."
        },
        "type": {
          "description": "The event type, must be `response.output_item.added`.",
          "x-stainless-const": true,
          "const": "response.output_item.added"
        },
        "response_id": {
          "type": "string",
          "description": "The ID of the Response to which the item belongs."
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item in the Response."
        },
        "item": {
          "$ref": "#/components/schemas/RealtimeConversationItem"
        }
      },
      "required": [
        "event_id",
        "type",
        "response_id",
        "output_index",
        "item"
      ],
      "examples": []
    },
    {
      "name": "RealtimeServerEventResponseOutputItemDone",
      "type": "object",
      "description": "Returned when an Item is done streaming. Also emitted when a Response is \ninterrupted, incomplete, or cancelled.\n",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "The unique ID of the server event."
        },
        "type": {
          "description": "The event type, must be `response.output_item.done`.",
          "x-stainless-const": true,
          "const": "response.output_item.done"
        },
        "response_id": {
          "type": "string",
          "description": "The ID of the Response to which the item belongs."
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item in the Response."
        },
        "item": {
          "$ref": "#/components/schemas/RealtimeConversationItem"
        }
      },
      "required": [
        "event_id",
        "type",
        "response_id",
        "output_index",
        "item"
      ],
      "examples": []
    },
    {
      "name": "RealtimeServerEventResponseTextDelta",
      "type": "object",
      "description": "Returned when the text value of a \"text\" content part is updated.",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "The unique ID of the server event."
        },
        "type": {
          "description": "The event type, must be `response.text.delta`.",
          "x-stainless-const": true,
          "const": "response.text.delta"
        },
        "response_id": {
          "type": "string",
          "description": "The ID of the response."
        },
        "item_id": {
          "type": "string",
          "description": "The ID of the item."
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item in the response."
        },
        "content_index": {
          "type": "integer",
          "description": "The index of the content part in the item's content array."
        },
        "delta": {
          "type": "string",
          "description": "The text delta."
        }
      },
      "required": [
        "event_id",
        "type",
        "response_id",
        "item_id",
        "output_index",
        "content_index",
        "delta"
      ],
      "examples": []
    },
    {
      "name": "RealtimeServerEventResponseTextDone",
      "type": "object",
      "description": "Returned when the text value of a \"text\" content part is done streaming. Also\nemitted when a Response is interrupted, incomplete, or cancelled.\n",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "The unique ID of the server event."
        },
        "type": {
          "description": "The event type, must be `response.text.done`.",
          "x-stainless-const": true,
          "const": "response.text.done"
        },
        "response_id": {
          "type": "string",
          "description": "The ID of the response."
        },
        "item_id": {
          "type": "string",
          "description": "The ID of the item."
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item in the response."
        },
        "content_index": {
          "type": "integer",
          "description": "The index of the content part in the item's content array."
        },
        "text": {
          "type": "string",
          "description": "The final text content."
        }
      },
      "required": [
        "event_id",
        "type",
        "response_id",
        "item_id",
        "output_index",
        "content_index",
        "text"
      ],
      "examples": []
    },
    {
      "name": "RealtimeServerEventSessionCreated",
      "type": "object",
      "description": "Returned when a Session is created. Emitted automatically when a new \nconnection is established as the first server event. This event will contain \nthe default Session configuration.\n",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "The unique ID of the server event."
        },
        "type": {
          "description": "The event type, must be `session.created`.",
          "x-stainless-const": true,
          "const": "session.created"
        },
        "session": {
          "$ref": "#/components/schemas/RealtimeSession"
        }
      },
      "required": [
        "event_id",
        "type",
        "session"
      ],
      "examples": []
    },
    {
      "name": "RealtimeServerEventSessionUpdated",
      "type": "object",
      "description": "Returned when a session is updated with a `session.update` event, unless \nthere is an error.\n",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "The unique ID of the server event."
        },
        "type": {
          "description": "The event type, must be `session.updated`.",
          "x-stainless-const": true,
          "const": "session.updated"
        },
        "session": {
          "$ref": "#/components/schemas/RealtimeSession"
        }
      },
      "required": [
        "event_id",
        "type",
        "session"
      ],
      "examples": []
    },
    {
      "name": "RealtimeServerEventTranscriptionSessionUpdated",
      "type": "object",
      "description": "Returned when a transcription session is updated with a `transcription_session.update` event, unless \nthere is an error.\n",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "The unique ID of the server event."
        },
        "type": {
          "description": "The event type, must be `transcription_session.updated`.",
          "x-stainless-const": true,
          "const": "transcription_session.updated"
        },
        "session": {
          "$ref": "#/components/schemas/RealtimeTranscriptionSessionCreateResponse"
        }
      },
      "required": [
        "event_id",
        "type",
        "session"
      ],
      "examples": []
    },
    {
      "name": "RealtimeSession",
      "type": "object",
      "description": "Realtime session object configuration.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the session that looks like `sess_1234567890abcdef`.\n"
        },
        "modalities": {
          "description": "The set of modalities the model can respond with. To disable audio,\nset this to [\"text\"].\n",
          "items": {
            "type": "string",
            "enum": [
              "text",
              "audio"
            ]
          }
        },
        "model": {
          "type": "string",
          "description": "The Realtime model used for this session.\n",
          "enum": [
            "gpt-4o-realtime-preview",
            "gpt-4o-realtime-preview-2024-10-01",
            "gpt-4o-realtime-preview-2024-12-17",
            "gpt-4o-realtime-preview-2025-06-03",
            "gpt-4o-mini-realtime-preview",
            "gpt-4o-mini-realtime-preview-2024-12-17"
          ]
        },
        "instructions": {
          "type": "string",
          "description": "The default system instructions (i.e. system message) prepended to model\ncalls. This field allows the client to guide the model on desired\nresponses. The model can be instructed on response content and format,\n(e.g. \"be extremely succinct\", \"act friendly\", \"here are examples of good\nresponses\") and on audio behavior (e.g. \"talk quickly\", \"inject emotion\ninto your voice\", \"laugh frequently\"). The instructions are not\nguaranteed to be followed by the model, but they provide guidance to the\nmodel on the desired behavior.\n\n\nNote that the server sets default instructions which will be used if this\nfield is not set and are visible in the `session.created` event at the\nstart of the session.\n"
        },
        "voice": {
          "$ref": "#/components/schemas/VoiceIdsShared",
          "description": "The voice the model uses to respond. Voice cannot be changed during the\nsession once the model has responded with audio at least once. Current\nvoice options are `alloy`, `ash`, `ballad`, `coral`, `echo`, `sage`,\n`shimmer`, and `verse`.\n"
        },
        "input_audio_format": {
          "type": "string",
          "default": "pcm16",
          "enum": [
            "pcm16",
            "g711_ulaw",
            "g711_alaw"
          ],
          "description": "The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\nFor `pcm16`, input audio must be 16-bit PCM at a 24kHz sample rate,\nsingle channel (mono), and little-endian byte order.\n"
        },
        "output_audio_format": {
          "type": "string",
          "default": "pcm16",
          "enum": [
            "pcm16",
            "g711_ulaw",
            "g711_alaw"
          ],
          "description": "The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\nFor `pcm16`, output audio is sampled at a rate of 24kHz.\n"
        },
        "input_audio_transcription": {
          "type": "object",
          "description": "Configuration for input audio transcription, defaults to off and can be set to `null` to turn off once on. Input audio transcription is not native to the model, since the model consumes audio directly. Transcription runs asynchronously through [the /audio/transcriptions endpoint](https://platform.openai.com/docs/api-reference/audio/createTranscription) and should be treated as guidance of input audio content rather than precisely what the model heard. The client can optionally set the language and prompt for transcription, these offer additional guidance to the transcription service.\n",
          "properties": {
            "model": {
              "type": "string",
              "description": "The model to use for transcription, current options are `gpt-4o-transcribe`, `gpt-4o-mini-transcribe`, and `whisper-1`.\n"
            },
            "language": {
              "type": "string",
              "description": "The language of the input audio. Supplying the input language in\n[ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g. `en`) format\nwill improve accuracy and latency.\n"
            },
            "prompt": {
              "type": "string",
              "description": "An optional text to guide the model's style or continue a previous audio\nsegment.\nFor `whisper-1`, the [prompt is a list of keywords](https://platform.openai.com/docs/guides/speech-to-text#prompting).\nFor `gpt-4o-transcribe` models, the prompt is a free text string, for example \"expect words related to technology\".\n"
            }
          }
        },
        "turn_detection": {
          "type": "object",
          "description": "Configuration for turn detection, ether Server VAD or Semantic VAD. This can be set to `null` to turn off, in which case the client must manually trigger model response.\nServer VAD means that the model will detect the start and end of speech based on audio volume and respond at the end of user speech.\nSemantic VAD is more advanced and uses a turn detection model (in conjunction with VAD) to semantically estimate whether the user has finished speaking, then dynamically sets a timeout based on this probability. For example, if user audio trails off with \"uhhm\", the model will score a low probability of turn end and wait longer for the user to continue speaking. This can be useful for more natural conversations, but may have a higher latency.\n",
          "properties": {
            "type": {
              "type": "string",
              "default": "server_vad",
              "enum": [
                "server_vad",
                "semantic_vad"
              ],
              "description": "Type of turn detection.\n"
            },
            "eagerness": {
              "type": "string",
              "default": "auto",
              "enum": [
                "low",
                "medium",
                "high",
                "auto"
              ],
              "description": "Used only for `semantic_vad` mode. The eagerness of the model to respond. `low` will wait longer for the user to continue speaking, `high` will respond more quickly. `auto` is the default and is equivalent to `medium`.\n"
            },
            "threshold": {
              "type": "number",
              "description": "Used only for `server_vad` mode. Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A\nhigher threshold will require louder audio to activate the model, and\nthus might perform better in noisy environments.\n"
            },
            "prefix_padding_ms": {
              "type": "integer",
              "description": "Used only for `server_vad` mode. Amount of audio to include before the VAD detected speech (in\nmilliseconds). Defaults to 300ms.\n"
            },
            "silence_duration_ms": {
              "type": "integer",
              "description": "Used only for `server_vad` mode. Duration of silence to detect speech stop (in milliseconds). Defaults\nto 500ms. With shorter values the model will respond more quickly,\nbut may jump in on short pauses from the user.\n"
            },
            "create_response": {
              "type": "boolean",
              "default": true,
              "description": "Whether or not to automatically generate a response when a VAD stop event occurs.\n"
            },
            "interrupt_response": {
              "type": "boolean",
              "default": true,
              "description": "Whether or not to automatically interrupt any ongoing response with output to the default\nconversation (i.e. `conversation` of `auto`) when a VAD start event occurs.\n"
            }
          }
        },
        "input_audio_noise_reduction": {
          "type": "object",
          "description": "Configuration for input audio noise reduction. This can be set to `null` to turn off.\nNoise reduction filters audio added to the input audio buffer before it is sent to VAD and the model.\nFiltering the audio can improve VAD and turn detection accuracy (reducing false positives) and model performance by improving perception of the input audio.\n",
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "near_field",
                "far_field"
              ],
              "description": "Type of noise reduction. `near_field` is for close-talking microphones such as headphones, `far_field` is for far-field microphones such as laptop or conference room microphones.\n"
            }
          }
        },
        "speed": {
          "type": "number",
          "default": 1,
          "maximum": 1.5,
          "minimum": 0.25,
          "description": "The speed of the model's spoken response. 1.0 is the default speed. 0.25 is\nthe minimum speed. 1.5 is the maximum speed. This value can only be changed\nin between model turns, not while a response is in progress.\n"
        },
        "tracing": {
          "title": "Tracing Configuration",
          "description": "Configuration options for tracing. Set to null to disable tracing. Once\ntracing is enabled for a session, the configuration cannot be modified.\n\n`auto` will create a trace for the session with default values for the\nworkflow name, group id, and metadata.\n",
          "anyOf": [
            {
              "type": "string",
              "default": "auto",
              "description": "Default tracing mode for the session.\n",
              "enum": [
                "auto"
              ],
              "x-stainless-const": true
            },
            {
              "type": "object",
              "title": "Tracing Configuration",
              "description": "Granular configuration for tracing.\n",
              "properties": {
                "workflow_name": {
                  "type": "string",
                  "description": "The name of the workflow to attach to this trace. This is used to\nname the trace in the traces dashboard.\n"
                },
                "group_id": {
                  "type": "string",
                  "description": "The group id to attach to this trace to enable filtering and\ngrouping in the traces dashboard.\n"
                },
                "metadata": {
                  "type": "object",
                  "description": "The arbitrary metadata to attach to this trace to enable\nfiltering in the traces dashboard.\n"
                }
              }
            }
          ]
        },
        "tools": {
          "type": "array",
          "description": "Tools (functions) available to the model.",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "function"
                ],
                "description": "The type of the tool, i.e. `function`.",
                "x-stainless-const": true
              },
              "name": {
                "type": "string",
                "description": "The name of the function."
              },
              "description": {
                "type": "string",
                "description": "The description of the function, including guidance on when and how\nto call it, and guidance about what to tell the user when calling\n(if anything).\n"
              },
              "parameters": {
                "type": "object",
                "description": "Parameters of the function in JSON Schema."
              }
            }
          }
        },
        "tool_choice": {
          "type": "string",
          "default": "auto",
          "description": "How the model chooses tools. Options are `auto`, `none`, `required`, or\nspecify a function.\n"
        },
        "temperature": {
          "type": "number",
          "default": 0.8,
          "description": "Sampling temperature for the model, limited to [0.6, 1.2]. For audio models a temperature of 0.8 is highly recommended for best performance.\n"
        },
        "max_response_output_tokens": {
          "description": "Maximum number of output tokens for a single assistant response,\ninclusive of tool calls. Provide an integer between 1 and 4096 to\nlimit output tokens, or `inf` for the maximum available tokens for a\ngiven model. Defaults to `inf`.\n",
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "string",
              "enum": [
                "inf"
              ],
              "x-stainless-const": true
            }
          ]
        }
      },
      "required": [],
      "examples": []
    },
    {
      "name": "RealtimeSessionCreateRequest",
      "type": "object",
      "description": "Realtime session object configuration.",
      "properties": {
        "modalities": {
          "description": "The set of modalities the model can respond with. To disable audio,\nset this to [\"text\"].\n",
          "items": {
            "type": "string",
            "enum": [
              "text",
              "audio"
            ]
          }
        },
        "model": {
          "type": "string",
          "description": "The Realtime model used for this session.\n",
          "enum": [
            "gpt-4o-realtime-preview",
            "gpt-4o-realtime-preview-2024-10-01",
            "gpt-4o-realtime-preview-2024-12-17",
            "gpt-4o-realtime-preview-2025-06-03",
            "gpt-4o-mini-realtime-preview",
            "gpt-4o-mini-realtime-preview-2024-12-17"
          ]
        },
        "instructions": {
          "type": "string",
          "description": "The default system instructions (i.e. system message) prepended to model calls. This field allows the client to guide the model on desired responses. The model can be instructed on response content and format, (e.g. \"be extremely succinct\", \"act friendly\", \"here are examples of good responses\") and on audio behavior (e.g. \"talk quickly\", \"inject emotion into your voice\", \"laugh frequently\"). The instructions are not guaranteed to be followed by the model, but they provide guidance to the model on the desired behavior.\n\nNote that the server sets default instructions which will be used if this field is not set and are visible in the `session.created` event at the start of the session.\n"
        },
        "voice": {
          "$ref": "#/components/schemas/VoiceIdsShared",
          "description": "The voice the model uses to respond. Voice cannot be changed during the\nsession once the model has responded with audio at least once. Current\nvoice options are `alloy`, `ash`, `ballad`, `coral`, `echo`, `sage`,\n`shimmer`, and `verse`.\n"
        },
        "input_audio_format": {
          "type": "string",
          "default": "pcm16",
          "enum": [
            "pcm16",
            "g711_ulaw",
            "g711_alaw"
          ],
          "description": "The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\nFor `pcm16`, input audio must be 16-bit PCM at a 24kHz sample rate,\nsingle channel (mono), and little-endian byte order.\n"
        },
        "output_audio_format": {
          "type": "string",
          "default": "pcm16",
          "enum": [
            "pcm16",
            "g711_ulaw",
            "g711_alaw"
          ],
          "description": "The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\nFor `pcm16`, output audio is sampled at a rate of 24kHz.\n"
        },
        "input_audio_transcription": {
          "type": "object",
          "description": "Configuration for input audio transcription, defaults to off and can be set to `null` to turn off once on. Input audio transcription is not native to the model, since the model consumes audio directly. Transcription runs asynchronously through [the /audio/transcriptions endpoint](https://platform.openai.com/docs/api-reference/audio/createTranscription) and should be treated as guidance of input audio content rather than precisely what the model heard. The client can optionally set the language and prompt for transcription, these offer additional guidance to the transcription service.\n",
          "properties": {
            "model": {
              "type": "string",
              "description": "The model to use for transcription, current options are `gpt-4o-transcribe`, `gpt-4o-mini-transcribe`, and `whisper-1`.\n"
            },
            "language": {
              "type": "string",
              "description": "The language of the input audio. Supplying the input language in\n[ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g. `en`) format\nwill improve accuracy and latency.\n"
            },
            "prompt": {
              "type": "string",
              "description": "An optional text to guide the model's style or continue a previous audio\nsegment.\nFor `whisper-1`, the [prompt is a list of keywords](https://platform.openai.com/docs/guides/speech-to-text#prompting).\nFor `gpt-4o-transcribe` models, the prompt is a free text string, for example \"expect words related to technology\".\n"
            }
          }
        },
        "turn_detection": {
          "type": "object",
          "description": "Configuration for turn detection, ether Server VAD or Semantic VAD. This can be set to `null` to turn off, in which case the client must manually trigger model response.\nServer VAD means that the model will detect the start and end of speech based on audio volume and respond at the end of user speech.\nSemantic VAD is more advanced and uses a turn detection model (in conjunction with VAD) to semantically estimate whether the user has finished speaking, then dynamically sets a timeout based on this probability. For example, if user audio trails off with \"uhhm\", the model will score a low probability of turn end and wait longer for the user to continue speaking. This can be useful for more natural conversations, but may have a higher latency.\n",
          "properties": {
            "type": {
              "type": "string",
              "default": "server_vad",
              "enum": [
                "server_vad",
                "semantic_vad"
              ],
              "description": "Type of turn detection.\n"
            },
            "eagerness": {
              "type": "string",
              "default": "auto",
              "enum": [
                "low",
                "medium",
                "high",
                "auto"
              ],
              "description": "Used only for `semantic_vad` mode. The eagerness of the model to respond. `low` will wait longer for the user to continue speaking, `high` will respond more quickly. `auto` is the default and is equivalent to `medium`.\n"
            },
            "threshold": {
              "type": "number",
              "description": "Used only for `server_vad` mode. Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A\nhigher threshold will require louder audio to activate the model, and\nthus might perform better in noisy environments.\n"
            },
            "prefix_padding_ms": {
              "type": "integer",
              "description": "Used only for `server_vad` mode. Amount of audio to include before the VAD detected speech (in\nmilliseconds). Defaults to 300ms.\n"
            },
            "silence_duration_ms": {
              "type": "integer",
              "description": "Used only for `server_vad` mode. Duration of silence to detect speech stop (in milliseconds). Defaults\nto 500ms. With shorter values the model will respond more quickly,\nbut may jump in on short pauses from the user.\n"
            },
            "create_response": {
              "type": "boolean",
              "default": true,
              "description": "Whether or not to automatically generate a response when a VAD stop event occurs.\n"
            },
            "interrupt_response": {
              "type": "boolean",
              "default": true,
              "description": "Whether or not to automatically interrupt any ongoing response with output to the default\nconversation (i.e. `conversation` of `auto`) when a VAD start event occurs.\n"
            }
          }
        },
        "input_audio_noise_reduction": {
          "type": "object",
          "description": "Configuration for input audio noise reduction. This can be set to `null` to turn off.\nNoise reduction filters audio added to the input audio buffer before it is sent to VAD and the model.\nFiltering the audio can improve VAD and turn detection accuracy (reducing false positives) and model performance by improving perception of the input audio.\n",
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "near_field",
                "far_field"
              ],
              "description": "Type of noise reduction. `near_field` is for close-talking microphones such as headphones, `far_field` is for far-field microphones such as laptop or conference room microphones.\n"
            }
          }
        },
        "speed": {
          "type": "number",
          "default": 1,
          "maximum": 1.5,
          "minimum": 0.25,
          "description": "The speed of the model's spoken response. 1.0 is the default speed. 0.25 is\nthe minimum speed. 1.5 is the maximum speed. This value can only be changed\nin between model turns, not while a response is in progress.\n"
        },
        "tracing": {
          "title": "Tracing Configuration",
          "description": "Configuration options for tracing. Set to null to disable tracing. Once\ntracing is enabled for a session, the configuration cannot be modified.\n\n`auto` will create a trace for the session with default values for the\nworkflow name, group id, and metadata.\n",
          "anyOf": [
            {
              "type": "string",
              "default": "auto",
              "description": "Default tracing mode for the session.\n",
              "enum": [
                "auto"
              ],
              "x-stainless-const": true
            },
            {
              "type": "object",
              "title": "Tracing Configuration",
              "description": "Granular configuration for tracing.\n",
              "properties": {
                "workflow_name": {
                  "type": "string",
                  "description": "The name of the workflow to attach to this trace. This is used to\nname the trace in the traces dashboard.\n"
                },
                "group_id": {
                  "type": "string",
                  "description": "The group id to attach to this trace to enable filtering and\ngrouping in the traces dashboard.\n"
                },
                "metadata": {
                  "type": "object",
                  "description": "The arbitrary metadata to attach to this trace to enable\nfiltering in the traces dashboard.\n"
                }
              }
            }
          ]
        },
        "tools": {
          "type": "array",
          "description": "Tools (functions) available to the model.",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "function"
                ],
                "description": "The type of the tool, i.e. `function`.",
                "x-stainless-const": true
              },
              "name": {
                "type": "string",
                "description": "The name of the function."
              },
              "description": {
                "type": "string",
                "description": "The description of the function, including guidance on when and how\nto call it, and guidance about what to tell the user when calling\n(if anything).\n"
              },
              "parameters": {
                "type": "object",
                "description": "Parameters of the function in JSON Schema."
              }
            }
          }
        },
        "tool_choice": {
          "type": "string",
          "default": "auto",
          "description": "How the model chooses tools. Options are `auto`, `none`, `required`, or\nspecify a function.\n"
        },
        "temperature": {
          "type": "number",
          "default": 0.8,
          "description": "Sampling temperature for the model, limited to [0.6, 1.2]. For audio models a temperature of 0.8 is highly recommended for best performance.\n"
        },
        "max_response_output_tokens": {
          "description": "Maximum number of output tokens for a single assistant response,\ninclusive of tool calls. Provide an integer between 1 and 4096 to\nlimit output tokens, or `inf` for the maximum available tokens for a\ngiven model. Defaults to `inf`.\n",
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "string",
              "enum": [
                "inf"
              ],
              "x-stainless-const": true
            }
          ]
        },
        "client_secret": {
          "type": "object",
          "description": "Configuration options for the generated client secret.\n",
          "properties": {
            "expires_after": {
              "type": "object",
              "description": "Configuration for the ephemeral token expiration.\n",
              "properties": {
                "anchor": {
                  "type": "string",
                  "enum": [
                    "created_at"
                  ],
                  "description": "The anchor point for the ephemeral token expiration. Only `created_at` is currently supported.\n"
                },
                "seconds": {
                  "default": 600,
                  "type": "integer",
                  "description": "The number of seconds from the anchor point to the expiration. Select a value between `10` and `7200`.\n"
                }
              },
              "required": [
                "anchor"
              ]
            }
          }
        }
      },
      "required": [],
      "examples": []
    },
    {
      "name": "RealtimeSessionCreateResponse",
      "type": "object",
      "description": "A new Realtime session configuration, with an ephemeral key. Default TTL\nfor keys is one minute.\n",
      "properties": {
        "client_secret": {
          "type": "object",
          "description": "Ephemeral key returned by the API.",
          "properties": {
            "value": {
              "type": "string",
              "description": "Ephemeral key usable in client environments to authenticate connections\nto the Realtime API. Use this in client-side environments rather than\na standard API token, which should only be used server-side.\n"
            },
            "expires_at": {
              "type": "integer",
              "description": "Timestamp for when the token expires. Currently, all tokens expire\nafter one minute.\n"
            }
          },
          "required": [
            "value",
            "expires_at"
          ]
        },
        "modalities": {
          "description": "The set of modalities the model can respond with. To disable audio,\nset this to [\"text\"].\n",
          "items": {
            "type": "string",
            "enum": [
              "text",
              "audio"
            ]
          }
        },
        "instructions": {
          "type": "string",
          "description": "The default system instructions (i.e. system message) prepended to model\ncalls. This field allows the client to guide the model on desired\nresponses. The model can be instructed on response content and format,\n(e.g. \"be extremely succinct\", \"act friendly\", \"here are examples of good\nresponses\") and on audio behavior (e.g. \"talk quickly\", \"inject emotion\ninto your voice\", \"laugh frequently\"). The instructions are not guaranteed\nto be followed by the model, but they provide guidance to the model on the\ndesired behavior.\n\nNote that the server sets default instructions which will be used if this\nfield is not set and are visible in the `session.created` event at the\nstart of the session.\n"
        },
        "voice": {
          "$ref": "#/components/schemas/VoiceIdsShared",
          "description": "The voice the model uses to respond. Voice cannot be changed during the\nsession once the model has responded with audio at least once. Current\nvoice options are `alloy`, `ash`, `ballad`, `coral`, `echo`, `sage`,\n`shimmer`, and `verse`.\n"
        },
        "input_audio_format": {
          "type": "string",
          "description": "The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\n"
        },
        "output_audio_format": {
          "type": "string",
          "description": "The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\n"
        },
        "input_audio_transcription": {
          "type": "object",
          "description": "Configuration for input audio transcription, defaults to off and can be\nset to `null` to turn off once on. Input audio transcription is not native\nto the model, since the model consumes audio directly. Transcription runs\nasynchronously and should be treated as rough guidance\nrather than the representation understood by the model.\n",
          "properties": {
            "model": {
              "type": "string",
              "description": "The model to use for transcription.\n"
            }
          }
        },
        "speed": {
          "type": "number",
          "default": 1,
          "maximum": 1.5,
          "minimum": 0.25,
          "description": "The speed of the model's spoken response. 1.0 is the default speed. 0.25 is\nthe minimum speed. 1.5 is the maximum speed. This value can only be changed\nin between model turns, not while a response is in progress.\n"
        },
        "tracing": {
          "title": "Tracing Configuration",
          "description": "Configuration options for tracing. Set to null to disable tracing. Once\ntracing is enabled for a session, the configuration cannot be modified.\n\n`auto` will create a trace for the session with default values for the\nworkflow name, group id, and metadata.\n",
          "anyOf": [
            {
              "type": "string",
              "default": "auto",
              "description": "Default tracing mode for the session.\n",
              "enum": [
                "auto"
              ],
              "x-stainless-const": true
            },
            {
              "type": "object",
              "title": "Tracing Configuration",
              "description": "Granular configuration for tracing.\n",
              "properties": {
                "workflow_name": {
                  "type": "string",
                  "description": "The name of the workflow to attach to this trace. This is used to\nname the trace in the traces dashboard.\n"
                },
                "group_id": {
                  "type": "string",
                  "description": "The group id to attach to this trace to enable filtering and\ngrouping in the traces dashboard.\n"
                },
                "metadata": {
                  "type": "object",
                  "description": "The arbitrary metadata to attach to this trace to enable\nfiltering in the traces dashboard.\n"
                }
              }
            }
          ]
        },
        "turn_detection": {
          "type": "object",
          "description": "Configuration for turn detection. Can be set to `null` to turn off. Server\nVAD means that the model will detect the start and end of speech based on\naudio volume and respond at the end of user speech.\n",
          "properties": {
            "type": {
              "type": "string",
              "description": "Type of turn detection, only `server_vad` is currently supported.\n"
            },
            "threshold": {
              "type": "number",
              "description": "Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A\nhigher threshold will require louder audio to activate the model, and\nthus might perform better in noisy environments.\n"
            },
            "prefix_padding_ms": {
              "type": "integer",
              "description": "Amount of audio to include before the VAD detected speech (in\nmilliseconds). Defaults to 300ms.\n"
            },
            "silence_duration_ms": {
              "type": "integer",
              "description": "Duration of silence to detect speech stop (in milliseconds). Defaults\nto 500ms. With shorter values the model will respond more quickly,\nbut may jump in on short pauses from the user.\n"
            }
          }
        },
        "tools": {
          "type": "array",
          "description": "Tools (functions) available to the model.",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "function"
                ],
                "description": "The type of the tool, i.e. `function`.",
                "x-stainless-const": true
              },
              "name": {
                "type": "string",
                "description": "The name of the function."
              },
              "description": {
                "type": "string",
                "description": "The description of the function, including guidance on when and how\nto call it, and guidance about what to tell the user when calling\n(if anything).\n"
              },
              "parameters": {
                "type": "object",
                "description": "Parameters of the function in JSON Schema."
              }
            }
          }
        },
        "tool_choice": {
          "type": "string",
          "description": "How the model chooses tools. Options are `auto`, `none`, `required`, or\nspecify a function.\n"
        },
        "temperature": {
          "type": "number",
          "description": "Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.\n"
        },
        "max_response_output_tokens": {
          "description": "Maximum number of output tokens for a single assistant response,\ninclusive of tool calls. Provide an integer between 1 and 4096 to\nlimit output tokens, or `inf` for the maximum available tokens for a\ngiven model. Defaults to `inf`.\n",
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "string",
              "enum": [
                "inf"
              ],
              "x-stainless-const": true
            }
          ]
        }
      },
      "required": [
        "client_secret"
      ],
      "examples": []
    },
    {
      "name": "RealtimeTranscriptionSessionCreateRequest",
      "type": "object",
      "description": "Realtime transcription session object configuration.",
      "properties": {
        "modalities": {
          "description": "The set of modalities the model can respond with. To disable audio,\nset this to [\"text\"].\n",
          "items": {
            "type": "string",
            "enum": [
              "text",
              "audio"
            ]
          }
        },
        "input_audio_format": {
          "type": "string",
          "default": "pcm16",
          "enum": [
            "pcm16",
            "g711_ulaw",
            "g711_alaw"
          ],
          "description": "The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\nFor `pcm16`, input audio must be 16-bit PCM at a 24kHz sample rate,\nsingle channel (mono), and little-endian byte order.\n"
        },
        "input_audio_transcription": {
          "type": "object",
          "description": "Configuration for input audio transcription. The client can optionally set the language and prompt for transcription, these offer additional guidance to the transcription service.\n",
          "properties": {
            "model": {
              "type": "string",
              "description": "The model to use for transcription, current options are `gpt-4o-transcribe`, `gpt-4o-mini-transcribe`, and `whisper-1`.\n",
              "enum": [
                "gpt-4o-transcribe",
                "gpt-4o-mini-transcribe",
                "whisper-1"
              ]
            },
            "language": {
              "type": "string",
              "description": "The language of the input audio. Supplying the input language in\n[ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g. `en`) format\nwill improve accuracy and latency.\n"
            },
            "prompt": {
              "type": "string",
              "description": "An optional text to guide the model's style or continue a previous audio\nsegment.\nFor `whisper-1`, the [prompt is a list of keywords](https://platform.openai.com/docs/guides/speech-to-text#prompting).\nFor `gpt-4o-transcribe` models, the prompt is a free text string, for example \"expect words related to technology\".\n"
            }
          }
        },
        "turn_detection": {
          "type": "object",
          "description": "Configuration for turn detection, ether Server VAD or Semantic VAD. This can be set to `null` to turn off, in which case the client must manually trigger model response.\nServer VAD means that the model will detect the start and end of speech based on audio volume and respond at the end of user speech.\nSemantic VAD is more advanced and uses a turn detection model (in conjunction with VAD) to semantically estimate whether the user has finished speaking, then dynamically sets a timeout based on this probability. For example, if user audio trails off with \"uhhm\", the model will score a low probability of turn end and wait longer for the user to continue speaking. This can be useful for more natural conversations, but may have a higher latency.\n",
          "properties": {
            "type": {
              "type": "string",
              "default": "server_vad",
              "enum": [
                "server_vad",
                "semantic_vad"
              ],
              "description": "Type of turn detection.\n"
            },
            "eagerness": {
              "type": "string",
              "default": "auto",
              "enum": [
                "low",
                "medium",
                "high",
                "auto"
              ],
              "description": "Used only for `semantic_vad` mode. The eagerness of the model to respond. `low` will wait longer for the user to continue speaking, `high` will respond more quickly. `auto` is the default and is equivalent to `medium`.\n"
            },
            "threshold": {
              "type": "number",
              "description": "Used only for `server_vad` mode. Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A\nhigher threshold will require louder audio to activate the model, and\nthus might perform better in noisy environments.\n"
            },
            "prefix_padding_ms": {
              "type": "integer",
              "description": "Used only for `server_vad` mode. Amount of audio to include before the VAD detected speech (in\nmilliseconds). Defaults to 300ms.\n"
            },
            "silence_duration_ms": {
              "type": "integer",
              "description": "Used only for `server_vad` mode. Duration of silence to detect speech stop (in milliseconds). Defaults\nto 500ms. With shorter values the model will respond more quickly,\nbut may jump in on short pauses from the user.\n"
            },
            "create_response": {
              "type": "boolean",
              "default": true,
              "description": "Whether or not to automatically generate a response when a VAD stop event occurs. Not available for transcription sessions.\n"
            },
            "interrupt_response": {
              "type": "boolean",
              "default": true,
              "description": "Whether or not to automatically interrupt any ongoing response with output to the default\nconversation (i.e. `conversation` of `auto`) when a VAD start event occurs. Not available for transcription sessions.\n"
            }
          }
        },
        "input_audio_noise_reduction": {
          "type": "object",
          "description": "Configuration for input audio noise reduction. This can be set to `null` to turn off.\nNoise reduction filters audio added to the input audio buffer before it is sent to VAD and the model.\nFiltering the audio can improve VAD and turn detection accuracy (reducing false positives) and model performance by improving perception of the input audio.\n",
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "near_field",
                "far_field"
              ],
              "description": "Type of noise reduction. `near_field` is for close-talking microphones such as headphones, `far_field` is for far-field microphones such as laptop or conference room microphones.\n"
            }
          }
        },
        "include": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The set of items to include in the transcription. Current available items are:\n- `item.input_audio_transcription.logprobs`\n"
        },
        "client_secret": {
          "type": "object",
          "description": "Configuration options for the generated client secret.\n",
          "properties": {
            "expires_at": {
              "type": "object",
              "description": "Configuration for the ephemeral token expiration.\n",
              "properties": {
                "anchor": {
                  "default": "created_at",
                  "type": "string",
                  "enum": [
                    "created_at"
                  ],
                  "description": "The anchor point for the ephemeral token expiration. Only `created_at` is currently supported.\n"
                },
                "seconds": {
                  "default": 600,
                  "type": "integer",
                  "description": "The number of seconds from the anchor point to the expiration. Select a value between `10` and `7200`.\n"
                }
              }
            }
          }
        }
      },
      "required": [],
      "examples": []
    },
    {
      "name": "RealtimeTranscriptionSessionCreateResponse",
      "type": "object",
      "description": "A new Realtime transcription session configuration.\n\nWhen a session is created on the server via REST API, the session object\nalso contains an ephemeral key. Default TTL for keys is 10 minutes. This \nproperty is not present when a session is updated via the WebSocket API.\n",
      "properties": {
        "client_secret": {
          "type": "object",
          "description": "Ephemeral key returned by the API. Only present when the session is\ncreated on the server via REST API.\n",
          "properties": {
            "value": {
              "type": "string",
              "description": "Ephemeral key usable in client environments to authenticate connections\nto the Realtime API. Use this in client-side environments rather than\na standard API token, which should only be used server-side.\n"
            },
            "expires_at": {
              "type": "integer",
              "description": "Timestamp for when the token expires. Currently, all tokens expire\nafter one minute.\n"
            }
          },
          "required": [
            "value",
            "expires_at"
          ]
        },
        "modalities": {
          "description": "The set of modalities the model can respond with. To disable audio,\nset this to [\"text\"].\n",
          "items": {
            "type": "string",
            "enum": [
              "text",
              "audio"
            ]
          }
        },
        "input_audio_format": {
          "type": "string",
          "description": "The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\n"
        },
        "input_audio_transcription": {
          "type": "object",
          "description": "Configuration of the transcription model.\n",
          "properties": {
            "model": {
              "type": "string",
              "description": "The model to use for transcription. Can be `gpt-4o-transcribe`, `gpt-4o-mini-transcribe`, or `whisper-1`.\n",
              "enum": [
                "gpt-4o-transcribe",
                "gpt-4o-mini-transcribe",
                "whisper-1"
              ]
            },
            "language": {
              "type": "string",
              "description": "The language of the input audio. Supplying the input language in\n[ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g. `en`) format\nwill improve accuracy and latency.\n"
            },
            "prompt": {
              "type": "string",
              "description": "An optional text to guide the model's style or continue a previous audio\nsegment. The [prompt](https://platform.openai.com/docs/guides/speech-to-text#prompting) should match\nthe audio language.\n"
            }
          }
        },
        "turn_detection": {
          "type": "object",
          "description": "Configuration for turn detection. Can be set to `null` to turn off. Server \nVAD means that the model will detect the start and end of speech based on \naudio volume and respond at the end of user speech.\n",
          "properties": {
            "type": {
              "type": "string",
              "description": "Type of turn detection, only `server_vad` is currently supported.\n"
            },
            "threshold": {
              "type": "number",
              "description": "Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A \nhigher threshold will require louder audio to activate the model, and \nthus might perform better in noisy environments.\n"
            },
            "prefix_padding_ms": {
              "type": "integer",
              "description": "Amount of audio to include before the VAD detected speech (in \nmilliseconds). Defaults to 300ms.\n"
            },
            "silence_duration_ms": {
              "type": "integer",
              "description": "Duration of silence to detect speech stop (in milliseconds). Defaults \nto 500ms. With shorter values the model will respond more quickly, \nbut may jump in on short pauses from the user.\n"
            }
          }
        }
      },
      "required": [
        "client_secret"
      ],
      "examples": []
    },
    {
      "name": "Reasoning",
      "type": "object",
      "description": "**gpt-5 and o-series models only**\n\nConfiguration options for\n[reasoning models](https://platform.openai.com/docs/guides/reasoning).\n",
      "properties": {
        "effort": {
          "$ref": "#/components/schemas/ReasoningEffort"
        },
        "summary": {
          "type": "string",
          "description": "A summary of the reasoning performed by the model. This can be\nuseful for debugging and understanding the model's reasoning process.\nOne of `auto`, `concise`, or `detailed`.\n",
          "enum": [
            "auto",
            "concise",
            "detailed"
          ],
          "nullable": true
        },
        "generate_summary": {
          "type": "string",
          "deprecated": true,
          "description": "**Deprecated:** use `summary` instead.\n\nA summary of the reasoning performed by the model. This can be\nuseful for debugging and understanding the model's reasoning process.\nOne of `auto`, `concise`, or `detailed`.\n",
          "enum": [
            "auto",
            "concise",
            "detailed"
          ],
          "nullable": true
        }
      },
      "required": [],
      "examples": []
    },
    {
      "name": "ReasoningEffort",
      "type": "string",
      "description": "Constrains effort on reasoning for \n[reasoning models](https://platform.openai.com/docs/guides/reasoning).\nCurrently supported values are `minimal`, `low`, `medium`, and `high`. Reducing\nreasoning effort can result in faster responses and fewer tokens used\non reasoning in a response.\n",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "ReasoningItem",
      "type": "object",
      "description": "A description of the chain of thought used by a reasoning model while generating\na response. Be sure to include these items in your `input` to the Responses API\nfor subsequent turns of a conversation if you are manually \n[managing context](https://platform.openai.com/docs/guides/conversation-state).\n",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the object. Always `reasoning`.\n",
          "enum": [
            "reasoning"
          ],
          "x-stainless-const": true
        },
        "id": {
          "type": "string",
          "description": "The unique identifier of the reasoning content.\n"
        },
        "encrypted_content": {
          "type": "string",
          "description": "The encrypted content of the reasoning item - populated when a response is\ngenerated with `reasoning.encrypted_content` in the `include` parameter.\n",
          "nullable": true
        },
        "summary": {
          "type": "array",
          "description": "Reasoning summary content.\n",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "The type of the object. Always `summary_text`.\n",
                "enum": [
                  "summary_text"
                ],
                "x-stainless-const": true
              },
              "text": {
                "type": "string",
                "description": "A summary of the reasoning output from the model so far.\n"
              }
            },
            "required": [
              "type",
              "text"
            ]
          }
        },
        "content": {
          "type": "array",
          "description": "Reasoning text content.\n",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "The type of the object. Always `reasoning_text`.\n",
                "enum": [
                  "reasoning_text"
                ],
                "x-stainless-const": true
              },
              "text": {
                "type": "string",
                "description": "Reasoning text output from the model.\n"
              }
            },
            "required": [
              "type",
              "text"
            ]
          }
        },
        "status": {
          "type": "string",
          "description": "The status of the item. One of `in_progress`, `completed`, or\n`incomplete`. Populated when items are returned via API.\n",
          "enum": [
            "in_progress",
            "completed",
            "incomplete"
          ]
        }
      },
      "required": [
        "id",
        "summary",
        "type"
      ],
      "examples": []
    },
    {
      "name": "Response",
      "type": "object",
      "description": "",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "ResponseAudioDeltaEvent",
      "type": "object",
      "description": "Emitted when there is a partial audio response.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the event. Always `response.audio.delta`.\n",
          "enum": [
            "response.audio.delta"
          ],
          "x-stainless-const": true
        },
        "sequence_number": {
          "type": "integer",
          "description": "A sequence number for this chunk of the stream response.\n"
        },
        "delta": {
          "type": "string",
          "description": "A chunk of Base64 encoded response audio bytes.\n"
        }
      },
      "required": [
        "type",
        "delta",
        "sequence_number"
      ],
      "examples": []
    },
    {
      "name": "ResponseAudioDoneEvent",
      "type": "object",
      "description": "Emitted when the audio response is complete.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the event. Always `response.audio.done`.\n",
          "enum": [
            "response.audio.done"
          ],
          "x-stainless-const": true
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number of the delta.\n"
        }
      },
      "required": [
        "type",
        "sequence_number",
        "response_id"
      ],
      "examples": []
    },
    {
      "name": "ResponseAudioTranscriptDeltaEvent",
      "type": "object",
      "description": "Emitted when there is a partial transcript of audio.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the event. Always `response.audio.transcript.delta`.\n",
          "enum": [
            "response.audio.transcript.delta"
          ],
          "x-stainless-const": true
        },
        "delta": {
          "type": "string",
          "description": "The partial transcript of the audio response.\n"
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number of this event."
        }
      },
      "required": [
        "type",
        "response_id",
        "delta",
        "sequence_number"
      ],
      "examples": []
    },
    {
      "name": "ResponseAudioTranscriptDoneEvent",
      "type": "object",
      "description": "Emitted when the full audio transcript is completed.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the event. Always `response.audio.transcript.done`.\n",
          "enum": [
            "response.audio.transcript.done"
          ],
          "x-stainless-const": true
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number of this event."
        }
      },
      "required": [
        "type",
        "response_id",
        "sequence_number"
      ],
      "examples": []
    },
    {
      "name": "ResponseCodeInterpreterCallCodeDeltaEvent",
      "type": "object",
      "description": "Emitted when a partial code snippet is streamed by the code interpreter.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the event. Always `response.code_interpreter_call_code.delta`.",
          "enum": [
            "response.code_interpreter_call_code.delta"
          ],
          "x-stainless-const": true
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item in the response for which the code is being streamed."
        },
        "item_id": {
          "type": "string",
          "description": "The unique identifier of the code interpreter tool call item."
        },
        "delta": {
          "type": "string",
          "description": "The partial code snippet being streamed by the code interpreter."
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number of this event, used to order streaming events."
        }
      },
      "required": [
        "type",
        "output_index",
        "item_id",
        "delta",
        "sequence_number"
      ],
      "examples": []
    },
    {
      "name": "ResponseCodeInterpreterCallCodeDoneEvent",
      "type": "object",
      "description": "Emitted when the code snippet is finalized by the code interpreter.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the event. Always `response.code_interpreter_call_code.done`.",
          "enum": [
            "response.code_interpreter_call_code.done"
          ],
          "x-stainless-const": true
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item in the response for which the code is finalized."
        },
        "item_id": {
          "type": "string",
          "description": "The unique identifier of the code interpreter tool call item."
        },
        "code": {
          "type": "string",
          "description": "The final code snippet output by the code interpreter."
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number of this event, used to order streaming events."
        }
      },
      "required": [
        "type",
        "output_index",
        "item_id",
        "code",
        "sequence_number"
      ],
      "examples": []
    },
    {
      "name": "ResponseCodeInterpreterCallCompletedEvent",
      "type": "object",
      "description": "Emitted when the code interpreter call is completed.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the event. Always `response.code_interpreter_call.completed`.",
          "enum": [
            "response.code_interpreter_call.completed"
          ],
          "x-stainless-const": true
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item in the response for which the code interpreter call is completed."
        },
        "item_id": {
          "type": "string",
          "description": "The unique identifier of the code interpreter tool call item."
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number of this event, used to order streaming events."
        }
      },
      "required": [
        "type",
        "output_index",
        "item_id",
        "sequence_number"
      ],
      "examples": []
    },
    {
      "name": "ResponseCodeInterpreterCallInProgressEvent",
      "type": "object",
      "description": "Emitted when a code interpreter call is in progress.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the event. Always `response.code_interpreter_call.in_progress`.",
          "enum": [
            "response.code_interpreter_call.in_progress"
          ],
          "x-stainless-const": true
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item in the response for which the code interpreter call is in progress."
        },
        "item_id": {
          "type": "string",
          "description": "The unique identifier of the code interpreter tool call item."
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number of this event, used to order streaming events."
        }
      },
      "required": [
        "type",
        "output_index",
        "item_id",
        "sequence_number"
      ],
      "examples": []
    },
    {
      "name": "ResponseCodeInterpreterCallInterpretingEvent",
      "type": "object",
      "description": "Emitted when the code interpreter is actively interpreting the code snippet.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the event. Always `response.code_interpreter_call.interpreting`.",
          "enum": [
            "response.code_interpreter_call.interpreting"
          ],
          "x-stainless-const": true
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item in the response for which the code interpreter is interpreting code."
        },
        "item_id": {
          "type": "string",
          "description": "The unique identifier of the code interpreter tool call item."
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number of this event, used to order streaming events."
        }
      },
      "required": [
        "type",
        "output_index",
        "item_id",
        "sequence_number"
      ],
      "examples": []
    },
    {
      "name": "ResponseCompletedEvent",
      "type": "object",
      "description": "Emitted when the model response is complete.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the event. Always `response.completed`.\n",
          "enum": [
            "response.completed"
          ],
          "x-stainless-const": true
        },
        "response": {
          "$ref": "#/components/schemas/Response",
          "description": "Properties of the completed response.\n"
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number for this event."
        }
      },
      "required": [
        "type",
        "response",
        "sequence_number"
      ],
      "examples": []
    },
    {
      "name": "ResponseContentPartAddedEvent",
      "type": "object",
      "description": "Emitted when a new content part is added.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the event. Always `response.content_part.added`.\n",
          "enum": [
            "response.content_part.added"
          ],
          "x-stainless-const": true
        },
        "item_id": {
          "type": "string",
          "description": "The ID of the output item that the content part was added to.\n"
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item that the content part was added to.\n"
        },
        "content_index": {
          "type": "integer",
          "description": "The index of the content part that was added.\n"
        },
        "part": {
          "$ref": "#/components/schemas/OutputContent",
          "description": "The content part that was added.\n"
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number of this event."
        }
      },
      "required": [
        "type",
        "item_id",
        "output_index",
        "content_index",
        "part",
        "sequence_number"
      ],
      "examples": []
    },
    {
      "name": "ResponseContentPartDoneEvent",
      "type": "object",
      "description": "Emitted when a content part is done.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the event. Always `response.content_part.done`.\n",
          "enum": [
            "response.content_part.done"
          ],
          "x-stainless-const": true
        },
        "item_id": {
          "type": "string",
          "description": "The ID of the output item that the content part was added to.\n"
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item that the content part was added to.\n"
        },
        "content_index": {
          "type": "integer",
          "description": "The index of the content part that is done.\n"
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number of this event."
        },
        "part": {
          "$ref": "#/components/schemas/OutputContent",
          "description": "The content part that is done.\n"
        }
      },
      "required": [
        "type",
        "item_id",
        "output_index",
        "content_index",
        "part",
        "sequence_number"
      ],
      "examples": []
    },
    {
      "name": "ResponseCreatedEvent",
      "type": "object",
      "description": "An event that is emitted when a response is created.\n",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the event. Always `response.created`.\n",
          "enum": [
            "response.created"
          ],
          "x-stainless-const": true
        },
        "response": {
          "$ref": "#/components/schemas/Response",
          "description": "The response that was created.\n"
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number for this event."
        }
      },
      "required": [
        "type",
        "response",
        "sequence_number"
      ],
      "examples": []
    },
    {
      "name": "ResponseCustomToolCallInputDeltaEvent",
      "type": "object",
      "description": "Event representing a delta (partial update) to the input of a custom tool call.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "response.custom_tool_call_input.delta"
          ],
          "description": "The event type identifier.",
          "x-stainless-const": true
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number of this event."
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output this delta applies to."
        },
        "item_id": {
          "type": "string",
          "description": "Unique identifier for the API item associated with this event."
        },
        "delta": {
          "type": "string",
          "description": "The incremental input data (delta) for the custom tool call."
        }
      },
      "required": [
        "type",
        "output_index",
        "item_id",
        "delta",
        "sequence_number"
      ],
      "examples": []
    },
    {
      "name": "ResponseCustomToolCallInputDoneEvent",
      "type": "object",
      "description": "Event indicating that input for a custom tool call is complete.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "response.custom_tool_call_input.done"
          ],
          "description": "The event type identifier.",
          "x-stainless-const": true
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number of this event."
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output this event applies to."
        },
        "item_id": {
          "type": "string",
          "description": "Unique identifier for the API item associated with this event."
        },
        "input": {
          "type": "string",
          "description": "The complete input data for the custom tool call."
        }
      },
      "required": [
        "type",
        "output_index",
        "item_id",
        "input",
        "sequence_number"
      ],
      "examples": []
    },
    {
      "name": "ResponseError",
      "type": "object",
      "description": "An error object returned when the model fails to generate a Response.\n",
      "properties": {
        "code": {
          "$ref": "#/components/schemas/ResponseErrorCode"
        },
        "message": {
          "type": "string",
          "description": "A human-readable description of the error.\n"
        }
      },
      "required": [
        "code",
        "message"
      ],
      "examples": []
    },
    {
      "name": "ResponseErrorCode",
      "type": "string",
      "description": "The error code for the response.\n",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "ResponseErrorEvent",
      "type": "object",
      "description": "Emitted when an error occurs.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the event. Always `error`.\n",
          "enum": [
            "error"
          ],
          "x-stainless-const": true
        },
        "code": {
          "type": "string",
          "description": "The error code.\n",
          "nullable": true
        },
        "message": {
          "type": "string",
          "description": "The error message.\n"
        },
        "param": {
          "type": "string",
          "description": "The error parameter.\n",
          "nullable": true
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number of this event."
        }
      },
      "required": [
        "type",
        "code",
        "message",
        "param",
        "sequence_number"
      ],
      "examples": []
    },
    {
      "name": "ResponseFailedEvent",
      "type": "object",
      "description": "An event that is emitted when a response fails.\n",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the event. Always `response.failed`.\n",
          "enum": [
            "response.failed"
          ],
          "x-stainless-const": true
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number of this event."
        },
        "response": {
          "$ref": "#/components/schemas/Response",
          "description": "The response that failed.\n"
        }
      },
      "required": [
        "type",
        "response",
        "sequence_number"
      ],
      "examples": []
    },
    {
      "name": "ResponseFileSearchCallCompletedEvent",
      "type": "object",
      "description": "Emitted when a file search call is completed (results found).",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the event. Always `response.file_search_call.completed`.\n",
          "enum": [
            "response.file_search_call.completed"
          ],
          "x-stainless-const": true
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item that the file search call is initiated.\n"
        },
        "item_id": {
          "type": "string",
          "description": "The ID of the output item that the file search call is initiated.\n"
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number of this event."
        }
      },
      "required": [
        "type",
        "output_index",
        "item_id",
        "sequence_number"
      ],
      "examples": []
    },
    {
      "name": "ResponseFileSearchCallInProgressEvent",
      "type": "object",
      "description": "Emitted when a file search call is initiated.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the event. Always `response.file_search_call.in_progress`.\n",
          "enum": [
            "response.file_search_call.in_progress"
          ],
          "x-stainless-const": true
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item that the file search call is initiated.\n"
        },
        "item_id": {
          "type": "string",
          "description": "The ID of the output item that the file search call is initiated.\n"
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number of this event."
        }
      },
      "required": [
        "type",
        "output_index",
        "item_id",
        "sequence_number"
      ],
      "examples": []
    },
    {
      "name": "ResponseFileSearchCallSearchingEvent",
      "type": "object",
      "description": "Emitted when a file search is currently searching.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the event. Always `response.file_search_call.searching`.\n",
          "enum": [
            "response.file_search_call.searching"
          ],
          "x-stainless-const": true
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item that the file search call is searching.\n"
        },
        "item_id": {
          "type": "string",
          "description": "The ID of the output item that the file search call is initiated.\n"
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number of this event."
        }
      },
      "required": [
        "type",
        "output_index",
        "item_id",
        "sequence_number"
      ],
      "examples": []
    },
    {
      "name": "ResponseFormatJsonObject",
      "type": "object",
      "description": "JSON object response format. An older method of generating JSON responses.\nUsing `json_schema` is recommended for models that support it. Note that the\nmodel will not generate JSON without a system or user message instructing it\nto do so.\n",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of response format being defined. Always `json_object`.",
          "enum": [
            "json_object"
          ],
          "x-stainless-const": true
        }
      },
      "required": [
        "type"
      ],
      "examples": []
    },
    {
      "name": "ResponseFormatJsonSchema",
      "type": "object",
      "description": "JSON Schema response format. Used to generate structured JSON responses.\nLearn more about [Structured Outputs](https://platform.openai.com/docs/guides/structured-outputs).\n",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of response format being defined. Always `json_schema`.",
          "enum": [
            "json_schema"
          ],
          "x-stainless-const": true
        },
        "json_schema": {
          "type": "object",
          "title": "JSON schema",
          "description": "Structured Outputs configuration options, including a JSON Schema.\n",
          "properties": {
            "description": {
              "type": "string",
              "description": "A description of what the response format is for, used by the model to\ndetermine how to respond in the format.\n"
            },
            "name": {
              "type": "string",
              "description": "The name of the response format. Must be a-z, A-Z, 0-9, or contain\nunderscores and dashes, with a maximum length of 64.\n"
            },
            "schema": {
              "$ref": "#/components/schemas/ResponseFormatJsonSchemaSchema"
            },
            "strict": {
              "type": "boolean",
              "nullable": true,
              "default": false,
              "description": "Whether to enable strict schema adherence when generating the output.\nIf set to true, the model will always follow the exact schema defined\nin the `schema` field. Only a subset of JSON Schema is supported when\n`strict` is `true`. To learn more, read the [Structured Outputs\nguide](https://platform.openai.com/docs/guides/structured-outputs).\n"
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "required": [
        "type",
        "json_schema"
      ],
      "examples": []
    },
    {
      "name": "ResponseFormatJsonSchemaSchema",
      "type": "object",
      "description": "The schema for the response format, described as a JSON Schema object.\nLearn how to build JSON schemas [here](https://json-schema.org/).\n",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "ResponseFormatText",
      "type": "object",
      "description": "Default response format. Used to generate text responses.\n",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of response format being defined. Always `text`.",
          "enum": [
            "text"
          ],
          "x-stainless-const": true
        }
      },
      "required": [
        "type"
      ],
      "examples": []
    },
    {
      "name": "ResponseFormatTextGrammar",
      "type": "object",
      "description": "A custom grammar for the model to follow when generating text.\nLearn more in the [custom grammars guide](https://platform.openai.com/docs/guides/custom-grammars).\n",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of response format being defined. Always `grammar`.",
          "enum": [
            "grammar"
          ],
          "x-stainless-const": true
        },
        "grammar": {
          "type": "string",
          "description": "The custom grammar for the model to follow."
        }
      },
      "required": [
        "type",
        "grammar"
      ],
      "examples": []
    },
    {
      "name": "ResponseFormatTextPython",
      "type": "object",
      "description": "Configure the model to generate valid Python code. See the\n[custom grammars guide](https://platform.openai.com/docs/guides/custom-grammars) for more details.\n",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of response format being defined. Always `python`.",
          "enum": [
            "python"
          ],
          "x-stainless-const": true
        }
      },
      "required": [
        "type"
      ],
      "examples": []
    },
    {
      "name": "ResponseFunctionCallArgumentsDeltaEvent",
      "type": "object",
      "description": "Emitted when there is a partial function-call arguments delta.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the event. Always `response.function_call_arguments.delta`.\n",
          "enum": [
            "response.function_call_arguments.delta"
          ],
          "x-stainless-const": true
        },
        "item_id": {
          "type": "string",
          "description": "The ID of the output item that the function-call arguments delta is added to.\n"
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item that the function-call arguments delta is added to.\n"
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number of this event."
        },
        "delta": {
          "type": "string",
          "description": "The function-call arguments delta that is added.\n"
        }
      },
      "required": [
        "type",
        "item_id",
        "output_index",
        "delta",
        "sequence_number"
      ],
      "examples": []
    },
    {
      "name": "ResponseFunctionCallArgumentsDoneEvent",
      "type": "object",
      "description": "Emitted when function-call arguments are finalized.",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "response.function_call_arguments.done"
          ],
          "x-stainless-const": true
        },
        "item_id": {
          "type": "string",
          "description": "The ID of the item."
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item."
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number of this event."
        },
        "arguments": {
          "type": "string",
          "description": "The function-call arguments."
        }
      },
      "required": [
        "type",
        "item_id",
        "output_index",
        "arguments",
        "sequence_number"
      ],
      "examples": []
    },
    {
      "name": "ResponseImageGenCallCompletedEvent",
      "type": "object",
      "description": "Emitted when an image generation tool call has completed and the final image is available.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "response.image_generation_call.completed"
          ],
          "description": "The type of the event. Always 'response.image_generation_call.completed'.",
          "x-stainless-const": true
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item in the response's output array."
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number of this event."
        },
        "item_id": {
          "type": "string",
          "description": "The unique identifier of the image generation item being processed."
        }
      },
      "required": [
        "type",
        "output_index",
        "item_id",
        "sequence_number"
      ],
      "examples": []
    },
    {
      "name": "ResponseImageGenCallGeneratingEvent",
      "type": "object",
      "description": "Emitted when an image generation tool call is actively generating an image (intermediate state).\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "response.image_generation_call.generating"
          ],
          "description": "The type of the event. Always 'response.image_generation_call.generating'.",
          "x-stainless-const": true
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item in the response's output array."
        },
        "item_id": {
          "type": "string",
          "description": "The unique identifier of the image generation item being processed."
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number of the image generation item being processed."
        }
      },
      "required": [
        "type",
        "output_index",
        "item_id",
        "sequence_number"
      ],
      "examples": []
    },
    {
      "name": "ResponseImageGenCallInProgressEvent",
      "type": "object",
      "description": "Emitted when an image generation tool call is in progress.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "response.image_generation_call.in_progress"
          ],
          "description": "The type of the event. Always 'response.image_generation_call.in_progress'.",
          "x-stainless-const": true
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item in the response's output array."
        },
        "item_id": {
          "type": "string",
          "description": "The unique identifier of the image generation item being processed."
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number of the image generation item being processed."
        }
      },
      "required": [
        "type",
        "output_index",
        "item_id",
        "sequence_number"
      ],
      "examples": []
    },
    {
      "name": "ResponseImageGenCallPartialImageEvent",
      "type": "object",
      "description": "Emitted when a partial image is available during image generation streaming.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "response.image_generation_call.partial_image"
          ],
          "description": "The type of the event. Always 'response.image_generation_call.partial_image'.",
          "x-stainless-const": true
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item in the response's output array."
        },
        "item_id": {
          "type": "string",
          "description": "The unique identifier of the image generation item being processed."
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number of the image generation item being processed."
        },
        "partial_image_index": {
          "type": "integer",
          "description": "0-based index for the partial image (backend is 1-based, but this is 0-based for the user)."
        },
        "partial_image_b64": {
          "type": "string",
          "description": "Base64-encoded partial image data, suitable for rendering as an image."
        }
      },
      "required": [
        "type",
        "output_index",
        "item_id",
        "sequence_number",
        "partial_image_index",
        "partial_image_b64"
      ],
      "examples": []
    },
    {
      "name": "ResponseInProgressEvent",
      "type": "object",
      "description": "Emitted when the response is in progress.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the event. Always `response.in_progress`.\n",
          "enum": [
            "response.in_progress"
          ],
          "x-stainless-const": true
        },
        "response": {
          "$ref": "#/components/schemas/Response",
          "description": "The response that is in progress.\n"
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number of this event."
        }
      },
      "required": [
        "type",
        "response",
        "sequence_number"
      ],
      "examples": []
    },
    {
      "name": "ResponseIncompleteEvent",
      "type": "object",
      "description": "An event that is emitted when a response finishes as incomplete.\n",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the event. Always `response.incomplete`.\n",
          "enum": [
            "response.incomplete"
          ],
          "x-stainless-const": true
        },
        "response": {
          "$ref": "#/components/schemas/Response",
          "description": "The response that was incomplete.\n"
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number of this event."
        }
      },
      "required": [
        "type",
        "response",
        "sequence_number"
      ],
      "examples": []
    },
    {
      "name": "ResponseItemList",
      "type": "object",
      "description": "A list of Response items.",
      "properties": {
        "object": {
          "description": "The type of object returned, must be `list`.",
          "x-stainless-const": true,
          "const": "list"
        },
        "data": {
          "type": "array",
          "description": "A list of items used to generate this response.",
          "items": {
            "$ref": "#/components/schemas/ItemResource"
          }
        },
        "has_more": {
          "type": "boolean",
          "description": "Whether there are more items available."
        },
        "first_id": {
          "type": "string",
          "description": "The ID of the first item in the list."
        },
        "last_id": {
          "type": "string",
          "description": "The ID of the last item in the list."
        }
      },
      "required": [
        "object",
        "data",
        "has_more",
        "first_id",
        "last_id"
      ],
      "examples": []
    },
    {
      "name": "ResponseLogProb",
      "type": "object",
      "description": "A logprob is the logarithmic probability that the model assigns to producing \na particular token at a given position in the sequence. Less-negative (higher) \nlogprob values indicate greater model confidence in that token choice.\n",
      "properties": {
        "token": {
          "description": "A possible text token.",
          "type": "string"
        },
        "logprob": {
          "description": "The log probability of this token.\n",
          "type": "number"
        },
        "top_logprobs": {
          "description": "The log probability of the top 20 most likely tokens.\n",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "token": {
                "description": "A possible text token.",
                "type": "string"
              },
              "logprob": {
                "description": "The log probability of this token.",
                "type": "number"
              }
            }
          }
        }
      },
      "required": [
        "token",
        "logprob"
      ],
      "examples": []
    },
    {
      "name": "ResponseMCPCallArgumentsDeltaEvent",
      "type": "object",
      "description": "Emitted when there is a delta (partial update) to the arguments of an MCP tool call.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "response.mcp_call_arguments.delta"
          ],
          "description": "The type of the event. Always 'response.mcp_call_arguments.delta'.",
          "x-stainless-const": true
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item in the response's output array."
        },
        "item_id": {
          "type": "string",
          "description": "The unique identifier of the MCP tool call item being processed."
        },
        "delta": {
          "type": "string",
          "description": "A JSON string containing the partial update to the arguments for the MCP tool call.\n"
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number of this event."
        }
      },
      "required": [
        "type",
        "output_index",
        "item_id",
        "delta",
        "sequence_number"
      ],
      "examples": []
    },
    {
      "name": "ResponseMCPCallArgumentsDoneEvent",
      "type": "object",
      "description": "Emitted when the arguments for an MCP tool call are finalized.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "response.mcp_call_arguments.done"
          ],
          "description": "The type of the event. Always 'response.mcp_call_arguments.done'.",
          "x-stainless-const": true
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item in the response's output array."
        },
        "item_id": {
          "type": "string",
          "description": "The unique identifier of the MCP tool call item being processed."
        },
        "arguments": {
          "type": "string",
          "description": "A JSON string containing the finalized arguments for the MCP tool call.\n"
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number of this event."
        }
      },
      "required": [
        "type",
        "output_index",
        "item_id",
        "arguments",
        "sequence_number"
      ],
      "examples": []
    },
    {
      "name": "ResponseMCPCallCompletedEvent",
      "type": "object",
      "description": "Emitted when an MCP  tool call has completed successfully.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "response.mcp_call.completed"
          ],
          "description": "The type of the event. Always 'response.mcp_call.completed'.",
          "x-stainless-const": true
        },
        "item_id": {
          "type": "string",
          "description": "The ID of the MCP tool call item that completed."
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item that completed."
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number of this event."
        }
      },
      "required": [
        "type",
        "item_id",
        "output_index",
        "sequence_number"
      ],
      "examples": []
    },
    {
      "name": "ResponseMCPCallFailedEvent",
      "type": "object",
      "description": "Emitted when an MCP  tool call has failed.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "response.mcp_call.failed"
          ],
          "description": "The type of the event. Always 'response.mcp_call.failed'.",
          "x-stainless-const": true
        },
        "item_id": {
          "type": "string",
          "description": "The ID of the MCP tool call item that failed."
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item that failed."
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number of this event."
        }
      },
      "required": [
        "type",
        "item_id",
        "output_index",
        "sequence_number"
      ],
      "examples": []
    },
    {
      "name": "ResponseMCPCallInProgressEvent",
      "type": "object",
      "description": "Emitted when an MCP  tool call is in progress.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "response.mcp_call.in_progress"
          ],
          "description": "The type of the event. Always 'response.mcp_call.in_progress'.",
          "x-stainless-const": true
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number of this event."
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item in the response's output array."
        },
        "item_id": {
          "type": "string",
          "description": "The unique identifier of the MCP tool call item being processed."
        }
      },
      "required": [
        "type",
        "output_index",
        "item_id",
        "sequence_number"
      ],
      "examples": []
    },
    {
      "name": "ResponseMCPListToolsCompletedEvent",
      "type": "object",
      "description": "Emitted when the list of available MCP tools has been successfully retrieved.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "response.mcp_list_tools.completed"
          ],
          "description": "The type of the event. Always 'response.mcp_list_tools.completed'.",
          "x-stainless-const": true
        },
        "item_id": {
          "type": "string",
          "description": "The ID of the MCP tool call item that produced this output."
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item that was processed."
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number of this event."
        }
      },
      "required": [
        "type",
        "item_id",
        "output_index",
        "sequence_number"
      ],
      "examples": []
    },
    {
      "name": "ResponseMCPListToolsFailedEvent",
      "type": "object",
      "description": "Emitted when the attempt to list available MCP tools has failed.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "response.mcp_list_tools.failed"
          ],
          "description": "The type of the event. Always 'response.mcp_list_tools.failed'.",
          "x-stainless-const": true
        },
        "item_id": {
          "type": "string",
          "description": "The ID of the MCP tool call item that failed."
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item that failed."
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number of this event."
        }
      },
      "required": [
        "type",
        "item_id",
        "output_index",
        "sequence_number"
      ],
      "examples": []
    },
    {
      "name": "ResponseMCPListToolsInProgressEvent",
      "type": "object",
      "description": "Emitted when the system is in the process of retrieving the list of available MCP tools.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "response.mcp_list_tools.in_progress"
          ],
          "description": "The type of the event. Always 'response.mcp_list_tools.in_progress'.",
          "x-stainless-const": true
        },
        "item_id": {
          "type": "string",
          "description": "The ID of the MCP tool call item that is being processed."
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item that is being processed."
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number of this event."
        }
      },
      "required": [
        "type",
        "item_id",
        "output_index",
        "sequence_number"
      ],
      "examples": []
    },
    {
      "name": "ResponseModalities",
      "type": "array",
      "description": "Output types that you would like the model to generate.\nMost models are capable of generating text, which is the default:\n\n`[\"text\"]`\n\nThe `gpt-4o-audio-preview` model can also be used to \n[generate audio](https://platform.openai.com/docs/guides/audio). To request that this model generate \nboth text and audio responses, you can use:\n\n`[\"text\", \"audio\"]`\n",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "ResponseOutputItemAddedEvent",
      "type": "object",
      "description": "Emitted when a new output item is added.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the event. Always `response.output_item.added`.\n",
          "enum": [
            "response.output_item.added"
          ],
          "x-stainless-const": true
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item that was added.\n"
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number of this event.\n"
        },
        "item": {
          "$ref": "#/components/schemas/OutputItem",
          "description": "The output item that was added.\n"
        }
      },
      "required": [
        "type",
        "output_index",
        "item",
        "sequence_number"
      ],
      "examples": []
    },
    {
      "name": "ResponseOutputItemDoneEvent",
      "type": "object",
      "description": "Emitted when an output item is marked done.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the event. Always `response.output_item.done`.\n",
          "enum": [
            "response.output_item.done"
          ],
          "x-stainless-const": true
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item that was marked done.\n"
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number of this event.\n"
        },
        "item": {
          "$ref": "#/components/schemas/OutputItem",
          "description": "The output item that was marked done.\n"
        }
      },
      "required": [
        "type",
        "output_index",
        "item",
        "sequence_number"
      ],
      "examples": []
    },
    {
      "name": "ResponseOutputTextAnnotationAddedEvent",
      "type": "object",
      "description": "Emitted when an annotation is added to output text content.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "response.output_text.annotation.added"
          ],
          "description": "The type of the event. Always 'response.output_text.annotation.added'.",
          "x-stainless-const": true
        },
        "item_id": {
          "type": "string",
          "description": "The unique identifier of the item to which the annotation is being added."
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item in the response's output array."
        },
        "content_index": {
          "type": "integer",
          "description": "The index of the content part within the output item."
        },
        "annotation_index": {
          "type": "integer",
          "description": "The index of the annotation within the content part."
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number of this event."
        },
        "annotation": {
          "type": "object",
          "description": "The annotation object being added. (See annotation schema for details.)"
        }
      },
      "required": [
        "type",
        "item_id",
        "output_index",
        "content_index",
        "annotation_index",
        "annotation",
        "sequence_number"
      ],
      "examples": []
    },
    {
      "name": "ResponsePromptVariables",
      "type": "object",
      "description": "Optional map of values to substitute in for variables in your\nprompt. The substitution values can either be strings, or other\nResponse input types like images or files.\n",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "ResponseProperties",
      "type": "object",
      "description": "",
      "properties": {
        "previous_response_id": {
          "type": "string",
          "description": "The unique ID of the previous response to the model. Use this to\ncreate multi-turn conversations. Learn more about\n[conversation state](https://platform.openai.com/docs/guides/conversation-state). Cannot be used in conjunction with `conversation`.\n",
          "nullable": true
        },
        "model": {
          "description": "Model ID used to generate the response, like `gpt-4o` or `o3`. OpenAI\noffers a wide range of models with different capabilities, performance\ncharacteristics, and price points. Refer to the [model guide](https://platform.openai.com/docs/models)\nto browse and compare available models.\n",
          "$ref": "#/components/schemas/ModelIdsResponses"
        },
        "reasoning": {
          "$ref": "#/components/schemas/Reasoning",
          "nullable": true
        },
        "background": {
          "type": "boolean",
          "description": "Whether to run the model response in the background.\n[Learn more](https://platform.openai.com/docs/guides/background).\n",
          "default": false,
          "nullable": true
        },
        "max_output_tokens": {
          "description": "An upper bound for the number of tokens that can be generated for a response, including visible output tokens and [reasoning tokens](https://platform.openai.com/docs/guides/reasoning).\n",
          "type": "integer",
          "nullable": true
        },
        "max_tool_calls": {
          "description": "The maximum number of total calls to built-in tools that can be processed in a response. This maximum number applies across all built-in tool calls, not per individual tool. Any further attempts to call a tool by the model will be ignored.\n",
          "type": "integer",
          "nullable": true
        },
        "text": {
          "type": "object",
          "description": "Configuration options for a text response from the model. Can be plain\ntext or structured JSON data. Learn more:\n- [Text inputs and outputs](https://platform.openai.com/docs/guides/text)\n- [Structured Outputs](https://platform.openai.com/docs/guides/structured-outputs)\n",
          "properties": {
            "format": {
              "$ref": "#/components/schemas/TextResponseFormatConfiguration"
            },
            "verbosity": {
              "$ref": "#/components/schemas/Verbosity"
            }
          }
        },
        "tools": {
          "type": "array",
          "description": "An array of tools the model may call while generating a response. You\ncan specify which tool to use by setting the `tool_choice` parameter.\n\nThe two categories of tools you can provide the model are:\n\n- **Built-in tools**: Tools that are provided by OpenAI that extend the\n  model's capabilities, like [web search](https://platform.openai.com/docs/guides/tools-web-search)\n  or [file search](https://platform.openai.com/docs/guides/tools-file-search). Learn more about\n  [built-in tools](https://platform.openai.com/docs/guides/tools).\n- **Function calls (custom tools)**: Functions that are defined by you,\n  enabling the model to call your own code with strongly typed arguments\n  and outputs. Learn more about\n  [function calling](https://platform.openai.com/docs/guides/function-calling). You can also use\n  custom tools to call your own code.\n",
          "items": {
            "$ref": "#/components/schemas/Tool"
          }
        },
        "tool_choice": {
          "description": "How the model should select which tool (or tools) to use when generating\na response. See the `tools` parameter to see how to specify which tools\nthe model can call.\n",
          "anyOf": [
            {
              "$ref": "#/components/schemas/ToolChoiceOptions"
            },
            {
              "$ref": "#/components/schemas/ToolChoiceAllowed"
            },
            {
              "$ref": "#/components/schemas/ToolChoiceTypes"
            },
            {
              "$ref": "#/components/schemas/ToolChoiceFunction"
            },
            {
              "$ref": "#/components/schemas/ToolChoiceMCP"
            },
            {
              "$ref": "#/components/schemas/ToolChoiceCustom"
            }
          ]
        },
        "prompt": {
          "$ref": "#/components/schemas/Prompt"
        },
        "truncation": {
          "type": "string",
          "description": "The truncation strategy to use for the model response.\n- `auto`: If the context of this response and previous ones exceeds\n  the model's context window size, the model will truncate the\n  response to fit the context window by dropping input items in the\n  middle of the conversation.\n- `disabled` (default): If a model response will exceed the context window\n  size for a model, the request will fail with a 400 error.\n",
          "enum": [
            "auto",
            "disabled"
          ],
          "nullable": true,
          "default": "disabled"
        }
      },
      "required": [],
      "examples": []
    },
    {
      "name": "ResponseQueuedEvent",
      "type": "object",
      "description": "Emitted when a response is queued and waiting to be processed.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "response.queued"
          ],
          "description": "The type of the event. Always 'response.queued'.",
          "x-stainless-const": true
        },
        "response": {
          "$ref": "#/components/schemas/Response",
          "description": "The full response object that is queued."
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number for this event."
        }
      },
      "required": [
        "type",
        "response",
        "sequence_number"
      ],
      "examples": []
    },
    {
      "name": "ResponseReasoningSummaryPartAddedEvent",
      "type": "object",
      "description": "Emitted when a new reasoning summary part is added.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the event. Always `response.reasoning_summary_part.added`.\n",
          "enum": [
            "response.reasoning_summary_part.added"
          ],
          "x-stainless-const": true
        },
        "item_id": {
          "type": "string",
          "description": "The ID of the item this summary part is associated with.\n"
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item this summary part is associated with.\n"
        },
        "summary_index": {
          "type": "integer",
          "description": "The index of the summary part within the reasoning summary.\n"
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number of this event.\n"
        },
        "part": {
          "type": "object",
          "description": "The summary part that was added.\n",
          "properties": {
            "type": {
              "type": "string",
              "description": "The type of the summary part. Always `summary_text`.",
              "enum": [
                "summary_text"
              ],
              "x-stainless-const": true
            },
            "text": {
              "type": "string",
              "description": "The text of the summary part."
            }
          },
          "required": [
            "type",
            "text"
          ]
        }
      },
      "required": [
        "type",
        "item_id",
        "output_index",
        "summary_index",
        "part",
        "sequence_number"
      ],
      "examples": []
    },
    {
      "name": "ResponseReasoningSummaryPartDoneEvent",
      "type": "object",
      "description": "Emitted when a reasoning summary part is completed.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the event. Always `response.reasoning_summary_part.done`.\n",
          "enum": [
            "response.reasoning_summary_part.done"
          ],
          "x-stainless-const": true
        },
        "item_id": {
          "type": "string",
          "description": "The ID of the item this summary part is associated with.\n"
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item this summary part is associated with.\n"
        },
        "summary_index": {
          "type": "integer",
          "description": "The index of the summary part within the reasoning summary.\n"
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number of this event.\n"
        },
        "part": {
          "type": "object",
          "description": "The completed summary part.\n",
          "properties": {
            "type": {
              "type": "string",
              "description": "The type of the summary part. Always `summary_text`.",
              "enum": [
                "summary_text"
              ],
              "x-stainless-const": true
            },
            "text": {
              "type": "string",
              "description": "The text of the summary part."
            }
          },
          "required": [
            "type",
            "text"
          ]
        }
      },
      "required": [
        "type",
        "item_id",
        "output_index",
        "summary_index",
        "part",
        "sequence_number"
      ],
      "examples": []
    },
    {
      "name": "ResponseReasoningSummaryTextDeltaEvent",
      "type": "object",
      "description": "Emitted when a delta is added to a reasoning summary text.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the event. Always `response.reasoning_summary_text.delta`.\n",
          "enum": [
            "response.reasoning_summary_text.delta"
          ],
          "x-stainless-const": true
        },
        "item_id": {
          "type": "string",
          "description": "The ID of the item this summary text delta is associated with.\n"
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item this summary text delta is associated with.\n"
        },
        "summary_index": {
          "type": "integer",
          "description": "The index of the summary part within the reasoning summary.\n"
        },
        "delta": {
          "type": "string",
          "description": "The text delta that was added to the summary.\n"
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number of this event.\n"
        }
      },
      "required": [
        "type",
        "item_id",
        "output_index",
        "summary_index",
        "delta",
        "sequence_number"
      ],
      "examples": []
    },
    {
      "name": "ResponseReasoningSummaryTextDoneEvent",
      "type": "object",
      "description": "Emitted when a reasoning summary text is completed.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the event. Always `response.reasoning_summary_text.done`.\n",
          "enum": [
            "response.reasoning_summary_text.done"
          ],
          "x-stainless-const": true
        },
        "item_id": {
          "type": "string",
          "description": "The ID of the item this summary text is associated with.\n"
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item this summary text is associated with.\n"
        },
        "summary_index": {
          "type": "integer",
          "description": "The index of the summary part within the reasoning summary.\n"
        },
        "text": {
          "type": "string",
          "description": "The full text of the completed reasoning summary.\n"
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number of this event.\n"
        }
      },
      "required": [
        "type",
        "item_id",
        "output_index",
        "summary_index",
        "text",
        "sequence_number"
      ],
      "examples": []
    },
    {
      "name": "ResponseReasoningTextDeltaEvent",
      "type": "object",
      "description": "Emitted when a delta is added to a reasoning text.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the event. Always `response.reasoning_text.delta`.\n",
          "enum": [
            "response.reasoning_text.delta"
          ],
          "x-stainless-const": true
        },
        "item_id": {
          "type": "string",
          "description": "The ID of the item this reasoning text delta is associated with.\n"
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item this reasoning text delta is associated with.\n"
        },
        "content_index": {
          "type": "integer",
          "description": "The index of the reasoning content part this delta is associated with.\n"
        },
        "delta": {
          "type": "string",
          "description": "The text delta that was added to the reasoning content.\n"
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number of this event.\n"
        }
      },
      "required": [
        "type",
        "item_id",
        "output_index",
        "content_index",
        "delta",
        "sequence_number"
      ],
      "examples": []
    },
    {
      "name": "ResponseReasoningTextDoneEvent",
      "type": "object",
      "description": "Emitted when a reasoning text is completed.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the event. Always `response.reasoning_text.done`.\n",
          "enum": [
            "response.reasoning_text.done"
          ],
          "x-stainless-const": true
        },
        "item_id": {
          "type": "string",
          "description": "The ID of the item this reasoning text is associated with.\n"
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item this reasoning text is associated with.\n"
        },
        "content_index": {
          "type": "integer",
          "description": "The index of the reasoning content part.\n"
        },
        "text": {
          "type": "string",
          "description": "The full text of the completed reasoning content.\n"
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number of this event.\n"
        }
      },
      "required": [
        "type",
        "item_id",
        "output_index",
        "content_index",
        "text",
        "sequence_number"
      ],
      "examples": []
    },
    {
      "name": "ResponseRefusalDeltaEvent",
      "type": "object",
      "description": "Emitted when there is a partial refusal text.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the event. Always `response.refusal.delta`.\n",
          "enum": [
            "response.refusal.delta"
          ],
          "x-stainless-const": true
        },
        "item_id": {
          "type": "string",
          "description": "The ID of the output item that the refusal text is added to.\n"
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item that the refusal text is added to.\n"
        },
        "content_index": {
          "type": "integer",
          "description": "The index of the content part that the refusal text is added to.\n"
        },
        "delta": {
          "type": "string",
          "description": "The refusal text that is added.\n"
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number of this event.\n"
        }
      },
      "required": [
        "type",
        "item_id",
        "output_index",
        "content_index",
        "delta",
        "sequence_number"
      ],
      "examples": []
    },
    {
      "name": "ResponseRefusalDoneEvent",
      "type": "object",
      "description": "Emitted when refusal text is finalized.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the event. Always `response.refusal.done`.\n",
          "enum": [
            "response.refusal.done"
          ],
          "x-stainless-const": true
        },
        "item_id": {
          "type": "string",
          "description": "The ID of the output item that the refusal text is finalized.\n"
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item that the refusal text is finalized.\n"
        },
        "content_index": {
          "type": "integer",
          "description": "The index of the content part that the refusal text is finalized.\n"
        },
        "refusal": {
          "type": "string",
          "description": "The refusal text that is finalized.\n"
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number of this event.\n"
        }
      },
      "required": [
        "type",
        "item_id",
        "output_index",
        "content_index",
        "refusal",
        "sequence_number"
      ],
      "examples": []
    },
    {
      "name": "ResponseStreamEvent",
      "type": "object",
      "description": "",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "ResponseStreamOptions",
      "type": "object",
      "description": "Options for streaming responses. Only set this when you set `stream: true`.\n",
      "properties": {
        "include_obfuscation": {
          "type": "boolean",
          "description": "When true, stream obfuscation will be enabled. Stream obfuscation adds\nrandom characters to an `obfuscation` field on streaming delta events to\nnormalize payload sizes as a mitigation to certain side-channel attacks.\nThese obfuscation fields are included by default, but add a small amount\nof overhead to the data stream. You can set `include_obfuscation` to\nfalse to optimize for bandwidth if you trust the network links between\nyour application and the OpenAI API.\n"
        }
      },
      "required": [],
      "examples": []
    },
    {
      "name": "ResponseTextDeltaEvent",
      "type": "object",
      "description": "Emitted when there is an additional text delta.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the event. Always `response.output_text.delta`.\n",
          "enum": [
            "response.output_text.delta"
          ],
          "x-stainless-const": true
        },
        "item_id": {
          "type": "string",
          "description": "The ID of the output item that the text delta was added to.\n"
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item that the text delta was added to.\n"
        },
        "content_index": {
          "type": "integer",
          "description": "The index of the content part that the text delta was added to.\n"
        },
        "delta": {
          "type": "string",
          "description": "The text delta that was added.\n"
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number for this event."
        },
        "logprobs": {
          "type": "array",
          "description": "The log probabilities of the tokens in the delta.\n",
          "items": {
            "$ref": "#/components/schemas/ResponseLogProb"
          }
        }
      },
      "required": [
        "type",
        "item_id",
        "output_index",
        "content_index",
        "delta",
        "sequence_number",
        "logprobs"
      ],
      "examples": []
    },
    {
      "name": "ResponseTextDoneEvent",
      "type": "object",
      "description": "Emitted when text content is finalized.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the event. Always `response.output_text.done`.\n",
          "enum": [
            "response.output_text.done"
          ],
          "x-stainless-const": true
        },
        "item_id": {
          "type": "string",
          "description": "The ID of the output item that the text content is finalized.\n"
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item that the text content is finalized.\n"
        },
        "content_index": {
          "type": "integer",
          "description": "The index of the content part that the text content is finalized.\n"
        },
        "text": {
          "type": "string",
          "description": "The text content that is finalized.\n"
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number for this event."
        },
        "logprobs": {
          "type": "array",
          "description": "The log probabilities of the tokens in the delta.\n",
          "items": {
            "$ref": "#/components/schemas/ResponseLogProb"
          }
        }
      },
      "required": [
        "type",
        "item_id",
        "output_index",
        "content_index",
        "text",
        "sequence_number",
        "logprobs"
      ],
      "examples": []
    },
    {
      "name": "ResponseUsage",
      "type": "object",
      "description": "Represents token usage details including input tokens, output tokens,\na breakdown of output tokens, and the total tokens used.\n",
      "properties": {
        "input_tokens": {
          "type": "integer",
          "description": "The number of input tokens."
        },
        "input_tokens_details": {
          "type": "object",
          "description": "A detailed breakdown of the input tokens.",
          "properties": {
            "cached_tokens": {
              "type": "integer",
              "description": "The number of tokens that were retrieved from the cache. \n[More on prompt caching](https://platform.openai.com/docs/guides/prompt-caching).\n"
            }
          },
          "required": [
            "cached_tokens"
          ]
        },
        "output_tokens": {
          "type": "integer",
          "description": "The number of output tokens."
        },
        "output_tokens_details": {
          "type": "object",
          "description": "A detailed breakdown of the output tokens.",
          "properties": {
            "reasoning_tokens": {
              "type": "integer",
              "description": "The number of reasoning tokens."
            }
          },
          "required": [
            "reasoning_tokens"
          ]
        },
        "total_tokens": {
          "type": "integer",
          "description": "The total number of tokens used."
        }
      },
      "required": [
        "input_tokens",
        "input_tokens_details",
        "output_tokens",
        "output_tokens_details",
        "total_tokens"
      ],
      "examples": []
    },
    {
      "name": "ResponseWebSearchCallCompletedEvent",
      "type": "object",
      "description": "Emitted when a web search call is completed.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the event. Always `response.web_search_call.completed`.\n",
          "enum": [
            "response.web_search_call.completed"
          ],
          "x-stainless-const": true
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item that the web search call is associated with.\n"
        },
        "item_id": {
          "type": "string",
          "description": "Unique ID for the output item associated with the web search call.\n"
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number of the web search call being processed."
        }
      },
      "required": [
        "type",
        "output_index",
        "item_id",
        "sequence_number"
      ],
      "examples": []
    },
    {
      "name": "ResponseWebSearchCallInProgressEvent",
      "type": "object",
      "description": "Emitted when a web search call is initiated.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the event. Always `response.web_search_call.in_progress`.\n",
          "enum": [
            "response.web_search_call.in_progress"
          ],
          "x-stainless-const": true
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item that the web search call is associated with.\n"
        },
        "item_id": {
          "type": "string",
          "description": "Unique ID for the output item associated with the web search call.\n"
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number of the web search call being processed."
        }
      },
      "required": [
        "type",
        "output_index",
        "item_id",
        "sequence_number"
      ],
      "examples": []
    },
    {
      "name": "ResponseWebSearchCallSearchingEvent",
      "type": "object",
      "description": "Emitted when a web search call is executing.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the event. Always `response.web_search_call.searching`.\n",
          "enum": [
            "response.web_search_call.searching"
          ],
          "x-stainless-const": true
        },
        "output_index": {
          "type": "integer",
          "description": "The index of the output item that the web search call is associated with.\n"
        },
        "item_id": {
          "type": "string",
          "description": "Unique ID for the output item associated with the web search call.\n"
        },
        "sequence_number": {
          "type": "integer",
          "description": "The sequence number of the web search call being processed."
        }
      },
      "required": [
        "type",
        "output_index",
        "item_id",
        "sequence_number"
      ],
      "examples": []
    },
    {
      "name": "RunCompletionUsage",
      "type": "object",
      "description": "Usage statistics related to the run. This value will be `null` if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.).",
      "properties": {
        "completion_tokens": {
          "type": "integer",
          "description": "Number of completion tokens used over the course of the run."
        },
        "prompt_tokens": {
          "type": "integer",
          "description": "Number of prompt tokens used over the course of the run."
        },
        "total_tokens": {
          "type": "integer",
          "description": "Total number of tokens used (prompt + completion)."
        }
      },
      "required": [
        "prompt_tokens",
        "completion_tokens",
        "total_tokens"
      ],
      "examples": []
    },
    {
      "name": "RunGraderRequest",
      "type": "object",
      "description": "",
      "properties": {
        "grader": {
          "type": "object",
          "description": "The grader used for the fine-tuning job.",
          "anyOf": [
            {
              "$ref": "#/components/schemas/GraderStringCheck"
            },
            {
              "$ref": "#/components/schemas/GraderTextSimilarity"
            },
            {
              "$ref": "#/components/schemas/GraderPython"
            },
            {
              "$ref": "#/components/schemas/GraderScoreModel"
            },
            {
              "$ref": "#/components/schemas/GraderMulti"
            }
          ],
          "discriminator": {
            "propertyName": "type"
          }
        },
        "item": {
          "type": "object",
          "description": "The dataset item provided to the grader. This will be used to populate \nthe `item` namespace. See [the guide](https://platform.openai.com/docs/guides/graders) for more details. \n"
        },
        "model_sample": {
          "type": "string",
          "description": "The model sample to be evaluated. This value will be used to populate \nthe `sample` namespace. See [the guide](https://platform.openai.com/docs/guides/graders) for more details.\nThe `output_json` variable will be populated if the model sample is a \nvalid JSON string.\n \n"
        }
      },
      "required": [
        "grader",
        "model_sample"
      ],
      "examples": []
    },
    {
      "name": "RunGraderResponse",
      "type": "object",
      "description": "",
      "properties": {
        "reward": {
          "type": "number"
        },
        "metadata": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "errors": {
              "type": "object",
              "properties": {
                "formula_parse_error": {
                  "type": "boolean"
                },
                "sample_parse_error": {
                  "type": "boolean"
                },
                "truncated_observation_error": {
                  "type": "boolean"
                },
                "unresponsive_reward_error": {
                  "type": "boolean"
                },
                "invalid_variable_error": {
                  "type": "boolean"
                },
                "other_error": {
                  "type": "boolean"
                },
                "python_grader_server_error": {
                  "type": "boolean"
                },
                "python_grader_server_error_type": {
                  "type": "string",
                  "nullable": true
                },
                "python_grader_runtime_error": {
                  "type": "boolean"
                },
                "python_grader_runtime_error_details": {
                  "type": "string",
                  "nullable": true
                },
                "model_grader_server_error": {
                  "type": "boolean"
                },
                "model_grader_refusal_error": {
                  "type": "boolean"
                },
                "model_grader_parse_error": {
                  "type": "boolean"
                },
                "model_grader_server_error_details": {
                  "type": "string",
                  "nullable": true
                }
              },
              "required": [
                "formula_parse_error",
                "sample_parse_error",
                "truncated_observation_error",
                "unresponsive_reward_error",
                "invalid_variable_error",
                "other_error",
                "python_grader_server_error",
                "python_grader_server_error_type",
                "python_grader_runtime_error",
                "python_grader_runtime_error_details",
                "model_grader_server_error",
                "model_grader_refusal_error",
                "model_grader_parse_error",
                "model_grader_server_error_details"
              ]
            },
            "execution_time": {
              "type": "number"
            },
            "scores": {
              "type": "object",
              "additionalProperties": {}
            },
            "token_usage": {
              "type": "integer",
              "nullable": true
            },
            "sampled_model_name": {
              "type": "string",
              "nullable": true
            }
          },
          "required": [
            "name",
            "type",
            "errors",
            "execution_time",
            "scores",
            "token_usage",
            "sampled_model_name"
          ]
        },
        "sub_rewards": {
          "type": "object",
          "additionalProperties": {}
        },
        "model_grader_token_usage_per_model": {
          "type": "object",
          "additionalProperties": {}
        }
      },
      "required": [
        "reward",
        "metadata",
        "sub_rewards",
        "model_grader_token_usage_per_model"
      ],
      "examples": []
    },
    {
      "name": "RunObject",
      "type": "object",
      "description": "Represents an execution run on a [thread](https://platform.openai.com/docs/api-reference/threads).",
      "properties": {
        "id": {
          "description": "The identifier, which can be referenced in API endpoints.",
          "type": "string"
        },
        "object": {
          "description": "The object type, which is always `thread.run`.",
          "type": "string",
          "enum": [
            "thread.run"
          ],
          "x-stainless-const": true
        },
        "created_at": {
          "description": "The Unix timestamp (in seconds) for when the run was created.",
          "type": "integer"
        },
        "thread_id": {
          "description": "The ID of the [thread](https://platform.openai.com/docs/api-reference/threads) that was executed on as a part of this run.",
          "type": "string"
        },
        "assistant_id": {
          "description": "The ID of the [assistant](https://platform.openai.com/docs/api-reference/assistants) used for execution of this run.",
          "type": "string"
        },
        "status": {
          "$ref": "#/components/schemas/RunStatus"
        },
        "required_action": {
          "type": "object",
          "description": "Details on the action required to continue the run. Will be `null` if no action is required.",
          "nullable": true,
          "properties": {
            "type": {
              "description": "For now, this is always `submit_tool_outputs`.",
              "type": "string",
              "enum": [
                "submit_tool_outputs"
              ],
              "x-stainless-const": true
            },
            "submit_tool_outputs": {
              "type": "object",
              "description": "Details on the tool outputs needed for this run to continue.",
              "properties": {
                "tool_calls": {
                  "type": "array",
                  "description": "A list of the relevant tool calls.",
                  "items": {
                    "$ref": "#/components/schemas/RunToolCallObject"
                  }
                }
              },
              "required": [
                "tool_calls"
              ]
            }
          },
          "required": [
            "type",
            "submit_tool_outputs"
          ]
        },
        "last_error": {
          "type": "object",
          "description": "The last error associated with this run. Will be `null` if there are no errors.",
          "nullable": true,
          "properties": {
            "code": {
              "type": "string",
              "description": "One of `server_error`, `rate_limit_exceeded`, or `invalid_prompt`.",
              "enum": [
                "server_error",
                "rate_limit_exceeded",
                "invalid_prompt"
              ]
            },
            "message": {
              "type": "string",
              "description": "A human-readable description of the error."
            }
          },
          "required": [
            "code",
            "message"
          ]
        },
        "expires_at": {
          "description": "The Unix timestamp (in seconds) for when the run will expire.",
          "type": "integer",
          "nullable": true
        },
        "started_at": {
          "description": "The Unix timestamp (in seconds) for when the run was started.",
          "type": "integer",
          "nullable": true
        },
        "cancelled_at": {
          "description": "The Unix timestamp (in seconds) for when the run was cancelled.",
          "type": "integer",
          "nullable": true
        },
        "failed_at": {
          "description": "The Unix timestamp (in seconds) for when the run failed.",
          "type": "integer",
          "nullable": true
        },
        "completed_at": {
          "description": "The Unix timestamp (in seconds) for when the run was completed.",
          "type": "integer",
          "nullable": true
        },
        "incomplete_details": {
          "description": "Details on why the run is incomplete. Will be `null` if the run is not incomplete.",
          "type": "object",
          "nullable": true,
          "properties": {
            "reason": {
              "description": "The reason why the run is incomplete. This will point to which specific token limit was reached over the course of the run.",
              "type": "string",
              "enum": [
                "max_completion_tokens",
                "max_prompt_tokens"
              ]
            }
          }
        },
        "model": {
          "description": "The model that the [assistant](https://platform.openai.com/docs/api-reference/assistants) used for this run.",
          "type": "string"
        },
        "instructions": {
          "description": "The instructions that the [assistant](https://platform.openai.com/docs/api-reference/assistants) used for this run.",
          "type": "string"
        },
        "tools": {
          "description": "The list of tools that the [assistant](https://platform.openai.com/docs/api-reference/assistants) used for this run.",
          "default": [],
          "type": "array",
          "maxItems": 20,
          "items": {
            "$ref": "#/components/schemas/AssistantTool"
          }
        },
        "metadata": {
          "$ref": "#/components/schemas/Metadata"
        },
        "usage": {
          "$ref": "#/components/schemas/RunCompletionUsage"
        },
        "temperature": {
          "description": "The sampling temperature used for this run. If not set, defaults to 1.",
          "type": "number",
          "nullable": true
        },
        "top_p": {
          "description": "The nucleus sampling value used for this run. If not set, defaults to 1.",
          "type": "number",
          "nullable": true
        },
        "max_prompt_tokens": {
          "type": "integer",
          "nullable": true,
          "description": "The maximum number of prompt tokens specified to have been used over the course of the run.\n",
          "minimum": 256
        },
        "max_completion_tokens": {
          "type": "integer",
          "nullable": true,
          "description": "The maximum number of completion tokens specified to have been used over the course of the run.\n",
          "minimum": 256
        },
        "truncation_strategy": {
          "allOf": [
            {
              "$ref": "#/components/schemas/TruncationObject"
            },
            {
              "nullable": true
            }
          ]
        },
        "tool_choice": {
          "allOf": [
            {
              "$ref": "#/components/schemas/AssistantsApiToolChoiceOption"
            },
            {
              "nullable": true
            }
          ]
        },
        "parallel_tool_calls": {
          "$ref": "#/components/schemas/ParallelToolCalls"
        },
        "response_format": {
          "$ref": "#/components/schemas/AssistantsApiResponseFormatOption",
          "nullable": true
        }
      },
      "required": [
        "id",
        "object",
        "created_at",
        "thread_id",
        "assistant_id",
        "status",
        "required_action",
        "last_error",
        "expires_at",
        "started_at",
        "cancelled_at",
        "failed_at",
        "completed_at",
        "model",
        "instructions",
        "tools",
        "metadata",
        "usage",
        "incomplete_details",
        "max_prompt_tokens",
        "max_completion_tokens",
        "truncation_strategy",
        "tool_choice",
        "parallel_tool_calls",
        "response_format"
      ],
      "examples": []
    },
    {
      "name": "RunStepCompletionUsage",
      "type": "object",
      "description": "Usage statistics related to the run step. This value will be `null` while the run step's status is `in_progress`.",
      "properties": {
        "completion_tokens": {
          "type": "integer",
          "description": "Number of completion tokens used over the course of the run step."
        },
        "prompt_tokens": {
          "type": "integer",
          "description": "Number of prompt tokens used over the course of the run step."
        },
        "total_tokens": {
          "type": "integer",
          "description": "Total number of tokens used (prompt + completion)."
        }
      },
      "required": [
        "prompt_tokens",
        "completion_tokens",
        "total_tokens"
      ],
      "examples": []
    },
    {
      "name": "RunStepDeltaObject",
      "type": "object",
      "description": "Represents a run step delta i.e. any changed fields on a run step during streaming.\n",
      "properties": {
        "id": {
          "description": "The identifier of the run step, which can be referenced in API endpoints.",
          "type": "string"
        },
        "object": {
          "description": "The object type, which is always `thread.run.step.delta`.",
          "type": "string",
          "enum": [
            "thread.run.step.delta"
          ],
          "x-stainless-const": true
        },
        "delta": {
          "$ref": "#/components/schemas/RunStepDeltaObjectDelta"
        }
      },
      "required": [
        "id",
        "object",
        "delta"
      ],
      "examples": []
    },
    {
      "name": "RunStepDeltaStepDetailsMessageCreationObject",
      "type": "object",
      "description": "Details of the message creation by the run step.",
      "properties": {
        "type": {
          "description": "Always `message_creation`.",
          "type": "string",
          "enum": [
            "message_creation"
          ],
          "x-stainless-const": true
        },
        "message_creation": {
          "type": "object",
          "properties": {
            "message_id": {
              "type": "string",
              "description": "The ID of the message that was created by this run step."
            }
          }
        }
      },
      "required": [
        "type"
      ],
      "examples": []
    },
    {
      "name": "RunStepDeltaStepDetailsToolCallsCodeObject",
      "type": "object",
      "description": "Details of the Code Interpreter tool call the run step was involved in.",
      "properties": {
        "index": {
          "type": "integer",
          "description": "The index of the tool call in the tool calls array."
        },
        "id": {
          "type": "string",
          "description": "The ID of the tool call."
        },
        "type": {
          "type": "string",
          "description": "The type of tool call. This is always going to be `code_interpreter` for this type of tool call.",
          "enum": [
            "code_interpreter"
          ],
          "x-stainless-const": true
        },
        "code_interpreter": {
          "type": "object",
          "description": "The Code Interpreter tool call definition.",
          "properties": {
            "input": {
              "type": "string",
              "description": "The input to the Code Interpreter tool call."
            },
            "outputs": {
              "type": "array",
              "description": "The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type.",
              "items": {
                "type": "object",
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject"
                  },
                  {
                    "$ref": "#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeOutputImageObject"
                  }
                ],
                "discriminator": {
                  "propertyName": "type"
                }
              }
            }
          }
        }
      },
      "required": [
        "index",
        "type"
      ],
      "examples": []
    },
    {
      "name": "RunStepDeltaStepDetailsToolCallsCodeOutputImageObject",
      "type": "object",
      "description": "",
      "properties": {
        "index": {
          "type": "integer",
          "description": "The index of the output in the outputs array."
        },
        "type": {
          "description": "Always `image`.",
          "type": "string",
          "enum": [
            "image"
          ],
          "x-stainless-const": true
        },
        "image": {
          "type": "object",
          "properties": {
            "file_id": {
              "description": "The [file](https://platform.openai.com/docs/api-reference/files) ID of the image.",
              "type": "string"
            }
          }
        }
      },
      "required": [
        "index",
        "type"
      ],
      "examples": []
    },
    {
      "name": "RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject",
      "type": "object",
      "description": "Text output from the Code Interpreter tool call as part of a run step.",
      "properties": {
        "index": {
          "type": "integer",
          "description": "The index of the output in the outputs array."
        },
        "type": {
          "description": "Always `logs`.",
          "type": "string",
          "enum": [
            "logs"
          ],
          "x-stainless-const": true
        },
        "logs": {
          "type": "string",
          "description": "The text output from the Code Interpreter tool call."
        }
      },
      "required": [
        "index",
        "type"
      ],
      "examples": []
    },
    {
      "name": "RunStepDeltaStepDetailsToolCallsFileSearchObject",
      "type": "object",
      "description": "",
      "properties": {
        "index": {
          "type": "integer",
          "description": "The index of the tool call in the tool calls array."
        },
        "id": {
          "type": "string",
          "description": "The ID of the tool call object."
        },
        "type": {
          "type": "string",
          "description": "The type of tool call. This is always going to be `file_search` for this type of tool call.",
          "enum": [
            "file_search"
          ],
          "x-stainless-const": true
        },
        "file_search": {
          "type": "object",
          "description": "For now, this is always going to be an empty object.",
          "x-oaiTypeLabel": "map"
        }
      },
      "required": [
        "index",
        "type",
        "file_search"
      ],
      "examples": []
    },
    {
      "name": "RunStepDeltaStepDetailsToolCallsFunctionObject",
      "type": "object",
      "description": "",
      "properties": {
        "index": {
          "type": "integer",
          "description": "The index of the tool call in the tool calls array."
        },
        "id": {
          "type": "string",
          "description": "The ID of the tool call object."
        },
        "type": {
          "type": "string",
          "description": "The type of tool call. This is always going to be `function` for this type of tool call.",
          "enum": [
            "function"
          ],
          "x-stainless-const": true
        },
        "function": {
          "type": "object",
          "description": "The definition of the function that was called.",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the function."
            },
            "arguments": {
              "type": "string",
              "description": "The arguments passed to the function."
            },
            "output": {
              "type": "string",
              "description": "The output of the function. This will be `null` if the outputs have not been [submitted](https://platform.openai.com/docs/api-reference/runs/submitToolOutputs) yet.",
              "nullable": true
            }
          }
        }
      },
      "required": [
        "index",
        "type"
      ],
      "examples": []
    },
    {
      "name": "RunStepDeltaStepDetailsToolCallsObject",
      "type": "object",
      "description": "Details of the tool call.",
      "properties": {
        "type": {
          "description": "Always `tool_calls`.",
          "type": "string",
          "enum": [
            "tool_calls"
          ],
          "x-stainless-const": true
        },
        "tool_calls": {
          "type": "array",
          "description": "An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `file_search`, or `function`.\n",
          "items": {
            "$ref": "#/components/schemas/RunStepDeltaStepDetailsToolCall"
          }
        }
      },
      "required": [
        "type"
      ],
      "examples": []
    },
    {
      "name": "RunStepDetailsMessageCreationObject",
      "type": "object",
      "description": "Details of the message creation by the run step.",
      "properties": {
        "type": {
          "description": "Always `message_creation`.",
          "type": "string",
          "enum": [
            "message_creation"
          ],
          "x-stainless-const": true
        },
        "message_creation": {
          "type": "object",
          "properties": {
            "message_id": {
              "type": "string",
              "description": "The ID of the message that was created by this run step."
            }
          },
          "required": [
            "message_id"
          ]
        }
      },
      "required": [
        "type",
        "message_creation"
      ],
      "examples": []
    },
    {
      "name": "RunStepDetailsToolCallsCodeObject",
      "type": "object",
      "description": "Details of the Code Interpreter tool call the run step was involved in.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the tool call."
        },
        "type": {
          "type": "string",
          "description": "The type of tool call. This is always going to be `code_interpreter` for this type of tool call.",
          "enum": [
            "code_interpreter"
          ],
          "x-stainless-const": true
        },
        "code_interpreter": {
          "type": "object",
          "description": "The Code Interpreter tool call definition.",
          "required": [
            "input",
            "outputs"
          ],
          "properties": {
            "input": {
              "type": "string",
              "description": "The input to the Code Interpreter tool call."
            },
            "outputs": {
              "type": "array",
              "description": "The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type.",
              "items": {
                "type": "object",
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/RunStepDetailsToolCallsCodeOutputLogsObject"
                  },
                  {
                    "$ref": "#/components/schemas/RunStepDetailsToolCallsCodeOutputImageObject"
                  }
                ],
                "discriminator": {
                  "propertyName": "type"
                }
              }
            }
          }
        }
      },
      "required": [
        "id",
        "type",
        "code_interpreter"
      ],
      "examples": []
    },
    {
      "name": "RunStepDetailsToolCallsCodeOutputImageObject",
      "type": "object",
      "description": "",
      "properties": {
        "type": {
          "description": "Always `image`.",
          "type": "string",
          "enum": [
            "image"
          ],
          "x-stainless-const": true
        },
        "image": {
          "type": "object",
          "properties": {
            "file_id": {
              "description": "The [file](https://platform.openai.com/docs/api-reference/files) ID of the image.",
              "type": "string"
            }
          },
          "required": [
            "file_id"
          ]
        }
      },
      "required": [
        "type",
        "image"
      ],
      "examples": []
    },
    {
      "name": "RunStepDetailsToolCallsCodeOutputLogsObject",
      "type": "object",
      "description": "Text output from the Code Interpreter tool call as part of a run step.",
      "properties": {
        "type": {
          "description": "Always `logs`.",
          "type": "string",
          "enum": [
            "logs"
          ],
          "x-stainless-const": true
        },
        "logs": {
          "type": "string",
          "description": "The text output from the Code Interpreter tool call."
        }
      },
      "required": [
        "type",
        "logs"
      ],
      "examples": []
    },
    {
      "name": "RunStepDetailsToolCallsFileSearchObject",
      "type": "object",
      "description": "",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the tool call object."
        },
        "type": {
          "type": "string",
          "description": "The type of tool call. This is always going to be `file_search` for this type of tool call.",
          "enum": [
            "file_search"
          ],
          "x-stainless-const": true
        },
        "file_search": {
          "type": "object",
          "description": "For now, this is always going to be an empty object.",
          "x-oaiTypeLabel": "map",
          "properties": {
            "ranking_options": {
              "$ref": "#/components/schemas/RunStepDetailsToolCallsFileSearchRankingOptionsObject"
            },
            "results": {
              "type": "array",
              "description": "The results of the file search.",
              "items": {
                "$ref": "#/components/schemas/RunStepDetailsToolCallsFileSearchResultObject"
              }
            }
          }
        }
      },
      "required": [
        "id",
        "type",
        "file_search"
      ],
      "examples": []
    },
    {
      "name": "RunStepDetailsToolCallsFileSearchRankingOptionsObject",
      "type": "object",
      "description": "The ranking options for the file search.",
      "properties": {
        "ranker": {
          "$ref": "#/components/schemas/FileSearchRanker"
        },
        "score_threshold": {
          "type": "number",
          "description": "The score threshold for the file search. All values must be a floating point number between 0 and 1.",
          "minimum": 0,
          "maximum": 1
        }
      },
      "required": [
        "ranker",
        "score_threshold"
      ],
      "examples": []
    },
    {
      "name": "RunStepDetailsToolCallsFileSearchResultObject",
      "type": "object",
      "description": "A result instance of the file search.",
      "properties": {
        "file_id": {
          "type": "string",
          "description": "The ID of the file that result was found in."
        },
        "file_name": {
          "type": "string",
          "description": "The name of the file that result was found in."
        },
        "score": {
          "type": "number",
          "description": "The score of the result. All values must be a floating point number between 0 and 1.",
          "minimum": 0,
          "maximum": 1
        },
        "content": {
          "type": "array",
          "description": "The content of the result that was found. The content is only included if requested via the include query parameter.",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "The type of the content.",
                "enum": [
                  "text"
                ],
                "x-stainless-const": true
              },
              "text": {
                "type": "string",
                "description": "The text content of the file."
              }
            }
          }
        }
      },
      "required": [
        "file_id",
        "file_name",
        "score"
      ],
      "examples": []
    },
    {
      "name": "RunStepDetailsToolCallsFunctionObject",
      "type": "object",
      "description": "",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the tool call object."
        },
        "type": {
          "type": "string",
          "description": "The type of tool call. This is always going to be `function` for this type of tool call.",
          "enum": [
            "function"
          ],
          "x-stainless-const": true
        },
        "function": {
          "type": "object",
          "description": "The definition of the function that was called.",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the function."
            },
            "arguments": {
              "type": "string",
              "description": "The arguments passed to the function."
            },
            "output": {
              "type": "string",
              "description": "The output of the function. This will be `null` if the outputs have not been [submitted](https://platform.openai.com/docs/api-reference/runs/submitToolOutputs) yet.",
              "nullable": true
            }
          },
          "required": [
            "name",
            "arguments",
            "output"
          ]
        }
      },
      "required": [
        "id",
        "type",
        "function"
      ],
      "examples": []
    },
    {
      "name": "RunStepDetailsToolCallsObject",
      "type": "object",
      "description": "Details of the tool call.",
      "properties": {
        "type": {
          "description": "Always `tool_calls`.",
          "type": "string",
          "enum": [
            "tool_calls"
          ],
          "x-stainless-const": true
        },
        "tool_calls": {
          "type": "array",
          "description": "An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `file_search`, or `function`.\n",
          "items": {
            "$ref": "#/components/schemas/RunStepDetailsToolCall"
          }
        }
      },
      "required": [
        "type",
        "tool_calls"
      ],
      "examples": []
    },
    {
      "name": "RunStepObject",
      "type": "object",
      "description": "Represents a step in execution of a run.\n",
      "properties": {
        "id": {
          "description": "The identifier of the run step, which can be referenced in API endpoints.",
          "type": "string"
        },
        "object": {
          "description": "The object type, which is always `thread.run.step`.",
          "type": "string",
          "enum": [
            "thread.run.step"
          ],
          "x-stainless-const": true
        },
        "created_at": {
          "description": "The Unix timestamp (in seconds) for when the run step was created.",
          "type": "integer"
        },
        "assistant_id": {
          "description": "The ID of the [assistant](https://platform.openai.com/docs/api-reference/assistants) associated with the run step.",
          "type": "string"
        },
        "thread_id": {
          "description": "The ID of the [thread](https://platform.openai.com/docs/api-reference/threads) that was run.",
          "type": "string"
        },
        "run_id": {
          "description": "The ID of the [run](https://platform.openai.com/docs/api-reference/runs) that this run step is a part of.",
          "type": "string"
        },
        "type": {
          "description": "The type of run step, which can be either `message_creation` or `tool_calls`.",
          "type": "string",
          "enum": [
            "message_creation",
            "tool_calls"
          ]
        },
        "status": {
          "description": "The status of the run step, which can be either `in_progress`, `cancelled`, `failed`, `completed`, or `expired`.",
          "type": "string",
          "enum": [
            "in_progress",
            "cancelled",
            "failed",
            "completed",
            "expired"
          ]
        },
        "step_details": {
          "type": "object",
          "description": "The details of the run step.",
          "anyOf": [
            {
              "$ref": "#/components/schemas/RunStepDetailsMessageCreationObject"
            },
            {
              "$ref": "#/components/schemas/RunStepDetailsToolCallsObject"
            }
          ],
          "discriminator": {
            "propertyName": "type"
          }
        },
        "last_error": {
          "type": "object",
          "description": "The last error associated with this run step. Will be `null` if there are no errors.",
          "nullable": true,
          "properties": {
            "code": {
              "type": "string",
              "description": "One of `server_error` or `rate_limit_exceeded`.",
              "enum": [
                "server_error",
                "rate_limit_exceeded"
              ]
            },
            "message": {
              "type": "string",
              "description": "A human-readable description of the error."
            }
          },
          "required": [
            "code",
            "message"
          ]
        },
        "expired_at": {
          "description": "The Unix timestamp (in seconds) for when the run step expired. A step is considered expired if the parent run is expired.",
          "type": "integer",
          "nullable": true
        },
        "cancelled_at": {
          "description": "The Unix timestamp (in seconds) for when the run step was cancelled.",
          "type": "integer",
          "nullable": true
        },
        "failed_at": {
          "description": "The Unix timestamp (in seconds) for when the run step failed.",
          "type": "integer",
          "nullable": true
        },
        "completed_at": {
          "description": "The Unix timestamp (in seconds) for when the run step completed.",
          "type": "integer",
          "nullable": true
        },
        "metadata": {
          "$ref": "#/components/schemas/Metadata"
        },
        "usage": {
          "$ref": "#/components/schemas/RunStepCompletionUsage"
        }
      },
      "required": [
        "id",
        "object",
        "created_at",
        "assistant_id",
        "thread_id",
        "run_id",
        "type",
        "status",
        "step_details",
        "last_error",
        "expired_at",
        "cancelled_at",
        "failed_at",
        "completed_at",
        "metadata",
        "usage"
      ],
      "examples": []
    },
    {
      "name": "RunStepStreamEvent",
      "type": "object",
      "description": "",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "RunStreamEvent",
      "type": "object",
      "description": "",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "RunToolCallObject",
      "type": "object",
      "description": "Tool call objects",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the tool call. This ID must be referenced when you submit the tool outputs in using the [Submit tool outputs to run](https://platform.openai.com/docs/api-reference/runs/submitToolOutputs) endpoint."
        },
        "type": {
          "type": "string",
          "description": "The type of tool call the output is required for. For now, this is always `function`.",
          "enum": [
            "function"
          ],
          "x-stainless-const": true
        },
        "function": {
          "type": "object",
          "description": "The function definition.",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the function."
            },
            "arguments": {
              "type": "string",
              "description": "The arguments that the model expects you to pass to the function."
            }
          },
          "required": [
            "name",
            "arguments"
          ]
        }
      },
      "required": [
        "id",
        "type",
        "function"
      ],
      "examples": []
    },
    {
      "name": "Screenshot",
      "type": "object",
      "description": "A screenshot action.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "screenshot"
          ],
          "default": "screenshot",
          "description": "Specifies the event type. For a screenshot action, this property is \nalways set to `screenshot`.\n",
          "x-stainless-const": true
        }
      },
      "required": [
        "type"
      ],
      "examples": []
    },
    {
      "name": "Scroll",
      "type": "object",
      "description": "A scroll action.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "scroll"
          ],
          "default": "scroll",
          "description": "Specifies the event type. For a scroll action, this property is \nalways set to `scroll`.\n",
          "x-stainless-const": true
        },
        "x": {
          "type": "integer",
          "description": "The x-coordinate where the scroll occurred.\n"
        },
        "y": {
          "type": "integer",
          "description": "The y-coordinate where the scroll occurred.\n"
        },
        "scroll_x": {
          "type": "integer",
          "description": "The horizontal scroll distance.\n"
        },
        "scroll_y": {
          "type": "integer",
          "description": "The vertical scroll distance.\n"
        }
      },
      "required": [
        "type",
        "x",
        "y",
        "scroll_x",
        "scroll_y"
      ],
      "examples": []
    },
    {
      "name": "ServiceTier",
      "type": "string",
      "description": "Specifies the processing type used for serving the request.\n  - If set to 'auto', then the request will be processed with the service tier configured in the Project settings. Unless otherwise configured, the Project will use 'default'.\n  - If set to 'default', then the request will be processed with the standard pricing and performance for the selected model.\n  - If set to '[flex](https://platform.openai.com/docs/guides/flex-processing)' or '[priority](https://openai.com/api-priority-processing/)', then the request will be processed with the corresponding service tier.\n  - When not set, the default behavior is 'auto'.\n\n  When the `service_tier` parameter is set, the response body will include the `service_tier` value based on the processing mode actually used to serve the request. This response value may be different from the value set in the parameter.\n",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "SpeechAudioDeltaEvent",
      "type": "object",
      "description": "Emitted for each chunk of audio data generated during speech synthesis.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the event. Always `speech.audio.delta`.\n",
          "enum": [
            "speech.audio.delta"
          ],
          "x-stainless-const": true
        },
        "audio": {
          "type": "string",
          "description": "A chunk of Base64-encoded audio data.\n"
        }
      },
      "required": [
        "type",
        "audio"
      ],
      "examples": []
    },
    {
      "name": "SpeechAudioDoneEvent",
      "type": "object",
      "description": "Emitted when the speech synthesis is complete and all audio has been streamed.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the event. Always `speech.audio.done`.\n",
          "enum": [
            "speech.audio.done"
          ],
          "x-stainless-const": true
        },
        "usage": {
          "type": "object",
          "description": "Token usage statistics for the request.\n",
          "properties": {
            "input_tokens": {
              "type": "integer",
              "description": "Number of input tokens in the prompt."
            },
            "output_tokens": {
              "type": "integer",
              "description": "Number of output tokens generated."
            },
            "total_tokens": {
              "type": "integer",
              "description": "Total number of tokens used (input + output)."
            }
          },
          "required": [
            "input_tokens",
            "output_tokens",
            "total_tokens"
          ]
        }
      },
      "required": [
        "type",
        "usage"
      ],
      "examples": []
    },
    {
      "name": "StaticChunkingStrategy",
      "type": "object",
      "description": "",
      "properties": {
        "max_chunk_size_tokens": {
          "type": "integer",
          "minimum": 100,
          "maximum": 4096,
          "description": "The maximum number of tokens in each chunk. The default value is `800`. The minimum value is `100` and the maximum value is `4096`."
        },
        "chunk_overlap_tokens": {
          "type": "integer",
          "description": "The number of tokens that overlap between chunks. The default value is `400`.\n\nNote that the overlap must not exceed half of `max_chunk_size_tokens`.\n"
        }
      },
      "required": [
        "max_chunk_size_tokens",
        "chunk_overlap_tokens"
      ],
      "examples": []
    },
    {
      "name": "StaticChunkingStrategyRequestParam",
      "type": "object",
      "description": "Customize your own chunking strategy by setting chunk size and chunk overlap.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Always `static`.",
          "enum": [
            "static"
          ],
          "x-stainless-const": true
        },
        "static": {
          "$ref": "#/components/schemas/StaticChunkingStrategy"
        }
      },
      "required": [
        "type",
        "static"
      ],
      "examples": []
    },
    {
      "name": "StaticChunkingStrategyResponseParam",
      "type": "object",
      "description": "",
      "properties": {
        "type": {
          "type": "string",
          "description": "Always `static`.",
          "enum": [
            "static"
          ],
          "x-stainless-const": true
        },
        "static": {
          "$ref": "#/components/schemas/StaticChunkingStrategy"
        }
      },
      "required": [
        "type",
        "static"
      ],
      "examples": []
    },
    {
      "name": "StopConfiguration",
      "type": "object",
      "description": "Not supported with latest reasoning models `o3` and `o4-mini`.\n\nUp to 4 sequences where the API will stop generating further tokens. The\nreturned text will not contain the stop sequence.\n",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "SubmitToolOutputsRunRequest",
      "type": "object",
      "description": "",
      "properties": {
        "tool_outputs": {
          "description": "A list of tools for which the outputs are being submitted.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "tool_call_id": {
                "type": "string",
                "description": "The ID of the tool call in the `required_action` object within the run object the output is being submitted for."
              },
              "output": {
                "type": "string",
                "description": "The output of the tool call to be submitted to continue the run."
              }
            }
          }
        },
        "stream": {
          "type": "boolean",
          "nullable": true,
          "description": "If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.\n"
        }
      },
      "required": [
        "tool_outputs"
      ],
      "examples": []
    },
    {
      "name": "TextResponseFormatConfiguration",
      "type": "object",
      "description": "An object specifying the format that the model must output.\n\nConfiguring `{ \"type\": \"json_schema\" }` enables Structured Outputs, \nwhich ensures the model will match your supplied JSON schema. Learn more in the \n[Structured Outputs guide](https://platform.openai.com/docs/guides/structured-outputs).\n\nThe default format is `{ \"type\": \"text\" }` with no additional options.\n\n**Not recommended for gpt-4o and newer models:**\n\nSetting to `{ \"type\": \"json_object\" }` enables the older JSON mode, which\nensures the message the model generates is valid JSON. Using `json_schema`\nis preferred for models that support it.\n",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "TextResponseFormatJsonSchema",
      "type": "object",
      "description": "JSON Schema response format. Used to generate structured JSON responses.\nLearn more about [Structured Outputs](https://platform.openai.com/docs/guides/structured-outputs).\n",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of response format being defined. Always `json_schema`.",
          "enum": [
            "json_schema"
          ],
          "x-stainless-const": true
        },
        "description": {
          "type": "string",
          "description": "A description of what the response format is for, used by the model to\ndetermine how to respond in the format.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the response format. Must be a-z, A-Z, 0-9, or contain\nunderscores and dashes, with a maximum length of 64.\n"
        },
        "schema": {
          "$ref": "#/components/schemas/ResponseFormatJsonSchemaSchema"
        },
        "strict": {
          "type": "boolean",
          "nullable": true,
          "default": false,
          "description": "Whether to enable strict schema adherence when generating the output.\nIf set to true, the model will always follow the exact schema defined\nin the `schema` field. Only a subset of JSON Schema is supported when\n`strict` is `true`. To learn more, read the [Structured Outputs\nguide](https://platform.openai.com/docs/guides/structured-outputs).\n"
        }
      },
      "required": [
        "type",
        "schema",
        "name"
      ],
      "examples": []
    },
    {
      "name": "ThreadObject",
      "type": "object",
      "description": "Represents a thread that contains [messages](https://platform.openai.com/docs/api-reference/messages).",
      "properties": {
        "id": {
          "description": "The identifier, which can be referenced in API endpoints.",
          "type": "string"
        },
        "object": {
          "description": "The object type, which is always `thread`.",
          "type": "string",
          "enum": [
            "thread"
          ],
          "x-stainless-const": true
        },
        "created_at": {
          "description": "The Unix timestamp (in seconds) for when the thread was created.",
          "type": "integer"
        },
        "tool_resources": {
          "type": "object",
          "description": "A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n",
          "properties": {
            "code_interpreter": {
              "type": "object",
              "properties": {
                "file_ids": {
                  "type": "array",
                  "description": "A list of [file](https://platform.openai.com/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.\n",
                  "default": [],
                  "maxItems": 20,
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "file_search": {
              "type": "object",
              "properties": {
                "vector_store_ids": {
                  "type": "array",
                  "description": "The [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.\n",
                  "maxItems": 1,
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "nullable": true
        },
        "metadata": {
          "$ref": "#/components/schemas/Metadata"
        }
      },
      "required": [
        "id",
        "object",
        "created_at",
        "tool_resources",
        "metadata"
      ],
      "examples": []
    },
    {
      "name": "ThreadStreamEvent",
      "type": "object",
      "description": "",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "ToggleCertificatesRequest",
      "type": "object",
      "description": "",
      "properties": {
        "certificate_ids": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "cert_abc"
          },
          "minItems": 1,
          "maxItems": 10
        }
      },
      "required": [
        "certificate_ids"
      ],
      "examples": []
    },
    {
      "name": "Tool",
      "type": "object",
      "description": "A tool that can be used to generate a response.\n",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "ToolChoiceAllowed",
      "type": "object",
      "description": "Constrains the tools available to the model to a pre-defined set.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "allowed_tools"
          ],
          "description": "Allowed tool configuration type. Always `allowed_tools`.",
          "x-stainless-const": true
        },
        "mode": {
          "type": "string",
          "enum": [
            "auto",
            "required"
          ],
          "description": "Constrains the tools available to the model to a pre-defined set.\n\n`auto` allows the model to pick from among the allowed tools and generate a\nmessage.\n\n`required` requires the model to call one or more of the allowed tools.\n"
        },
        "tools": {
          "type": "array",
          "description": "A list of tool definitions that the model should be allowed to call.\n\nFor the Responses API, the list of tool definitions might look like:\n```json\n[\n  { \"type\": \"function\", \"name\": \"get_weather\" },\n  { \"type\": \"mcp\", \"server_label\": \"deepwiki\" },\n  { \"type\": \"image_generation\" }\n]\n```\n",
          "items": {
            "type": "object",
            "description": "A tool definition that the model should be allowed to call.\n",
            "additionalProperties": true,
            "x-oaiExpandable": false
          }
        }
      },
      "required": [
        "type",
        "mode",
        "tools"
      ],
      "examples": []
    },
    {
      "name": "ToolChoiceCustom",
      "type": "object",
      "description": "Use this option to force the model to call a specific custom tool.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "custom"
          ],
          "description": "For custom tool calling, the type is always `custom`.",
          "x-stainless-const": true
        },
        "name": {
          "type": "string",
          "description": "The name of the custom tool to call."
        }
      },
      "required": [
        "type",
        "name"
      ],
      "examples": []
    },
    {
      "name": "ToolChoiceFunction",
      "type": "object",
      "description": "Use this option to force the model to call a specific function.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "function"
          ],
          "description": "For function calling, the type is always `function`.",
          "x-stainless-const": true
        },
        "name": {
          "type": "string",
          "description": "The name of the function to call."
        }
      },
      "required": [
        "type",
        "name"
      ],
      "examples": []
    },
    {
      "name": "ToolChoiceMCP",
      "type": "object",
      "description": "Use this option to force the model to call a specific tool on a remote MCP server.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "mcp"
          ],
          "description": "For MCP tools, the type is always `mcp`.",
          "x-stainless-const": true
        },
        "server_label": {
          "type": "string",
          "description": "The label of the MCP server to use.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the tool to call on the server.\n",
          "nullable": true
        }
      },
      "required": [
        "type",
        "server_label"
      ],
      "examples": []
    },
    {
      "name": "ToolChoiceOptions",
      "type": "string",
      "description": "Controls which (if any) tool is called by the model.\n\n`none` means the model will not call any tool and instead generates a message.\n\n`auto` means the model can pick between generating a message or calling one or\nmore tools.\n\n`required` means the model must call one or more tools.\n",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "ToolChoiceTypes",
      "type": "object",
      "description": "Indicates that the model should use a built-in tool to generate a response.\n[Learn more about built-in tools](https://platform.openai.com/docs/guides/tools).\n",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of hosted tool the model should to use. Learn more about\n[built-in tools](https://platform.openai.com/docs/guides/tools).\n\nAllowed values are:\n- `file_search`\n- `web_search_preview`\n- `computer_use_preview`\n- `code_interpreter`\n- `image_generation`\n",
          "enum": [
            "file_search",
            "web_search_preview",
            "computer_use_preview",
            "web_search_preview_2025_03_11",
            "image_generation",
            "code_interpreter"
          ]
        }
      },
      "required": [
        "type"
      ],
      "examples": []
    },
    {
      "name": "TranscriptTextDeltaEvent",
      "type": "object",
      "description": "Emitted when there is an additional text delta. This is also the first event emitted when the transcription starts. Only emitted when you [create a transcription](https://platform.openai.com/docs/api-reference/audio/create-transcription) with the `Stream` parameter set to `true`.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the event. Always `transcript.text.delta`.\n",
          "enum": [
            "transcript.text.delta"
          ],
          "x-stainless-const": true
        },
        "delta": {
          "type": "string",
          "description": "The text delta that was additionally transcribed.\n"
        },
        "logprobs": {
          "type": "array",
          "description": "The log probabilities of the delta. Only included if you [create a transcription](https://platform.openai.com/docs/api-reference/audio/create-transcription) with the `include[]` parameter set to `logprobs`.\n",
          "items": {
            "type": "object",
            "properties": {
              "token": {
                "type": "string",
                "description": "The token that was used to generate the log probability.\n"
              },
              "logprob": {
                "type": "number",
                "description": "The log probability of the token.\n"
              },
              "bytes": {
                "type": "array",
                "items": {
                  "type": "integer"
                },
                "description": "The bytes that were used to generate the log probability.\n"
              }
            }
          }
        }
      },
      "required": [
        "type",
        "delta"
      ],
      "examples": []
    },
    {
      "name": "TranscriptTextDoneEvent",
      "type": "object",
      "description": "Emitted when the transcription is complete. Contains the complete transcription text. Only emitted when you [create a transcription](https://platform.openai.com/docs/api-reference/audio/create-transcription) with the `Stream` parameter set to `true`.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the event. Always `transcript.text.done`.\n",
          "enum": [
            "transcript.text.done"
          ],
          "x-stainless-const": true
        },
        "text": {
          "type": "string",
          "description": "The text that was transcribed.\n"
        },
        "logprobs": {
          "type": "array",
          "description": "The log probabilities of the individual tokens in the transcription. Only included if you [create a transcription](https://platform.openai.com/docs/api-reference/audio/create-transcription) with the `include[]` parameter set to `logprobs`.\n",
          "items": {
            "type": "object",
            "properties": {
              "token": {
                "type": "string",
                "description": "The token that was used to generate the log probability.\n"
              },
              "logprob": {
                "type": "number",
                "description": "The log probability of the token.\n"
              },
              "bytes": {
                "type": "array",
                "items": {
                  "type": "integer"
                },
                "description": "The bytes that were used to generate the log probability.\n"
              }
            }
          }
        },
        "usage": {
          "$ref": "#/components/schemas/TranscriptTextUsageTokens"
        }
      },
      "required": [
        "type",
        "text"
      ],
      "examples": []
    },
    {
      "name": "TranscriptTextUsageDuration",
      "type": "object",
      "description": "Usage statistics for models billed by audio input duration.",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "duration"
          ],
          "description": "The type of the usage object. Always `duration` for this variant.",
          "x-stainless-const": true
        },
        "seconds": {
          "type": "number",
          "description": "Duration of the input audio in seconds."
        }
      },
      "required": [
        "type",
        "seconds"
      ],
      "examples": []
    },
    {
      "name": "TranscriptTextUsageTokens",
      "type": "object",
      "description": "Usage statistics for models billed by token usage.",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "tokens"
          ],
          "description": "The type of the usage object. Always `tokens` for this variant.",
          "x-stainless-const": true
        },
        "input_tokens": {
          "type": "integer",
          "description": "Number of input tokens billed for this request."
        },
        "input_token_details": {
          "type": "object",
          "description": "Details about the input tokens billed for this request.",
          "properties": {
            "text_tokens": {
              "type": "integer",
              "description": "Number of text tokens billed for this request."
            },
            "audio_tokens": {
              "type": "integer",
              "description": "Number of audio tokens billed for this request."
            }
          }
        },
        "output_tokens": {
          "type": "integer",
          "description": "Number of output tokens generated."
        },
        "total_tokens": {
          "type": "integer",
          "description": "Total number of tokens used (input + output)."
        }
      },
      "required": [
        "type",
        "input_tokens",
        "output_tokens",
        "total_tokens"
      ],
      "examples": []
    },
    {
      "name": "TranscriptionChunkingStrategy",
      "type": "object",
      "description": "Controls how the audio is cut into chunks. When set to `\"auto\"`, the server first normalizes loudness and then uses voice activity detection (VAD) to choose boundaries. `server_vad` object can be provided to tweak VAD detection parameters manually. If unset, the audio is transcribed as a single block. ",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "TranscriptionInclude",
      "type": "string",
      "description": "",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "TranscriptionSegment",
      "type": "object",
      "description": "",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique identifier of the segment."
        },
        "seek": {
          "type": "integer",
          "description": "Seek offset of the segment."
        },
        "start": {
          "type": "number",
          "format": "float",
          "description": "Start time of the segment in seconds."
        },
        "end": {
          "type": "number",
          "format": "float",
          "description": "End time of the segment in seconds."
        },
        "text": {
          "type": "string",
          "description": "Text content of the segment."
        },
        "tokens": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "Array of token IDs for the text content."
        },
        "temperature": {
          "type": "number",
          "format": "float",
          "description": "Temperature parameter used for generating the segment."
        },
        "avg_logprob": {
          "type": "number",
          "format": "float",
          "description": "Average logprob of the segment. If the value is lower than -1, consider the logprobs failed."
        },
        "compression_ratio": {
          "type": "number",
          "format": "float",
          "description": "Compression ratio of the segment. If the value is greater than 2.4, consider the compression failed."
        },
        "no_speech_prob": {
          "type": "number",
          "format": "float",
          "description": "Probability of no speech in the segment. If the value is higher than 1.0 and the `avg_logprob` is below -1, consider this segment silent."
        }
      },
      "required": [
        "id",
        "seek",
        "start",
        "end",
        "text",
        "tokens",
        "temperature",
        "avg_logprob",
        "compression_ratio",
        "no_speech_prob"
      ],
      "examples": []
    },
    {
      "name": "TranscriptionWord",
      "type": "object",
      "description": "",
      "properties": {
        "word": {
          "type": "string",
          "description": "The text content of the word."
        },
        "start": {
          "type": "number",
          "format": "float",
          "description": "Start time of the word in seconds."
        },
        "end": {
          "type": "number",
          "format": "float",
          "description": "End time of the word in seconds."
        }
      },
      "required": [
        "word",
        "start",
        "end"
      ],
      "examples": []
    },
    {
      "name": "TruncationObject",
      "type": "object",
      "description": "Controls for how a thread will be truncated prior to the run. Use this to control the initial context window of the run.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The truncation strategy to use for the thread. The default is `auto`. If set to `last_messages`, the thread will be truncated to the n most recent messages in the thread. When set to `auto`, messages in the middle of the thread will be dropped to fit the context length of the model, `max_prompt_tokens`.",
          "enum": [
            "auto",
            "last_messages"
          ]
        },
        "last_messages": {
          "type": "integer",
          "description": "The number of most recent messages from the thread when constructing the context for the run.",
          "minimum": 1,
          "nullable": true
        }
      },
      "required": [
        "type"
      ],
      "examples": []
    },
    {
      "name": "Type",
      "type": "object",
      "description": "An action to type in text.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "type"
          ],
          "default": "type",
          "description": "Specifies the event type. For a type action, this property is \nalways set to `type`.\n",
          "x-stainless-const": true
        },
        "text": {
          "type": "string",
          "description": "The text to type.\n"
        }
      },
      "required": [
        "type",
        "text"
      ],
      "examples": []
    },
    {
      "name": "UpdateVectorStoreFileAttributesRequest",
      "type": "object",
      "description": "",
      "properties": {
        "attributes": {
          "$ref": "#/components/schemas/VectorStoreFileAttributes"
        }
      },
      "required": [
        "attributes"
      ],
      "examples": []
    },
    {
      "name": "UpdateVectorStoreRequest",
      "type": "object",
      "description": "",
      "properties": {
        "name": {
          "description": "The name of the vector store.",
          "type": "string",
          "nullable": true
        },
        "expires_after": {
          "allOf": [
            {
              "$ref": "#/components/schemas/VectorStoreExpirationAfter"
            },
            {
              "nullable": true
            }
          ]
        },
        "metadata": {
          "$ref": "#/components/schemas/Metadata"
        }
      },
      "required": [],
      "examples": []
    },
    {
      "name": "Upload",
      "type": "object",
      "description": "The Upload object can accept byte chunks in the form of Parts.\n",
      "properties": {
        "id": {
          "type": "string",
          "description": "The Upload unique identifier, which can be referenced in API endpoints."
        },
        "created_at": {
          "type": "integer",
          "description": "The Unix timestamp (in seconds) for when the Upload was created."
        },
        "filename": {
          "type": "string",
          "description": "The name of the file to be uploaded."
        },
        "bytes": {
          "type": "integer",
          "description": "The intended number of bytes to be uploaded."
        },
        "purpose": {
          "type": "string",
          "description": "The intended purpose of the file. [Please refer here](https://platform.openai.com/docs/api-reference/files/object#files/object-purpose) for acceptable values."
        },
        "status": {
          "type": "string",
          "description": "The status of the Upload.",
          "enum": [
            "pending",
            "completed",
            "cancelled",
            "expired"
          ]
        },
        "expires_at": {
          "type": "integer",
          "description": "The Unix timestamp (in seconds) for when the Upload will expire."
        },
        "object": {
          "type": "string",
          "description": "The object type, which is always \"upload\".",
          "enum": [
            "upload"
          ],
          "x-stainless-const": true
        },
        "file": {
          "allOf": [
            {
              "$ref": "#/components/schemas/OpenAIFile"
            },
            {
              "nullable": true,
              "description": "The ready File object after the Upload is completed."
            }
          ]
        }
      },
      "required": [
        "bytes",
        "created_at",
        "expires_at",
        "filename",
        "id",
        "purpose",
        "status",
        "object"
      ],
      "examples": []
    },
    {
      "name": "UploadCertificateRequest",
      "type": "object",
      "description": "",
      "properties": {
        "name": {
          "type": "string",
          "description": "An optional name for the certificate"
        },
        "content": {
          "type": "string",
          "description": "The certificate content in PEM format"
        }
      },
      "required": [
        "content"
      ],
      "examples": []
    },
    {
      "name": "UploadPart",
      "type": "object",
      "description": "The upload Part represents a chunk of bytes we can add to an Upload object.\n",
      "properties": {
        "id": {
          "type": "string",
          "description": "The upload Part unique identifier, which can be referenced in API endpoints."
        },
        "created_at": {
          "type": "integer",
          "description": "The Unix timestamp (in seconds) for when the Part was created."
        },
        "upload_id": {
          "type": "string",
          "description": "The ID of the Upload object that this Part was added to."
        },
        "object": {
          "type": "string",
          "description": "The object type, which is always `upload.part`.",
          "enum": [
            "upload.part"
          ],
          "x-stainless-const": true
        }
      },
      "required": [
        "created_at",
        "id",
        "object",
        "upload_id"
      ],
      "examples": []
    },
    {
      "name": "UsageAudioSpeechesResult",
      "type": "object",
      "description": "The aggregated audio speeches usage details of the specific time bucket.",
      "properties": {
        "object": {
          "type": "string",
          "enum": [
            "organization.usage.audio_speeches.result"
          ],
          "x-stainless-const": true
        },
        "characters": {
          "type": "integer",
          "description": "The number of characters processed."
        },
        "num_model_requests": {
          "type": "integer",
          "description": "The count of requests made to the model."
        },
        "project_id": {
          "type": "string",
          "nullable": true,
          "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
        },
        "user_id": {
          "type": "string",
          "nullable": true,
          "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
        },
        "api_key_id": {
          "type": "string",
          "nullable": true,
          "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
        },
        "model": {
          "type": "string",
          "nullable": true,
          "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
        }
      },
      "required": [
        "object",
        "characters",
        "num_model_requests"
      ],
      "examples": []
    },
    {
      "name": "UsageAudioTranscriptionsResult",
      "type": "object",
      "description": "The aggregated audio transcriptions usage details of the specific time bucket.",
      "properties": {
        "object": {
          "type": "string",
          "enum": [
            "organization.usage.audio_transcriptions.result"
          ],
          "x-stainless-const": true
        },
        "seconds": {
          "type": "integer",
          "description": "The number of seconds processed."
        },
        "num_model_requests": {
          "type": "integer",
          "description": "The count of requests made to the model."
        },
        "project_id": {
          "type": "string",
          "nullable": true,
          "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
        },
        "user_id": {
          "type": "string",
          "nullable": true,
          "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
        },
        "api_key_id": {
          "type": "string",
          "nullable": true,
          "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
        },
        "model": {
          "type": "string",
          "nullable": true,
          "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
        }
      },
      "required": [
        "object",
        "seconds",
        "num_model_requests"
      ],
      "examples": []
    },
    {
      "name": "UsageCodeInterpreterSessionsResult",
      "type": "object",
      "description": "The aggregated code interpreter sessions usage details of the specific time bucket.",
      "properties": {
        "object": {
          "type": "string",
          "enum": [
            "organization.usage.code_interpreter_sessions.result"
          ],
          "x-stainless-const": true
        },
        "num_sessions": {
          "type": "integer",
          "description": "The number of code interpreter sessions."
        },
        "project_id": {
          "type": "string",
          "nullable": true,
          "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
        }
      },
      "required": [
        "object",
        "sessions"
      ],
      "examples": []
    },
    {
      "name": "UsageCompletionsResult",
      "type": "object",
      "description": "The aggregated completions usage details of the specific time bucket.",
      "properties": {
        "object": {
          "type": "string",
          "enum": [
            "organization.usage.completions.result"
          ],
          "x-stainless-const": true
        },
        "input_tokens": {
          "type": "integer",
          "description": "The aggregated number of text input tokens used, including cached tokens. For customers subscribe to scale tier, this includes scale tier tokens."
        },
        "input_cached_tokens": {
          "type": "integer",
          "description": "The aggregated number of text input tokens that has been cached from previous requests. For customers subscribe to scale tier, this includes scale tier tokens."
        },
        "output_tokens": {
          "type": "integer",
          "description": "The aggregated number of text output tokens used. For customers subscribe to scale tier, this includes scale tier tokens."
        },
        "input_audio_tokens": {
          "type": "integer",
          "description": "The aggregated number of audio input tokens used, including cached tokens."
        },
        "output_audio_tokens": {
          "type": "integer",
          "description": "The aggregated number of audio output tokens used."
        },
        "num_model_requests": {
          "type": "integer",
          "description": "The count of requests made to the model."
        },
        "project_id": {
          "type": "string",
          "nullable": true,
          "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
        },
        "user_id": {
          "type": "string",
          "nullable": true,
          "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
        },
        "api_key_id": {
          "type": "string",
          "nullable": true,
          "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
        },
        "model": {
          "type": "string",
          "nullable": true,
          "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
        },
        "batch": {
          "type": "boolean",
          "nullable": true,
          "description": "When `group_by=batch`, this field tells whether the grouped usage result is batch or not."
        }
      },
      "required": [
        "object",
        "input_tokens",
        "output_tokens",
        "num_model_requests"
      ],
      "examples": []
    },
    {
      "name": "UsageEmbeddingsResult",
      "type": "object",
      "description": "The aggregated embeddings usage details of the specific time bucket.",
      "properties": {
        "object": {
          "type": "string",
          "enum": [
            "organization.usage.embeddings.result"
          ],
          "x-stainless-const": true
        },
        "input_tokens": {
          "type": "integer",
          "description": "The aggregated number of input tokens used."
        },
        "num_model_requests": {
          "type": "integer",
          "description": "The count of requests made to the model."
        },
        "project_id": {
          "type": "string",
          "nullable": true,
          "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
        },
        "user_id": {
          "type": "string",
          "nullable": true,
          "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
        },
        "api_key_id": {
          "type": "string",
          "nullable": true,
          "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
        },
        "model": {
          "type": "string",
          "nullable": true,
          "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
        }
      },
      "required": [
        "object",
        "input_tokens",
        "num_model_requests"
      ],
      "examples": []
    },
    {
      "name": "UsageImagesResult",
      "type": "object",
      "description": "The aggregated images usage details of the specific time bucket.",
      "properties": {
        "object": {
          "type": "string",
          "enum": [
            "organization.usage.images.result"
          ],
          "x-stainless-const": true
        },
        "images": {
          "type": "integer",
          "description": "The number of images processed."
        },
        "num_model_requests": {
          "type": "integer",
          "description": "The count of requests made to the model."
        },
        "source": {
          "type": "string",
          "nullable": true,
          "description": "When `group_by=source`, this field provides the source of the grouped usage result, possible values are `image.generation`, `image.edit`, `image.variation`."
        },
        "size": {
          "type": "string",
          "nullable": true,
          "description": "When `group_by=size`, this field provides the image size of the grouped usage result."
        },
        "project_id": {
          "type": "string",
          "nullable": true,
          "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
        },
        "user_id": {
          "type": "string",
          "nullable": true,
          "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
        },
        "api_key_id": {
          "type": "string",
          "nullable": true,
          "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
        },
        "model": {
          "type": "string",
          "nullable": true,
          "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
        }
      },
      "required": [
        "object",
        "images",
        "num_model_requests"
      ],
      "examples": []
    },
    {
      "name": "UsageModerationsResult",
      "type": "object",
      "description": "The aggregated moderations usage details of the specific time bucket.",
      "properties": {
        "object": {
          "type": "string",
          "enum": [
            "organization.usage.moderations.result"
          ],
          "x-stainless-const": true
        },
        "input_tokens": {
          "type": "integer",
          "description": "The aggregated number of input tokens used."
        },
        "num_model_requests": {
          "type": "integer",
          "description": "The count of requests made to the model."
        },
        "project_id": {
          "type": "string",
          "nullable": true,
          "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
        },
        "user_id": {
          "type": "string",
          "nullable": true,
          "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result."
        },
        "api_key_id": {
          "type": "string",
          "nullable": true,
          "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result."
        },
        "model": {
          "type": "string",
          "nullable": true,
          "description": "When `group_by=model`, this field provides the model name of the grouped usage result."
        }
      },
      "required": [
        "object",
        "input_tokens",
        "num_model_requests"
      ],
      "examples": []
    },
    {
      "name": "UsageResponse",
      "type": "object",
      "description": "",
      "properties": {
        "object": {
          "type": "string",
          "enum": [
            "page"
          ],
          "x-stainless-const": true
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/UsageTimeBucket"
          }
        },
        "has_more": {
          "type": "boolean"
        },
        "next_page": {
          "type": "string"
        }
      },
      "required": [
        "object",
        "data",
        "has_more",
        "next_page"
      ],
      "examples": []
    },
    {
      "name": "UsageTimeBucket",
      "type": "object",
      "description": "",
      "properties": {
        "object": {
          "type": "string",
          "enum": [
            "bucket"
          ],
          "x-stainless-const": true
        },
        "start_time": {
          "type": "integer"
        },
        "end_time": {
          "type": "integer"
        },
        "result": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/UsageCompletionsResult"
              },
              {
                "$ref": "#/components/schemas/UsageEmbeddingsResult"
              },
              {
                "$ref": "#/components/schemas/UsageModerationsResult"
              },
              {
                "$ref": "#/components/schemas/UsageImagesResult"
              },
              {
                "$ref": "#/components/schemas/UsageAudioSpeechesResult"
              },
              {
                "$ref": "#/components/schemas/UsageAudioTranscriptionsResult"
              },
              {
                "$ref": "#/components/schemas/UsageVectorStoresResult"
              },
              {
                "$ref": "#/components/schemas/UsageCodeInterpreterSessionsResult"
              },
              {
                "$ref": "#/components/schemas/CostsResult"
              }
            ],
            "discriminator": {
              "propertyName": "object"
            }
          }
        }
      },
      "required": [
        "object",
        "start_time",
        "end_time",
        "result"
      ],
      "examples": []
    },
    {
      "name": "UsageVectorStoresResult",
      "type": "object",
      "description": "The aggregated vector stores usage details of the specific time bucket.",
      "properties": {
        "object": {
          "type": "string",
          "enum": [
            "organization.usage.vector_stores.result"
          ],
          "x-stainless-const": true
        },
        "usage_bytes": {
          "type": "integer",
          "description": "The vector stores usage in bytes."
        },
        "project_id": {
          "type": "string",
          "nullable": true,
          "description": "When `group_by=project_id`, this field provides the project ID of the grouped usage result."
        }
      },
      "required": [
        "object",
        "usage_bytes"
      ],
      "examples": []
    },
    {
      "name": "User",
      "type": "object",
      "description": "Represents an individual `user` within an organization.",
      "properties": {
        "object": {
          "type": "string",
          "enum": [
            "organization.user"
          ],
          "description": "The object type, which is always `organization.user`",
          "x-stainless-const": true
        },
        "id": {
          "type": "string",
          "description": "The identifier, which can be referenced in API endpoints"
        },
        "name": {
          "type": "string",
          "description": "The name of the user"
        },
        "email": {
          "type": "string",
          "description": "The email address of the user"
        },
        "role": {
          "type": "string",
          "enum": [
            "owner",
            "reader"
          ],
          "description": "`owner` or `reader`"
        },
        "added_at": {
          "type": "integer",
          "description": "The Unix timestamp (in seconds) of when the user was added."
        }
      },
      "required": [
        "object",
        "id",
        "name",
        "email",
        "role",
        "added_at"
      ],
      "examples": []
    },
    {
      "name": "UserDeleteResponse",
      "type": "object",
      "description": "",
      "properties": {
        "object": {
          "type": "string",
          "enum": [
            "organization.user.deleted"
          ],
          "x-stainless-const": true
        },
        "id": {
          "type": "string"
        },
        "deleted": {
          "type": "boolean"
        }
      },
      "required": [
        "object",
        "id",
        "deleted"
      ],
      "examples": []
    },
    {
      "name": "UserListResponse",
      "type": "object",
      "description": "",
      "properties": {
        "object": {
          "type": "string",
          "enum": [
            "list"
          ],
          "x-stainless-const": true
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/User"
          }
        },
        "first_id": {
          "type": "string"
        },
        "last_id": {
          "type": "string"
        },
        "has_more": {
          "type": "boolean"
        }
      },
      "required": [
        "object",
        "data",
        "first_id",
        "last_id",
        "has_more"
      ],
      "examples": []
    },
    {
      "name": "UserRoleUpdateRequest",
      "type": "object",
      "description": "",
      "properties": {
        "role": {
          "type": "string",
          "enum": [
            "owner",
            "reader"
          ],
          "description": "`owner` or `reader`"
        }
      },
      "required": [
        "role"
      ],
      "examples": []
    },
    {
      "name": "VadConfig",
      "type": "object",
      "description": "",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "server_vad"
          ],
          "description": "Must be set to `server_vad` to enable manual chunking using server side VAD."
        },
        "prefix_padding_ms": {
          "type": "integer",
          "default": 300,
          "description": "Amount of audio to include before the VAD detected speech (in \nmilliseconds).\n"
        },
        "silence_duration_ms": {
          "type": "integer",
          "default": 200,
          "description": "Duration of silence to detect speech stop (in milliseconds).\nWith shorter values the model will respond more quickly, \nbut may jump in on short pauses from the user.\n"
        },
        "threshold": {
          "type": "number",
          "default": 0.5,
          "description": "Sensitivity threshold (0.0 to 1.0) for voice activity detection. A \nhigher threshold will require louder audio to activate the model, and \nthus might perform better in noisy environments.\n"
        }
      },
      "required": [
        "type"
      ],
      "examples": []
    },
    {
      "name": "ValidateGraderRequest",
      "type": "object",
      "description": "",
      "properties": {
        "grader": {
          "type": "object",
          "description": "The grader used for the fine-tuning job.",
          "anyOf": [
            {
              "$ref": "#/components/schemas/GraderStringCheck"
            },
            {
              "$ref": "#/components/schemas/GraderTextSimilarity"
            },
            {
              "$ref": "#/components/schemas/GraderPython"
            },
            {
              "$ref": "#/components/schemas/GraderScoreModel"
            },
            {
              "$ref": "#/components/schemas/GraderMulti"
            }
          ]
        }
      },
      "required": [
        "grader"
      ],
      "examples": []
    },
    {
      "name": "ValidateGraderResponse",
      "type": "object",
      "description": "",
      "properties": {
        "grader": {
          "type": "object",
          "description": "The grader used for the fine-tuning job.",
          "anyOf": [
            {
              "$ref": "#/components/schemas/GraderStringCheck"
            },
            {
              "$ref": "#/components/schemas/GraderTextSimilarity"
            },
            {
              "$ref": "#/components/schemas/GraderPython"
            },
            {
              "$ref": "#/components/schemas/GraderScoreModel"
            },
            {
              "$ref": "#/components/schemas/GraderMulti"
            }
          ]
        }
      },
      "required": [],
      "examples": []
    },
    {
      "name": "VectorStoreExpirationAfter",
      "type": "object",
      "description": "The expiration policy for a vector store.",
      "properties": {
        "anchor": {
          "description": "Anchor timestamp after which the expiration policy applies. Supported anchors: `last_active_at`.",
          "type": "string",
          "enum": [
            "last_active_at"
          ],
          "x-stainless-const": true
        },
        "days": {
          "description": "The number of days after the anchor time that the vector store will expire.",
          "type": "integer",
          "minimum": 1,
          "maximum": 365
        }
      },
      "required": [
        "anchor",
        "days"
      ],
      "examples": []
    },
    {
      "name": "VectorStoreFileAttributes",
      "type": "object",
      "description": "Set of 16 key-value pairs that can be attached to an object. This can be \nuseful for storing additional information about the object in a structured \nformat, and querying for objects via API or the dashboard. Keys are strings \nwith a maximum length of 64 characters. Values are strings with a maximum \nlength of 512 characters, booleans, or numbers.\n",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "VectorStoreFileBatchObject",
      "type": "object",
      "description": "A batch of files attached to a vector store.",
      "properties": {
        "id": {
          "description": "The identifier, which can be referenced in API endpoints.",
          "type": "string"
        },
        "object": {
          "description": "The object type, which is always `vector_store.file_batch`.",
          "type": "string",
          "enum": [
            "vector_store.files_batch"
          ],
          "x-stainless-const": true
        },
        "created_at": {
          "description": "The Unix timestamp (in seconds) for when the vector store files batch was created.",
          "type": "integer"
        },
        "vector_store_id": {
          "description": "The ID of the [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object) that the [File](https://platform.openai.com/docs/api-reference/files) is attached to.",
          "type": "string"
        },
        "status": {
          "description": "The status of the vector store files batch, which can be either `in_progress`, `completed`, `cancelled` or `failed`.",
          "type": "string",
          "enum": [
            "in_progress",
            "completed",
            "cancelled",
            "failed"
          ]
        },
        "file_counts": {
          "type": "object",
          "properties": {
            "in_progress": {
              "description": "The number of files that are currently being processed.",
              "type": "integer"
            },
            "completed": {
              "description": "The number of files that have been processed.",
              "type": "integer"
            },
            "failed": {
              "description": "The number of files that have failed to process.",
              "type": "integer"
            },
            "cancelled": {
              "description": "The number of files that where cancelled.",
              "type": "integer"
            },
            "total": {
              "description": "The total number of files.",
              "type": "integer"
            }
          },
          "required": [
            "in_progress",
            "completed",
            "cancelled",
            "failed",
            "total"
          ]
        }
      },
      "required": [
        "id",
        "object",
        "created_at",
        "vector_store_id",
        "status",
        "file_counts"
      ],
      "examples": []
    },
    {
      "name": "VectorStoreFileContentResponse",
      "type": "object",
      "description": "Represents the parsed content of a vector store file.",
      "properties": {
        "object": {
          "type": "string",
          "enum": [
            "vector_store.file_content.page"
          ],
          "description": "The object type, which is always `vector_store.file_content.page`",
          "x-stainless-const": true
        },
        "data": {
          "type": "array",
          "description": "Parsed content of the file.",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "The content type (currently only `\"text\"`)"
              },
              "text": {
                "type": "string",
                "description": "The text content"
              }
            }
          }
        },
        "has_more": {
          "type": "boolean",
          "description": "Indicates if there are more content pages to fetch."
        },
        "next_page": {
          "type": "string",
          "description": "The token for the next page, if any.",
          "nullable": true
        }
      },
      "required": [
        "object",
        "data",
        "has_more",
        "next_page"
      ],
      "examples": []
    },
    {
      "name": "VectorStoreFileObject",
      "type": "object",
      "description": "A list of files attached to a vector store.",
      "properties": {
        "id": {
          "description": "The identifier, which can be referenced in API endpoints.",
          "type": "string"
        },
        "object": {
          "description": "The object type, which is always `vector_store.file`.",
          "type": "string",
          "enum": [
            "vector_store.file"
          ],
          "x-stainless-const": true
        },
        "usage_bytes": {
          "description": "The total vector store usage in bytes. Note that this may be different from the original file size.",
          "type": "integer"
        },
        "created_at": {
          "description": "The Unix timestamp (in seconds) for when the vector store file was created.",
          "type": "integer"
        },
        "vector_store_id": {
          "description": "The ID of the [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object) that the [File](https://platform.openai.com/docs/api-reference/files) is attached to.",
          "type": "string"
        },
        "status": {
          "description": "The status of the vector store file, which can be either `in_progress`, `completed`, `cancelled`, or `failed`. The status `completed` indicates that the vector store file is ready for use.",
          "type": "string",
          "enum": [
            "in_progress",
            "completed",
            "cancelled",
            "failed"
          ]
        },
        "last_error": {
          "type": "object",
          "description": "The last error associated with this vector store file. Will be `null` if there are no errors.",
          "nullable": true,
          "properties": {
            "code": {
              "type": "string",
              "description": "One of `server_error` or `rate_limit_exceeded`.",
              "enum": [
                "server_error",
                "unsupported_file",
                "invalid_file"
              ]
            },
            "message": {
              "type": "string",
              "description": "A human-readable description of the error."
            }
          },
          "required": [
            "code",
            "message"
          ]
        },
        "chunking_strategy": {
          "$ref": "#/components/schemas/ChunkingStrategyResponse"
        },
        "attributes": {
          "$ref": "#/components/schemas/VectorStoreFileAttributes"
        }
      },
      "required": [
        "id",
        "object",
        "usage_bytes",
        "created_at",
        "vector_store_id",
        "status",
        "last_error"
      ],
      "examples": []
    },
    {
      "name": "VectorStoreObject",
      "type": "object",
      "description": "A vector store is a collection of processed files can be used by the `file_search` tool.",
      "properties": {
        "id": {
          "description": "The identifier, which can be referenced in API endpoints.",
          "type": "string"
        },
        "object": {
          "description": "The object type, which is always `vector_store`.",
          "type": "string",
          "enum": [
            "vector_store"
          ],
          "x-stainless-const": true
        },
        "created_at": {
          "description": "The Unix timestamp (in seconds) for when the vector store was created.",
          "type": "integer"
        },
        "name": {
          "description": "The name of the vector store.",
          "type": "string"
        },
        "usage_bytes": {
          "description": "The total number of bytes used by the files in the vector store.",
          "type": "integer"
        },
        "file_counts": {
          "type": "object",
          "properties": {
            "in_progress": {
              "description": "The number of files that are currently being processed.",
              "type": "integer"
            },
            "completed": {
              "description": "The number of files that have been successfully processed.",
              "type": "integer"
            },
            "failed": {
              "description": "The number of files that have failed to process.",
              "type": "integer"
            },
            "cancelled": {
              "description": "The number of files that were cancelled.",
              "type": "integer"
            },
            "total": {
              "description": "The total number of files.",
              "type": "integer"
            }
          },
          "required": [
            "in_progress",
            "completed",
            "failed",
            "cancelled",
            "total"
          ]
        },
        "status": {
          "description": "The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use.",
          "type": "string",
          "enum": [
            "expired",
            "in_progress",
            "completed"
          ]
        },
        "expires_after": {
          "$ref": "#/components/schemas/VectorStoreExpirationAfter"
        },
        "expires_at": {
          "description": "The Unix timestamp (in seconds) for when the vector store will expire.",
          "type": "integer",
          "nullable": true
        },
        "last_active_at": {
          "description": "The Unix timestamp (in seconds) for when the vector store was last active.",
          "type": "integer",
          "nullable": true
        },
        "metadata": {
          "$ref": "#/components/schemas/Metadata"
        }
      },
      "required": [
        "id",
        "object",
        "usage_bytes",
        "created_at",
        "status",
        "last_active_at",
        "name",
        "file_counts",
        "metadata"
      ],
      "examples": []
    },
    {
      "name": "VectorStoreSearchRequest",
      "type": "object",
      "description": "",
      "properties": {
        "query": {
          "description": "A query string for a search",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "description": "A list of queries to search for.",
                "minItems": 1
              }
            }
          ]
        },
        "rewrite_query": {
          "description": "Whether to rewrite the natural language query for vector search.",
          "type": "boolean",
          "default": false
        },
        "max_num_results": {
          "description": "The maximum number of results to return. This number should be between 1 and 50 inclusive.",
          "type": "integer",
          "default": 10,
          "minimum": 1,
          "maximum": 50
        },
        "filters": {
          "description": "A filter to apply based on file attributes.",
          "anyOf": [
            {
              "$ref": "#/components/schemas/ComparisonFilter"
            },
            {
              "$ref": "#/components/schemas/CompoundFilter"
            }
          ]
        },
        "ranking_options": {
          "description": "Ranking options for search.",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "ranker": {
              "description": "Enable re-ranking; set to `none` to disable, which can help reduce latency.",
              "type": "string",
              "enum": [
                "none",
                "auto",
                "default-2024-11-15"
              ],
              "default": "auto"
            },
            "score_threshold": {
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 0
            }
          }
        }
      },
      "required": [
        "query"
      ],
      "examples": []
    },
    {
      "name": "VectorStoreSearchResultContentObject",
      "type": "object",
      "description": "",
      "properties": {
        "type": {
          "description": "The type of content.",
          "type": "string",
          "enum": [
            "text"
          ]
        },
        "text": {
          "description": "The text content returned from search.",
          "type": "string"
        }
      },
      "required": [
        "type",
        "text"
      ],
      "examples": []
    },
    {
      "name": "VectorStoreSearchResultItem",
      "type": "object",
      "description": "",
      "properties": {
        "file_id": {
          "type": "string",
          "description": "The ID of the vector store file."
        },
        "filename": {
          "type": "string",
          "description": "The name of the vector store file."
        },
        "score": {
          "type": "number",
          "description": "The similarity score for the result.",
          "minimum": 0,
          "maximum": 1
        },
        "attributes": {
          "$ref": "#/components/schemas/VectorStoreFileAttributes"
        },
        "content": {
          "type": "array",
          "description": "Content chunks from the file.",
          "items": {
            "$ref": "#/components/schemas/VectorStoreSearchResultContentObject"
          }
        }
      },
      "required": [
        "file_id",
        "filename",
        "score",
        "attributes",
        "content"
      ],
      "examples": []
    },
    {
      "name": "VectorStoreSearchResultsPage",
      "type": "object",
      "description": "",
      "properties": {
        "object": {
          "type": "string",
          "enum": [
            "vector_store.search_results.page"
          ],
          "description": "The object type, which is always `vector_store.search_results.page`",
          "x-stainless-const": true
        },
        "search_query": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "The query used for this search.",
            "minItems": 1
          }
        },
        "data": {
          "type": "array",
          "description": "The list of search result items.",
          "items": {
            "$ref": "#/components/schemas/VectorStoreSearchResultItem"
          }
        },
        "has_more": {
          "type": "boolean",
          "description": "Indicates if there are more results to fetch."
        },
        "next_page": {
          "type": "string",
          "description": "The token for the next page, if any.",
          "nullable": true
        }
      },
      "required": [
        "object",
        "search_query",
        "data",
        "has_more",
        "next_page"
      ],
      "examples": []
    },
    {
      "name": "Verbosity",
      "type": "string",
      "description": "Constrains the verbosity of the model's response. Lower values will result in\nmore concise responses, while higher values will result in more verbose responses.\nCurrently supported values are `low`, `medium`, and `high`.\n",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "VoiceIdsShared",
      "type": "object",
      "description": "",
      "properties": {},
      "required": [],
      "examples": [
        "ash"
      ]
    },
    {
      "name": "Wait",
      "type": "object",
      "description": "A wait action.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "wait"
          ],
          "default": "wait",
          "description": "Specifies the event type. For a wait action, this property is \nalways set to `wait`.\n",
          "x-stainless-const": true
        }
      },
      "required": [
        "type"
      ],
      "examples": []
    },
    {
      "name": "WebSearchActionFind",
      "type": "object",
      "description": "Action type \"find\": Searches for a pattern within a loaded page.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "find"
          ],
          "description": "The action type.\n",
          "x-stainless-const": true
        },
        "url": {
          "type": "string",
          "format": "uri",
          "description": "The URL of the page searched for the pattern.\n"
        },
        "pattern": {
          "type": "string",
          "description": "The pattern or text to search for within the page.\n"
        }
      },
      "required": [
        "type",
        "url",
        "pattern"
      ],
      "examples": []
    },
    {
      "name": "WebSearchActionOpenPage",
      "type": "object",
      "description": "Action type \"open_page\" - Opens a specific URL from search results.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "open_page"
          ],
          "description": "The action type.\n",
          "x-stainless-const": true
        },
        "url": {
          "type": "string",
          "format": "uri",
          "description": "The URL opened by the model.\n"
        }
      },
      "required": [
        "type",
        "url"
      ],
      "examples": []
    },
    {
      "name": "WebSearchActionSearch",
      "type": "object",
      "description": "Action type \"search\" - Performs a web search query.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "search"
          ],
          "description": "The action type.\n",
          "x-stainless-const": true
        },
        "query": {
          "type": "string",
          "description": "The search query.\n"
        }
      },
      "required": [
        "type",
        "query"
      ],
      "examples": []
    },
    {
      "name": "WebSearchContextSize",
      "type": "string",
      "description": "High level guidance for the amount of context window space to use for the \nsearch. One of `low`, `medium`, or `high`. `medium` is the default.\n",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "WebSearchLocation",
      "type": "object",
      "description": "Approximate location parameters for the search.",
      "properties": {
        "country": {
          "type": "string",
          "description": "The two-letter \n[ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1) of the user,\ne.g. `US`.\n"
        },
        "region": {
          "type": "string",
          "description": "Free text input for the region of the user, e.g. `California`.\n"
        },
        "city": {
          "type": "string",
          "description": "Free text input for the city of the user, e.g. `San Francisco`.\n"
        },
        "timezone": {
          "type": "string",
          "description": "The [IANA timezone](https://timeapi.io/documentation/iana-timezones) \nof the user, e.g. `America/Los_Angeles`.\n"
        }
      },
      "required": [],
      "examples": []
    },
    {
      "name": "WebSearchToolCall",
      "type": "object",
      "description": "The results of a web search tool call. See the \n[web search guide](https://platform.openai.com/docs/guides/tools-web-search) for more information.\n",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID of the web search tool call.\n"
        },
        "type": {
          "type": "string",
          "enum": [
            "web_search_call"
          ],
          "description": "The type of the web search tool call. Always `web_search_call`.\n",
          "x-stainless-const": true
        },
        "status": {
          "type": "string",
          "description": "The status of the web search tool call.\n",
          "enum": [
            "in_progress",
            "searching",
            "completed",
            "failed"
          ]
        },
        "action": {
          "type": "object",
          "description": "An object describing the specific action taken in this web search call.\nIncludes details on how the model used the web (search, open_page, find).\n",
          "anyOf": [
            {
              "$ref": "#/components/schemas/WebSearchActionSearch"
            },
            {
              "$ref": "#/components/schemas/WebSearchActionOpenPage"
            },
            {
              "$ref": "#/components/schemas/WebSearchActionFind"
            }
          ],
          "discriminator": {
            "propertyName": "type"
          }
        }
      },
      "required": [
        "id",
        "type",
        "status",
        "action"
      ],
      "examples": []
    },
    {
      "name": "WebhookBatchCancelled",
      "type": "object",
      "description": "Sent when a batch API request has been cancelled.\n",
      "properties": {
        "created_at": {
          "type": "integer",
          "description": "The Unix timestamp (in seconds) of when the batch API request was cancelled.\n"
        },
        "id": {
          "type": "string",
          "description": "The unique ID of the event.\n"
        },
        "data": {
          "type": "object",
          "description": "Event data payload.\n",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique ID of the batch API request.\n"
            }
          }
        },
        "object": {
          "type": "string",
          "description": "The object of the event. Always `event`.\n",
          "enum": [
            "event"
          ],
          "x-stainless-const": true
        },
        "type": {
          "type": "string",
          "description": "The type of the event. Always `batch.cancelled`.\n",
          "enum": [
            "batch.cancelled"
          ],
          "x-stainless-const": true
        }
      },
      "required": [
        "created_at",
        "id",
        "data",
        "type"
      ],
      "examples": []
    },
    {
      "name": "WebhookBatchCompleted",
      "type": "object",
      "description": "Sent when a batch API request has been completed.\n",
      "properties": {
        "created_at": {
          "type": "integer",
          "description": "The Unix timestamp (in seconds) of when the batch API request was completed.\n"
        },
        "id": {
          "type": "string",
          "description": "The unique ID of the event.\n"
        },
        "data": {
          "type": "object",
          "description": "Event data payload.\n",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique ID of the batch API request.\n"
            }
          }
        },
        "object": {
          "type": "string",
          "description": "The object of the event. Always `event`.\n",
          "enum": [
            "event"
          ],
          "x-stainless-const": true
        },
        "type": {
          "type": "string",
          "description": "The type of the event. Always `batch.completed`.\n",
          "enum": [
            "batch.completed"
          ],
          "x-stainless-const": true
        }
      },
      "required": [
        "created_at",
        "id",
        "data",
        "type"
      ],
      "examples": []
    },
    {
      "name": "WebhookBatchExpired",
      "type": "object",
      "description": "Sent when a batch API request has expired.\n",
      "properties": {
        "created_at": {
          "type": "integer",
          "description": "The Unix timestamp (in seconds) of when the batch API request expired.\n"
        },
        "id": {
          "type": "string",
          "description": "The unique ID of the event.\n"
        },
        "data": {
          "type": "object",
          "description": "Event data payload.\n",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique ID of the batch API request.\n"
            }
          }
        },
        "object": {
          "type": "string",
          "description": "The object of the event. Always `event`.\n",
          "enum": [
            "event"
          ],
          "x-stainless-const": true
        },
        "type": {
          "type": "string",
          "description": "The type of the event. Always `batch.expired`.\n",
          "enum": [
            "batch.expired"
          ],
          "x-stainless-const": true
        }
      },
      "required": [
        "created_at",
        "id",
        "data",
        "type"
      ],
      "examples": []
    },
    {
      "name": "WebhookBatchFailed",
      "type": "object",
      "description": "Sent when a batch API request has failed.\n",
      "properties": {
        "created_at": {
          "type": "integer",
          "description": "The Unix timestamp (in seconds) of when the batch API request failed.\n"
        },
        "id": {
          "type": "string",
          "description": "The unique ID of the event.\n"
        },
        "data": {
          "type": "object",
          "description": "Event data payload.\n",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique ID of the batch API request.\n"
            }
          }
        },
        "object": {
          "type": "string",
          "description": "The object of the event. Always `event`.\n",
          "enum": [
            "event"
          ],
          "x-stainless-const": true
        },
        "type": {
          "type": "string",
          "description": "The type of the event. Always `batch.failed`.\n",
          "enum": [
            "batch.failed"
          ],
          "x-stainless-const": true
        }
      },
      "required": [
        "created_at",
        "id",
        "data",
        "type"
      ],
      "examples": []
    },
    {
      "name": "WebhookEvalRunCanceled",
      "type": "object",
      "description": "Sent when an eval run has been canceled.\n",
      "properties": {
        "created_at": {
          "type": "integer",
          "description": "The Unix timestamp (in seconds) of when the eval run was canceled.\n"
        },
        "id": {
          "type": "string",
          "description": "The unique ID of the event.\n"
        },
        "data": {
          "type": "object",
          "description": "Event data payload.\n",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique ID of the eval run.\n"
            }
          }
        },
        "object": {
          "type": "string",
          "description": "The object of the event. Always `event`.\n",
          "enum": [
            "event"
          ],
          "x-stainless-const": true
        },
        "type": {
          "type": "string",
          "description": "The type of the event. Always `eval.run.canceled`.\n",
          "enum": [
            "eval.run.canceled"
          ],
          "x-stainless-const": true
        }
      },
      "required": [
        "created_at",
        "id",
        "data",
        "type"
      ],
      "examples": []
    },
    {
      "name": "WebhookEvalRunFailed",
      "type": "object",
      "description": "Sent when an eval run has failed.\n",
      "properties": {
        "created_at": {
          "type": "integer",
          "description": "The Unix timestamp (in seconds) of when the eval run failed.\n"
        },
        "id": {
          "type": "string",
          "description": "The unique ID of the event.\n"
        },
        "data": {
          "type": "object",
          "description": "Event data payload.\n",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique ID of the eval run.\n"
            }
          }
        },
        "object": {
          "type": "string",
          "description": "The object of the event. Always `event`.\n",
          "enum": [
            "event"
          ],
          "x-stainless-const": true
        },
        "type": {
          "type": "string",
          "description": "The type of the event. Always `eval.run.failed`.\n",
          "enum": [
            "eval.run.failed"
          ],
          "x-stainless-const": true
        }
      },
      "required": [
        "created_at",
        "id",
        "data",
        "type"
      ],
      "examples": []
    },
    {
      "name": "WebhookEvalRunSucceeded",
      "type": "object",
      "description": "Sent when an eval run has succeeded.\n",
      "properties": {
        "created_at": {
          "type": "integer",
          "description": "The Unix timestamp (in seconds) of when the eval run succeeded.\n"
        },
        "id": {
          "type": "string",
          "description": "The unique ID of the event.\n"
        },
        "data": {
          "type": "object",
          "description": "Event data payload.\n",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique ID of the eval run.\n"
            }
          }
        },
        "object": {
          "type": "string",
          "description": "The object of the event. Always `event`.\n",
          "enum": [
            "event"
          ],
          "x-stainless-const": true
        },
        "type": {
          "type": "string",
          "description": "The type of the event. Always `eval.run.succeeded`.\n",
          "enum": [
            "eval.run.succeeded"
          ],
          "x-stainless-const": true
        }
      },
      "required": [
        "created_at",
        "id",
        "data",
        "type"
      ],
      "examples": []
    },
    {
      "name": "WebhookFineTuningJobCancelled",
      "type": "object",
      "description": "Sent when a fine-tuning job has been cancelled.\n",
      "properties": {
        "created_at": {
          "type": "integer",
          "description": "The Unix timestamp (in seconds) of when the fine-tuning job was cancelled.\n"
        },
        "id": {
          "type": "string",
          "description": "The unique ID of the event.\n"
        },
        "data": {
          "type": "object",
          "description": "Event data payload.\n",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique ID of the fine-tuning job.\n"
            }
          }
        },
        "object": {
          "type": "string",
          "description": "The object of the event. Always `event`.\n",
          "enum": [
            "event"
          ],
          "x-stainless-const": true
        },
        "type": {
          "type": "string",
          "description": "The type of the event. Always `fine_tuning.job.cancelled`.\n",
          "enum": [
            "fine_tuning.job.cancelled"
          ],
          "x-stainless-const": true
        }
      },
      "required": [
        "created_at",
        "id",
        "data",
        "type"
      ],
      "examples": []
    },
    {
      "name": "WebhookFineTuningJobFailed",
      "type": "object",
      "description": "Sent when a fine-tuning job has failed.\n",
      "properties": {
        "created_at": {
          "type": "integer",
          "description": "The Unix timestamp (in seconds) of when the fine-tuning job failed.\n"
        },
        "id": {
          "type": "string",
          "description": "The unique ID of the event.\n"
        },
        "data": {
          "type": "object",
          "description": "Event data payload.\n",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique ID of the fine-tuning job.\n"
            }
          }
        },
        "object": {
          "type": "string",
          "description": "The object of the event. Always `event`.\n",
          "enum": [
            "event"
          ],
          "x-stainless-const": true
        },
        "type": {
          "type": "string",
          "description": "The type of the event. Always `fine_tuning.job.failed`.\n",
          "enum": [
            "fine_tuning.job.failed"
          ],
          "x-stainless-const": true
        }
      },
      "required": [
        "created_at",
        "id",
        "data",
        "type"
      ],
      "examples": []
    },
    {
      "name": "WebhookFineTuningJobSucceeded",
      "type": "object",
      "description": "Sent when a fine-tuning job has succeeded.\n",
      "properties": {
        "created_at": {
          "type": "integer",
          "description": "The Unix timestamp (in seconds) of when the fine-tuning job succeeded.\n"
        },
        "id": {
          "type": "string",
          "description": "The unique ID of the event.\n"
        },
        "data": {
          "type": "object",
          "description": "Event data payload.\n",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique ID of the fine-tuning job.\n"
            }
          }
        },
        "object": {
          "type": "string",
          "description": "The object of the event. Always `event`.\n",
          "enum": [
            "event"
          ],
          "x-stainless-const": true
        },
        "type": {
          "type": "string",
          "description": "The type of the event. Always `fine_tuning.job.succeeded`.\n",
          "enum": [
            "fine_tuning.job.succeeded"
          ],
          "x-stainless-const": true
        }
      },
      "required": [
        "created_at",
        "id",
        "data",
        "type"
      ],
      "examples": []
    },
    {
      "name": "WebhookResponseCancelled",
      "type": "object",
      "description": "Sent when a background response has been cancelled.\n",
      "properties": {
        "created_at": {
          "type": "integer",
          "description": "The Unix timestamp (in seconds) of when the model response was cancelled.\n"
        },
        "id": {
          "type": "string",
          "description": "The unique ID of the event.\n"
        },
        "data": {
          "type": "object",
          "description": "Event data payload.\n",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique ID of the model response.\n"
            }
          }
        },
        "object": {
          "type": "string",
          "description": "The object of the event. Always `event`.\n",
          "enum": [
            "event"
          ],
          "x-stainless-const": true
        },
        "type": {
          "type": "string",
          "description": "The type of the event. Always `response.cancelled`.\n",
          "enum": [
            "response.cancelled"
          ],
          "x-stainless-const": true
        }
      },
      "required": [
        "created_at",
        "id",
        "data",
        "type"
      ],
      "examples": []
    },
    {
      "name": "WebhookResponseCompleted",
      "type": "object",
      "description": "Sent when a background response has been completed.\n",
      "properties": {
        "created_at": {
          "type": "integer",
          "description": "The Unix timestamp (in seconds) of when the model response was completed.\n"
        },
        "id": {
          "type": "string",
          "description": "The unique ID of the event.\n"
        },
        "data": {
          "type": "object",
          "description": "Event data payload.\n",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique ID of the model response.\n"
            }
          }
        },
        "object": {
          "type": "string",
          "description": "The object of the event. Always `event`.\n",
          "enum": [
            "event"
          ],
          "x-stainless-const": true
        },
        "type": {
          "type": "string",
          "description": "The type of the event. Always `response.completed`.\n",
          "enum": [
            "response.completed"
          ],
          "x-stainless-const": true
        }
      },
      "required": [
        "created_at",
        "id",
        "data",
        "type"
      ],
      "examples": []
    },
    {
      "name": "WebhookResponseFailed",
      "type": "object",
      "description": "Sent when a background response has failed.\n",
      "properties": {
        "created_at": {
          "type": "integer",
          "description": "The Unix timestamp (in seconds) of when the model response failed.\n"
        },
        "id": {
          "type": "string",
          "description": "The unique ID of the event.\n"
        },
        "data": {
          "type": "object",
          "description": "Event data payload.\n",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique ID of the model response.\n"
            }
          }
        },
        "object": {
          "type": "string",
          "description": "The object of the event. Always `event`.\n",
          "enum": [
            "event"
          ],
          "x-stainless-const": true
        },
        "type": {
          "type": "string",
          "description": "The type of the event. Always `response.failed`.\n",
          "enum": [
            "response.failed"
          ],
          "x-stainless-const": true
        }
      },
      "required": [
        "created_at",
        "id",
        "data",
        "type"
      ],
      "examples": []
    },
    {
      "name": "WebhookResponseIncomplete",
      "type": "object",
      "description": "Sent when a background response has been interrupted.\n",
      "properties": {
        "created_at": {
          "type": "integer",
          "description": "The Unix timestamp (in seconds) of when the model response was interrupted.\n"
        },
        "id": {
          "type": "string",
          "description": "The unique ID of the event.\n"
        },
        "data": {
          "type": "object",
          "description": "Event data payload.\n",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique ID of the model response.\n"
            }
          }
        },
        "object": {
          "type": "string",
          "description": "The object of the event. Always `event`.\n",
          "enum": [
            "event"
          ],
          "x-stainless-const": true
        },
        "type": {
          "type": "string",
          "description": "The type of the event. Always `response.incomplete`.\n",
          "enum": [
            "response.incomplete"
          ],
          "x-stainless-const": true
        }
      },
      "required": [
        "created_at",
        "id",
        "data",
        "type"
      ],
      "examples": []
    },
    {
      "name": "InputTextContent",
      "type": "object",
      "description": "A text input to the model.",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "input_text"
          ],
          "description": "The type of the input item. Always `input_text`.",
          "default": "input_text",
          "x-stainless-const": true
        },
        "text": {
          "type": "string",
          "description": "The text input to the model."
        }
      },
      "required": [
        "type",
        "text"
      ],
      "examples": []
    },
    {
      "name": "InputImageContent",
      "type": "object",
      "description": "An image input to the model. Learn about [image inputs](https://platform.openai.com/docs/guides/vision).",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "input_image"
          ],
          "description": "The type of the input item. Always `input_image`.",
          "default": "input_image",
          "x-stainless-const": true
        },
        "image_url": {
          "anyOf": [
            {
              "type": "string",
              "description": "The URL of the image to be sent to the model. A fully qualified URL or base64 encoded image in a data URL."
            },
            {
              "type": "null"
            }
          ]
        },
        "file_id": {
          "anyOf": [
            {
              "type": "string",
              "description": "The ID of the file to be sent to the model."
            },
            {
              "type": "null"
            }
          ]
        },
        "detail": {
          "type": "string",
          "enum": [
            "low",
            "high",
            "auto"
          ],
          "description": "The detail level of the image to be sent to the model. One of `high`, `low`, or `auto`. Defaults to `auto`."
        }
      },
      "required": [
        "type",
        "detail"
      ],
      "examples": []
    },
    {
      "name": "InputFileContent",
      "type": "object",
      "description": "A file input to the model.",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "input_file"
          ],
          "description": "The type of the input item. Always `input_file`.",
          "default": "input_file",
          "x-stainless-const": true
        },
        "file_id": {
          "anyOf": [
            {
              "type": "string",
              "description": "The ID of the file to be sent to the model."
            },
            {
              "type": "null"
            }
          ]
        },
        "filename": {
          "type": "string",
          "description": "The name of the file to be sent to the model."
        },
        "file_url": {
          "type": "string",
          "description": "The URL of the file to be sent to the model."
        },
        "file_data": {
          "type": "string",
          "description": "The content of the file to be sent to the model.\n"
        }
      },
      "required": [
        "type"
      ],
      "examples": []
    },
    {
      "name": "FileCitationBody",
      "type": "object",
      "description": "A citation to a file.",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "file_citation"
          ],
          "description": "The type of the file citation. Always `file_citation`.",
          "default": "file_citation",
          "x-stainless-const": true
        },
        "file_id": {
          "type": "string",
          "description": "The ID of the file."
        },
        "index": {
          "type": "integer",
          "description": "The index of the file in the list of files."
        },
        "filename": {
          "type": "string",
          "description": "The filename of the file cited."
        }
      },
      "required": [
        "type",
        "file_id",
        "index",
        "filename"
      ],
      "examples": []
    },
    {
      "name": "UrlCitationBody",
      "type": "object",
      "description": "A citation for a web resource used to generate a model response.",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "url_citation"
          ],
          "description": "The type of the URL citation. Always `url_citation`.",
          "default": "url_citation",
          "x-stainless-const": true
        },
        "url": {
          "type": "string",
          "description": "The URL of the web resource."
        },
        "start_index": {
          "type": "integer",
          "description": "The index of the first character of the URL citation in the message."
        },
        "end_index": {
          "type": "integer",
          "description": "The index of the last character of the URL citation in the message."
        },
        "title": {
          "type": "string",
          "description": "The title of the web resource."
        }
      },
      "required": [
        "type",
        "url",
        "start_index",
        "end_index",
        "title"
      ],
      "examples": []
    },
    {
      "name": "ContainerFileCitationBody",
      "type": "object",
      "description": "A citation for a container file used to generate a model response.",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "container_file_citation"
          ],
          "description": "The type of the container file citation. Always `container_file_citation`.",
          "default": "container_file_citation",
          "x-stainless-const": true
        },
        "container_id": {
          "type": "string",
          "description": "The ID of the container file."
        },
        "file_id": {
          "type": "string",
          "description": "The ID of the file."
        },
        "start_index": {
          "type": "integer",
          "description": "The index of the first character of the container file citation in the message."
        },
        "end_index": {
          "type": "integer",
          "description": "The index of the last character of the container file citation in the message."
        },
        "filename": {
          "type": "string",
          "description": "The filename of the container file cited."
        }
      },
      "required": [
        "type",
        "container_id",
        "file_id",
        "start_index",
        "end_index",
        "filename"
      ],
      "examples": []
    },
    {
      "name": "Annotation",
      "type": "object",
      "description": "",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "TopLogProb",
      "type": "object",
      "description": "The top log probability of a token.",
      "properties": {
        "token": {
          "type": "string"
        },
        "logprob": {
          "type": "number"
        },
        "bytes": {
          "items": {
            "type": "integer"
          },
          "type": "array"
        }
      },
      "required": [
        "token",
        "logprob",
        "bytes"
      ],
      "examples": []
    },
    {
      "name": "LogProb",
      "type": "object",
      "description": "The log probability of a token.",
      "properties": {
        "token": {
          "type": "string"
        },
        "logprob": {
          "type": "number"
        },
        "bytes": {
          "items": {
            "type": "integer"
          },
          "type": "array"
        },
        "top_logprobs": {
          "items": {
            "$ref": "#/components/schemas/TopLogProb"
          },
          "type": "array"
        }
      },
      "required": [
        "token",
        "logprob",
        "bytes",
        "top_logprobs"
      ],
      "examples": []
    },
    {
      "name": "OutputTextContent",
      "type": "object",
      "description": "A text output from the model.",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "output_text"
          ],
          "description": "The type of the output text. Always `output_text`.",
          "default": "output_text",
          "x-stainless-const": true
        },
        "text": {
          "type": "string",
          "description": "The text output from the model."
        },
        "annotations": {
          "items": {
            "$ref": "#/components/schemas/Annotation"
          },
          "type": "array",
          "description": "The annotations of the text output."
        },
        "logprobs": {
          "items": {
            "$ref": "#/components/schemas/LogProb"
          },
          "type": "array"
        }
      },
      "required": [
        "type",
        "text",
        "annotations"
      ],
      "examples": []
    },
    {
      "name": "RefusalContent",
      "type": "object",
      "description": "A refusal from the model.",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "refusal"
          ],
          "description": "The type of the refusal. Always `refusal`.",
          "default": "refusal",
          "x-stainless-const": true
        },
        "refusal": {
          "type": "string",
          "description": "The refusal explanation from the model."
        }
      },
      "required": [
        "type",
        "refusal"
      ],
      "examples": []
    },
    {
      "name": "ComputerCallSafetyCheckParam",
      "type": "object",
      "description": "A pending safety check for the computer call.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the pending safety check."
        },
        "code": {
          "anyOf": [
            {
              "type": "string",
              "description": "The type of the pending safety check."
            },
            {
              "type": "null"
            }
          ]
        },
        "message": {
          "anyOf": [
            {
              "type": "string",
              "description": "Details about the pending safety check."
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "required": [
        "id"
      ],
      "examples": []
    },
    {
      "name": "ComputerCallOutputItemParam",
      "type": "object",
      "description": "The output of a computer tool call.",
      "properties": {
        "id": {
          "anyOf": [
            {
              "type": "string",
              "description": "The ID of the computer tool call output."
            },
            {
              "type": "null"
            }
          ]
        },
        "call_id": {
          "type": "string",
          "maxLength": 64,
          "minLength": 1,
          "description": "The ID of the computer tool call that produced the output."
        },
        "type": {
          "type": "string",
          "enum": [
            "computer_call_output"
          ],
          "description": "The type of the computer tool call output. Always `computer_call_output`.",
          "default": "computer_call_output",
          "x-stainless-const": true
        },
        "output": {
          "$ref": "#/components/schemas/ComputerScreenshotImage"
        },
        "acknowledged_safety_checks": {
          "anyOf": [
            {
              "items": {
                "$ref": "#/components/schemas/ComputerCallSafetyCheckParam"
              },
              "type": "array",
              "description": "The safety checks reported by the API that have been acknowledged by the developer."
            },
            {
              "type": "null"
            }
          ]
        },
        "status": {
          "anyOf": [
            {
              "type": "string",
              "enum": [
                "in_progress",
                "completed",
                "incomplete"
              ],
              "description": "The status of the message input. One of `in_progress`, `completed`, or `incomplete`. Populated when input items are returned via API."
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "required": [
        "call_id",
        "type",
        "output"
      ],
      "examples": []
    },
    {
      "name": "FunctionCallOutputItemParam",
      "type": "object",
      "description": "The output of a function tool call.",
      "properties": {
        "id": {
          "anyOf": [
            {
              "type": "string",
              "description": "The unique ID of the function tool call output. Populated when this item is returned via API."
            },
            {
              "type": "null"
            }
          ]
        },
        "call_id": {
          "type": "string",
          "maxLength": 64,
          "minLength": 1,
          "description": "The unique ID of the function tool call generated by the model."
        },
        "type": {
          "type": "string",
          "enum": [
            "function_call_output"
          ],
          "description": "The type of the function tool call output. Always `function_call_output`.",
          "default": "function_call_output",
          "x-stainless-const": true
        },
        "output": {
          "type": "string",
          "maxLength": 10485760,
          "description": "A JSON string of the output of the function tool call."
        },
        "status": {
          "anyOf": [
            {
              "type": "string",
              "enum": [
                "in_progress",
                "completed",
                "incomplete"
              ],
              "description": "The status of the item. One of `in_progress`, `completed`, or `incomplete`. Populated when items are returned via API."
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "required": [
        "call_id",
        "type",
        "output"
      ],
      "examples": []
    },
    {
      "name": "ItemReferenceParam",
      "type": "object",
      "description": "An internal identifier for an item to reference.",
      "properties": {
        "type": {
          "anyOf": [
            {
              "type": "string",
              "enum": [
                "item_reference"
              ],
              "description": "The type of item to reference. Always `item_reference`.",
              "default": "item_reference",
              "x-stainless-const": true
            },
            {
              "type": "null"
            }
          ]
        },
        "id": {
          "type": "string",
          "description": "The ID of the item to reference."
        }
      },
      "required": [
        "id"
      ],
      "examples": []
    },
    {
      "name": "ConversationResource",
      "type": "object",
      "description": "",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID of the conversation."
        },
        "object": {
          "type": "string",
          "enum": [
            "conversation"
          ],
          "description": "The object type, which is always `conversation`.",
          "default": "conversation",
          "x-stainless-const": true
        },
        "metadata": {
          "description": "Set of 16 key-value pairs that can be attached to an object. This can be         useful for storing additional information about the object in a structured         format, and querying for objects via API or the dashboard.\n        Keys are strings with a maximum length of 64 characters. Values are strings         with a maximum length of 512 characters."
        },
        "created_at": {
          "type": "integer",
          "description": "The time at which the conversation was created, measured in seconds since the Unix epoch."
        }
      },
      "required": [
        "id",
        "object",
        "metadata",
        "created_at"
      ],
      "examples": []
    },
    {
      "name": "MetadataParam",
      "type": "object",
      "description": "",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "UpdateConversationBody",
      "type": "object",
      "description": "",
      "properties": {
        "metadata": {
          "$ref": "#/components/schemas/MetadataParam",
          "description": "Set of 16 key-value pairs that can be attached to an object. This can be         useful for storing additional information about the object in a structured         format, and querying for objects via API or the dashboard.\n        Keys are strings with a maximum length of 64 characters. Values are strings         with a maximum length of 512 characters."
        }
      },
      "required": [
        "metadata"
      ],
      "examples": []
    },
    {
      "name": "DeletedConversationResource",
      "type": "object",
      "description": "",
      "properties": {
        "object": {
          "type": "string",
          "enum": [
            "conversation.deleted"
          ],
          "default": "conversation.deleted",
          "x-stainless-const": true
        },
        "deleted": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        }
      },
      "required": [
        "object",
        "deleted",
        "id"
      ],
      "examples": []
    },
    {
      "name": "InputTextContent-2",
      "type": "object",
      "description": "",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "input_text"
          ],
          "description": "The type of the input item. Always `input_text`.",
          "default": "input_text",
          "x-stainless-const": true
        },
        "text": {
          "type": "string",
          "description": "The text input to the model."
        }
      },
      "required": [
        "type",
        "text"
      ],
      "examples": []
    },
    {
      "name": "FileCitationBody-2",
      "type": "object",
      "description": "",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "file_citation"
          ],
          "description": "The type of the file citation. Always `file_citation`.",
          "default": "file_citation",
          "x-stainless-const": true
        },
        "file_id": {
          "type": "string",
          "description": "The ID of the file."
        },
        "index": {
          "type": "integer",
          "description": "The index of the file in the list of files."
        },
        "filename": {
          "type": "string",
          "description": "The filename of the file cited."
        }
      },
      "required": [
        "type",
        "file_id",
        "index",
        "filename"
      ],
      "examples": []
    },
    {
      "name": "UrlCitationBody-2",
      "type": "object",
      "description": "",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "url_citation"
          ],
          "description": "The type of the URL citation. Always `url_citation`.",
          "default": "url_citation",
          "x-stainless-const": true
        },
        "url": {
          "type": "string",
          "description": "The URL of the web resource."
        },
        "start_index": {
          "type": "integer",
          "description": "The index of the first character of the URL citation in the message."
        },
        "end_index": {
          "type": "integer",
          "description": "The index of the last character of the URL citation in the message."
        },
        "title": {
          "type": "string",
          "description": "The title of the web resource."
        }
      },
      "required": [
        "type",
        "url",
        "start_index",
        "end_index",
        "title"
      ],
      "examples": []
    },
    {
      "name": "ContainerFileCitationBody-2",
      "type": "object",
      "description": "",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "container_file_citation"
          ],
          "description": "The type of the container file citation. Always `container_file_citation`.",
          "default": "container_file_citation",
          "x-stainless-const": true
        },
        "container_id": {
          "type": "string",
          "description": "The ID of the container file."
        },
        "file_id": {
          "type": "string",
          "description": "The ID of the file."
        },
        "start_index": {
          "type": "integer",
          "description": "The index of the first character of the container file citation in the message."
        },
        "end_index": {
          "type": "integer",
          "description": "The index of the last character of the container file citation in the message."
        },
        "filename": {
          "type": "string",
          "description": "The filename of the container file cited."
        }
      },
      "required": [
        "type",
        "container_id",
        "file_id",
        "start_index",
        "end_index",
        "filename"
      ],
      "examples": []
    },
    {
      "name": "Annotation-2",
      "type": "object",
      "description": "",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "TopLogProb-2",
      "type": "object",
      "description": "",
      "properties": {
        "token": {
          "type": "string"
        },
        "logprob": {
          "type": "number"
        },
        "bytes": {
          "items": {
            "type": "integer"
          },
          "type": "array"
        }
      },
      "required": [
        "token",
        "logprob",
        "bytes"
      ],
      "examples": []
    },
    {
      "name": "LogProb-2",
      "type": "object",
      "description": "",
      "properties": {
        "token": {
          "type": "string"
        },
        "logprob": {
          "type": "number"
        },
        "bytes": {
          "items": {
            "type": "integer"
          },
          "type": "array"
        },
        "top_logprobs": {
          "items": {
            "$ref": "#/components/schemas/TopLogProb-2"
          },
          "type": "array"
        }
      },
      "required": [
        "token",
        "logprob",
        "bytes",
        "top_logprobs"
      ],
      "examples": []
    },
    {
      "name": "OutputTextContent-2",
      "type": "object",
      "description": "",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "output_text"
          ],
          "description": "The type of the output text. Always `output_text`.",
          "default": "output_text",
          "x-stainless-const": true
        },
        "text": {
          "type": "string",
          "description": "The text output from the model."
        },
        "annotations": {
          "items": {
            "$ref": "#/components/schemas/Annotation-2"
          },
          "type": "array",
          "description": "The annotations of the text output."
        },
        "logprobs": {
          "items": {
            "$ref": "#/components/schemas/LogProb-2"
          },
          "type": "array"
        }
      },
      "required": [
        "type",
        "text",
        "annotations"
      ],
      "examples": []
    },
    {
      "name": "TextContent",
      "type": "object",
      "description": "",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "text"
          ],
          "default": "text",
          "x-stainless-const": true
        },
        "text": {
          "type": "string"
        }
      },
      "required": [
        "type",
        "text"
      ],
      "examples": []
    },
    {
      "name": "SummaryTextContent",
      "type": "object",
      "description": "",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "summary_text"
          ],
          "default": "summary_text",
          "x-stainless-const": true
        },
        "text": {
          "type": "string"
        }
      },
      "required": [
        "type",
        "text"
      ],
      "examples": []
    },
    {
      "name": "RefusalContent-2",
      "type": "object",
      "description": "",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "refusal"
          ],
          "description": "The type of the refusal. Always `refusal`.",
          "default": "refusal",
          "x-stainless-const": true
        },
        "refusal": {
          "type": "string",
          "description": "The refusal explanation from the model."
        }
      },
      "required": [
        "type",
        "refusal"
      ],
      "examples": []
    },
    {
      "name": "InputImageContent-2",
      "type": "object",
      "description": "",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "input_image"
          ],
          "description": "The type of the input item. Always `input_image`.",
          "default": "input_image",
          "x-stainless-const": true
        },
        "image_url": {
          "anyOf": [
            {
              "type": "string",
              "description": "The URL of the image to be sent to the model. A fully qualified URL or base64 encoded image in a data URL."
            },
            {
              "type": "null"
            }
          ]
        },
        "file_id": {
          "anyOf": [
            {
              "type": "string",
              "description": "The ID of the file to be sent to the model."
            },
            {
              "type": "null"
            }
          ]
        },
        "detail": {
          "type": "string",
          "enum": [
            "low",
            "high",
            "auto"
          ],
          "description": "The detail level of the image to be sent to the model. One of `high`, `low`, or `auto`. Defaults to `auto`."
        }
      },
      "required": [
        "type",
        "image_url",
        "file_id",
        "detail"
      ],
      "examples": []
    },
    {
      "name": "ComputerScreenshotContent",
      "type": "object",
      "description": "",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "computer_screenshot"
          ],
          "description": "Specifies the event type. For a computer screenshot, this property is always set to `computer_screenshot`.",
          "default": "computer_screenshot",
          "x-stainless-const": true
        },
        "image_url": {
          "anyOf": [
            {
              "type": "string",
              "description": "The URL of the screenshot image."
            },
            {
              "type": "null"
            }
          ]
        },
        "file_id": {
          "anyOf": [
            {
              "type": "string",
              "description": "The identifier of an uploaded file that contains the screenshot."
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "required": [
        "type",
        "image_url",
        "file_id"
      ],
      "examples": []
    },
    {
      "name": "InputFileContent-2",
      "type": "object",
      "description": "",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "input_file"
          ],
          "description": "The type of the input item. Always `input_file`.",
          "default": "input_file",
          "x-stainless-const": true
        },
        "file_id": {
          "anyOf": [
            {
              "type": "string",
              "description": "The ID of the file to be sent to the model."
            },
            {
              "type": "null"
            }
          ]
        },
        "filename": {
          "type": "string",
          "description": "The name of the file to be sent to the model."
        },
        "file_url": {
          "type": "string",
          "description": "The URL of the file to be sent to the model."
        }
      },
      "required": [
        "type",
        "file_id"
      ],
      "examples": []
    },
    {
      "name": "Message",
      "type": "object",
      "description": "",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "message"
          ],
          "description": "The type of the message. Always set to `message`.",
          "default": "message",
          "x-stainless-const": true
        },
        "id": {
          "type": "string",
          "description": "The unique ID of the message."
        },
        "status": {
          "type": "string",
          "enum": [
            "in_progress",
            "completed",
            "incomplete"
          ],
          "description": "The status of item. One of `in_progress`, `completed`, or `incomplete`. Populated when items are returned via API."
        },
        "role": {
          "type": "string",
          "enum": [
            "unknown",
            "user",
            "assistant",
            "system",
            "critic",
            "discriminator",
            "developer",
            "tool"
          ],
          "description": "The role of the message. One of `unknown`, `user`, `assistant`, `system`, `critic`, `discriminator`, `developer`, or `tool`."
        },
        "content": {
          "items": {
            "discriminator": {
              "propertyName": "type"
            },
            "anyOf": [
              {
                "$ref": "#/components/schemas/InputTextContent-2"
              },
              {
                "$ref": "#/components/schemas/OutputTextContent-2"
              },
              {
                "$ref": "#/components/schemas/TextContent"
              },
              {
                "$ref": "#/components/schemas/SummaryTextContent"
              },
              {
                "$ref": "#/components/schemas/RefusalContent-2"
              },
              {
                "$ref": "#/components/schemas/InputImageContent-2"
              },
              {
                "$ref": "#/components/schemas/ComputerScreenshotContent"
              },
              {
                "$ref": "#/components/schemas/InputFileContent-2"
              }
            ]
          },
          "type": "array",
          "description": "The content of the message"
        }
      },
      "required": [
        "type",
        "id",
        "status",
        "role",
        "content"
      ],
      "examples": []
    },
    {
      "name": "FunctionTool",
      "type": "object",
      "description": "Defines a function in your own code the model can choose to call. Learn more about [function calling](https://platform.openai.com/docs/guides/function-calling).",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "function"
          ],
          "description": "The type of the function tool. Always `function`.",
          "default": "function",
          "x-stainless-const": true
        },
        "name": {
          "type": "string",
          "description": "The name of the function to call."
        },
        "description": {
          "anyOf": [
            {
              "type": "string",
              "description": "A description of the function. Used by the model to determine whether or not to call the function."
            },
            {
              "type": "null"
            }
          ]
        },
        "parameters": {
          "anyOf": [
            {
              "additionalProperties": {},
              "type": "object",
              "description": "A JSON schema object describing the parameters of the function."
            },
            {
              "type": "null"
            }
          ]
        },
        "strict": {
          "anyOf": [
            {
              "type": "boolean",
              "description": "Whether to enforce strict parameter validation. Default `true`."
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "required": [
        "type",
        "name",
        "strict",
        "parameters"
      ],
      "examples": []
    },
    {
      "name": "RankingOptions",
      "type": "object",
      "description": "",
      "properties": {
        "ranker": {
          "type": "string",
          "enum": [
            "auto",
            "default-2024-11-15"
          ],
          "description": "The ranker to use for the file search."
        },
        "score_threshold": {
          "type": "number",
          "description": "The score threshold for the file search, a number between 0 and 1. Numbers closer to 1 will attempt to return only the most relevant results, but may return fewer results."
        }
      },
      "required": [],
      "examples": []
    },
    {
      "name": "Filters",
      "type": "object",
      "description": "",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "FileSearchTool",
      "type": "object",
      "description": "A tool that searches for relevant content from uploaded files. Learn more about the [file search tool](https://platform.openai.com/docs/guides/tools-file-search).",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "file_search"
          ],
          "description": "The type of the file search tool. Always `file_search`.",
          "default": "file_search",
          "x-stainless-const": true
        },
        "vector_store_ids": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "The IDs of the vector stores to search."
        },
        "max_num_results": {
          "type": "integer",
          "description": "The maximum number of results to return. This number should be between 1 and 50 inclusive."
        },
        "ranking_options": {
          "$ref": "#/components/schemas/RankingOptions",
          "description": "Ranking options for search."
        },
        "filters": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/Filters",
              "description": "A filter to apply."
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "required": [
        "type",
        "vector_store_ids"
      ],
      "examples": []
    },
    {
      "name": "ApproximateLocation",
      "type": "object",
      "description": "",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "approximate"
          ],
          "description": "The type of location approximation. Always `approximate`.",
          "default": "approximate",
          "x-stainless-const": true
        },
        "country": {
          "anyOf": [
            {
              "type": "string",
              "description": "The two-letter [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1) of the user, e.g. `US`."
            },
            {
              "type": "null"
            }
          ]
        },
        "region": {
          "anyOf": [
            {
              "type": "string",
              "description": "Free text input for the region of the user, e.g. `California`."
            },
            {
              "type": "null"
            }
          ]
        },
        "city": {
          "anyOf": [
            {
              "type": "string",
              "description": "Free text input for the city of the user, e.g. `San Francisco`."
            },
            {
              "type": "null"
            }
          ]
        },
        "timezone": {
          "anyOf": [
            {
              "type": "string",
              "description": "The [IANA timezone](https://timeapi.io/documentation/iana-timezones) of the user, e.g. `America/Los_Angeles`."
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "examples": []
    },
    {
      "name": "WebSearchPreviewTool",
      "type": "object",
      "description": "This tool searches the web for relevant results to use in a response. Learn more about the [web search tool](https://platform.openai.com/docs/guides/tools-web-search).",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "web_search_preview",
            "web_search_preview_2025_03_11"
          ],
          "description": "The type of the web search tool. One of `web_search_preview` or `web_search_preview_2025_03_11`.",
          "default": "web_search_preview",
          "x-stainless-const": true
        },
        "user_location": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/ApproximateLocation",
              "description": "The user's location."
            },
            {
              "type": "null"
            }
          ]
        },
        "search_context_size": {
          "type": "string",
          "enum": [
            "low",
            "medium",
            "high"
          ],
          "description": "High level guidance for the amount of context window space to use for the search. One of `low`, `medium`, or `high`. `medium` is the default."
        }
      },
      "required": [
        "type"
      ],
      "examples": []
    },
    {
      "name": "ComputerUsePreviewTool",
      "type": "object",
      "description": "A tool that controls a virtual computer. Learn more about the [computer tool](https://platform.openai.com/docs/guides/tools-computer-use).",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "computer_use_preview"
          ],
          "description": "The type of the computer use tool. Always `computer_use_preview`.",
          "default": "computer_use_preview",
          "x-stainless-const": true
        },
        "environment": {
          "type": "string",
          "enum": [
            "windows",
            "mac",
            "linux",
            "ubuntu",
            "browser"
          ],
          "description": "The type of computer environment to control."
        },
        "display_width": {
          "type": "integer",
          "description": "The width of the computer display."
        },
        "display_height": {
          "type": "integer",
          "description": "The height of the computer display."
        }
      },
      "required": [
        "type",
        "environment",
        "display_width",
        "display_height"
      ],
      "examples": []
    },
    {
      "name": "ImageGenInputUsageDetails",
      "type": "object",
      "description": "The input tokens detailed information for the image generation.",
      "properties": {
        "text_tokens": {
          "type": "integer",
          "description": "The number of text tokens in the input prompt."
        },
        "image_tokens": {
          "type": "integer",
          "description": "The number of image tokens in the input prompt."
        }
      },
      "required": [
        "text_tokens",
        "image_tokens"
      ],
      "examples": []
    },
    {
      "name": "ImageGenUsage",
      "type": "object",
      "description": "For `gpt-image-1` only, the token usage information for the image generation.",
      "properties": {
        "input_tokens": {
          "type": "integer",
          "description": "The number of tokens (images and text) in the input prompt."
        },
        "total_tokens": {
          "type": "integer",
          "description": "The total number of tokens (images and text) used for the image generation."
        },
        "output_tokens": {
          "type": "integer",
          "description": "The number of output tokens generated by the model."
        },
        "input_tokens_details": {
          "$ref": "#/components/schemas/ImageGenInputUsageDetails"
        }
      },
      "required": [
        "input_tokens",
        "total_tokens",
        "output_tokens",
        "input_tokens_details"
      ],
      "examples": []
    },
    {
      "name": "ConversationParam",
      "type": "object",
      "description": "The conversation that this response belongs to.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID of the conversation."
        }
      },
      "required": [
        "id"
      ],
      "examples": []
    },
    {
      "name": "Conversation-2",
      "type": "object",
      "description": "The conversation that this response belongs to. Input items and output items from this response are automatically added to this conversation.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID of the conversation."
        }
      },
      "required": [
        "id"
      ],
      "examples": []
    },
    {
      "name": "RealtimeConversationItemContent",
      "type": "object",
      "description": "",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "input_text",
            "input_audio",
            "item_reference",
            "text",
            "audio"
          ],
          "description": "The content type (`input_text`, `input_audio`, `item_reference`, `text`, `audio`).\n"
        },
        "text": {
          "type": "string",
          "description": "The text content, used for `input_text` and `text` content types.\n"
        },
        "id": {
          "type": "string",
          "description": "ID of a previous conversation item to reference (for `item_reference`\ncontent types in `response.create` events). These can reference both\nclient and server created items.\n"
        },
        "audio": {
          "type": "string",
          "description": "Base64-encoded audio bytes, used for `input_audio` content type.\n"
        },
        "transcript": {
          "type": "string",
          "description": "The transcript of the audio, used for `input_audio` and `audio` \ncontent types.\n"
        }
      },
      "required": [],
      "examples": []
    },
    {
      "name": "RealtimeConnectParams",
      "type": "object",
      "description": "",
      "properties": {
        "model": {
          "type": "string"
        }
      },
      "required": [
        "model"
      ],
      "examples": []
    },
    {
      "name": "ModerationImageURLInput",
      "type": "object",
      "description": "An object describing an image to classify.",
      "properties": {
        "type": {
          "description": "Always `image_url`.",
          "type": "string",
          "enum": [
            "image_url"
          ],
          "x-stainless-const": true
        },
        "image_url": {
          "type": "object",
          "description": "Contains either an image URL or a data URL for a base64 encoded image.",
          "properties": {
            "url": {
              "type": "string",
              "description": "Either a URL of the image or the base64 encoded image data.",
              "format": "uri",
              "example": "https://example.com/image.jpg"
            }
          },
          "required": [
            "url"
          ]
        }
      },
      "required": [
        "type",
        "image_url"
      ],
      "examples": []
    },
    {
      "name": "ModerationTextInput",
      "type": "object",
      "description": "An object describing text to classify.",
      "properties": {
        "type": {
          "description": "Always `text`.",
          "type": "string",
          "enum": [
            "text"
          ],
          "x-stainless-const": true
        },
        "text": {
          "description": "A string of text to classify.",
          "type": "string",
          "example": "I want to kill them"
        }
      },
      "required": [
        "type",
        "text"
      ],
      "examples": []
    },
    {
      "name": "ChunkingStrategyResponse",
      "type": "object",
      "description": "The strategy used to chunk the file.",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "FilePurpose",
      "type": "string",
      "description": "The intended purpose of the uploaded file. One of: - `assistants`: Used in the Assistants API - `batch`: Used in the Batch API - `fine-tune`: Used for fine-tuning - `vision`: Images used for vision fine-tuning - `user_data`: Flexible file type for any purpose - `evals`: Used for eval data sets\n",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "BatchError",
      "type": "object",
      "description": "",
      "properties": {
        "code": {
          "type": "string",
          "description": "An error code identifying the error type."
        },
        "message": {
          "type": "string",
          "description": "A human-readable message providing more details about the error."
        },
        "param": {
          "type": "string",
          "description": "The name of the parameter that caused the error, if applicable.",
          "nullable": true
        },
        "line": {
          "type": "integer",
          "description": "The line number of the input file where the error occurred, if applicable.",
          "nullable": true
        }
      },
      "required": [],
      "examples": []
    },
    {
      "name": "BatchRequestCounts",
      "type": "object",
      "description": "The request counts for different statuses within the batch.",
      "properties": {
        "total": {
          "type": "integer",
          "description": "Total number of requests in the batch."
        },
        "completed": {
          "type": "integer",
          "description": "Number of requests that have been completed successfully."
        },
        "failed": {
          "type": "integer",
          "description": "Number of requests that have failed."
        }
      },
      "required": [
        "total",
        "completed",
        "failed"
      ],
      "examples": []
    },
    {
      "name": "AssistantTool",
      "type": "object",
      "description": "",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "TextAnnotationDelta",
      "type": "object",
      "description": "",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "TextAnnotation",
      "type": "object",
      "description": "",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "RunStepDetailsToolCall",
      "type": "object",
      "description": "",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "RunStepDeltaStepDetailsToolCall",
      "type": "object",
      "description": "",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "MessageContent",
      "type": "object",
      "description": "",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "MessageContentDelta",
      "type": "object",
      "description": "",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "ChatModel",
      "type": "string",
      "description": "",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "CreateThreadAndRunRequestWithoutStream",
      "type": "object",
      "description": "",
      "properties": {
        "assistant_id": {
          "description": "The ID of the [assistant](https://platform.openai.com/docs/api-reference/assistants) to use to execute this run.",
          "type": "string"
        },
        "thread": {
          "$ref": "#/components/schemas/CreateThreadRequest"
        },
        "model": {
          "description": "The ID of the [Model](https://platform.openai.com/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "string",
              "enum": [
                "gpt-5",
                "gpt-5-mini",
                "gpt-5-nano",
                "gpt-5-2025-08-07",
                "gpt-5-mini-2025-08-07",
                "gpt-5-nano-2025-08-07",
                "gpt-4.1",
                "gpt-4.1-mini",
                "gpt-4.1-nano",
                "gpt-4.1-2025-04-14",
                "gpt-4.1-mini-2025-04-14",
                "gpt-4.1-nano-2025-04-14",
                "gpt-4o",
                "gpt-4o-2024-11-20",
                "gpt-4o-2024-08-06",
                "gpt-4o-2024-05-13",
                "gpt-4o-mini",
                "gpt-4o-mini-2024-07-18",
                "gpt-4.5-preview",
                "gpt-4.5-preview-2025-02-27",
                "gpt-4-turbo",
                "gpt-4-turbo-2024-04-09",
                "gpt-4-0125-preview",
                "gpt-4-turbo-preview",
                "gpt-4-1106-preview",
                "gpt-4-vision-preview",
                "gpt-4",
                "gpt-4-0314",
                "gpt-4-0613",
                "gpt-4-32k",
                "gpt-4-32k-0314",
                "gpt-4-32k-0613",
                "gpt-3.5-turbo",
                "gpt-3.5-turbo-16k",
                "gpt-3.5-turbo-0613",
                "gpt-3.5-turbo-1106",
                "gpt-3.5-turbo-0125",
                "gpt-3.5-turbo-16k-0613"
              ]
            }
          ],
          "x-oaiTypeLabel": "string",
          "nullable": true
        },
        "instructions": {
          "description": "Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis.",
          "type": "string",
          "nullable": true
        },
        "tools": {
          "description": "Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.",
          "nullable": true,
          "type": "array",
          "maxItems": 20,
          "items": {
            "$ref": "#/components/schemas/AssistantTool"
          }
        },
        "tool_resources": {
          "type": "object",
          "description": "A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n",
          "properties": {
            "code_interpreter": {
              "type": "object",
              "properties": {
                "file_ids": {
                  "type": "array",
                  "description": "A list of [file](https://platform.openai.com/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.\n",
                  "default": [],
                  "maxItems": 20,
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "file_search": {
              "type": "object",
              "properties": {
                "vector_store_ids": {
                  "type": "array",
                  "description": "The ID of the [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.\n",
                  "maxItems": 1,
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "nullable": true
        },
        "metadata": {
          "$ref": "#/components/schemas/Metadata"
        },
        "temperature": {
          "type": "number",
          "minimum": 0,
          "maximum": 2,
          "default": 1,
          "example": 1,
          "nullable": true,
          "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n"
        },
        "top_p": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "default": 1,
          "example": 1,
          "nullable": true,
          "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.\n"
        },
        "max_prompt_tokens": {
          "type": "integer",
          "nullable": true,
          "description": "The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.\n",
          "minimum": 256
        },
        "max_completion_tokens": {
          "type": "integer",
          "nullable": true,
          "description": "The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.\n",
          "minimum": 256
        },
        "truncation_strategy": {
          "allOf": [
            {
              "$ref": "#/components/schemas/TruncationObject"
            },
            {
              "nullable": true
            }
          ]
        },
        "tool_choice": {
          "allOf": [
            {
              "$ref": "#/components/schemas/AssistantsApiToolChoiceOption"
            },
            {
              "nullable": true
            }
          ]
        },
        "parallel_tool_calls": {
          "$ref": "#/components/schemas/ParallelToolCalls"
        },
        "response_format": {
          "$ref": "#/components/schemas/AssistantsApiResponseFormatOption",
          "nullable": true
        }
      },
      "required": [
        "assistant_id"
      ],
      "examples": []
    },
    {
      "name": "CreateRunRequestWithoutStream",
      "type": "object",
      "description": "",
      "properties": {
        "assistant_id": {
          "description": "The ID of the [assistant](https://platform.openai.com/docs/api-reference/assistants) to use to execute this run.",
          "type": "string"
        },
        "model": {
          "description": "The ID of the [Model](https://platform.openai.com/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/components/schemas/AssistantSupportedModels"
            }
          ],
          "x-oaiTypeLabel": "string",
          "nullable": true
        },
        "reasoning_effort": {
          "$ref": "#/components/schemas/ReasoningEffort"
        },
        "instructions": {
          "description": "Overrides the [instructions](https://platform.openai.com/docs/api-reference/assistants/createAssistant) of the assistant. This is useful for modifying the behavior on a per-run basis.",
          "type": "string",
          "nullable": true
        },
        "additional_instructions": {
          "description": "Appends additional instructions at the end of the instructions for the run. This is useful for modifying the behavior on a per-run basis without overriding other instructions.",
          "type": "string",
          "nullable": true
        },
        "additional_messages": {
          "description": "Adds additional messages to the thread before creating the run.",
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/CreateMessageRequest"
          },
          "nullable": true
        },
        "tools": {
          "description": "Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.",
          "nullable": true,
          "type": "array",
          "maxItems": 20,
          "items": {
            "$ref": "#/components/schemas/AssistantTool"
          }
        },
        "metadata": {
          "$ref": "#/components/schemas/Metadata"
        },
        "temperature": {
          "type": "number",
          "minimum": 0,
          "maximum": 2,
          "default": 1,
          "example": 1,
          "nullable": true,
          "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n"
        },
        "top_p": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "default": 1,
          "example": 1,
          "nullable": true,
          "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.\n"
        },
        "max_prompt_tokens": {
          "type": "integer",
          "nullable": true,
          "description": "The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.\n",
          "minimum": 256
        },
        "max_completion_tokens": {
          "type": "integer",
          "nullable": true,
          "description": "The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.\n",
          "minimum": 256
        },
        "truncation_strategy": {
          "allOf": [
            {
              "$ref": "#/components/schemas/TruncationObject"
            },
            {
              "nullable": true
            }
          ]
        },
        "tool_choice": {
          "allOf": [
            {
              "$ref": "#/components/schemas/AssistantsApiToolChoiceOption"
            },
            {
              "nullable": true
            }
          ]
        },
        "parallel_tool_calls": {
          "$ref": "#/components/schemas/ParallelToolCalls"
        },
        "response_format": {
          "$ref": "#/components/schemas/AssistantsApiResponseFormatOption",
          "nullable": true
        }
      },
      "required": [
        "assistant_id"
      ],
      "examples": []
    },
    {
      "name": "SubmitToolOutputsRunRequestWithoutStream",
      "type": "object",
      "description": "",
      "properties": {
        "tool_outputs": {
          "description": "A list of tools for which the outputs are being submitted.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "tool_call_id": {
                "type": "string",
                "description": "The ID of the tool call in the `required_action` object within the run object the output is being submitted for."
              },
              "output": {
                "type": "string",
                "description": "The output of the tool call to be submitted to continue the run."
              }
            }
          }
        }
      },
      "required": [
        "tool_outputs"
      ],
      "examples": []
    },
    {
      "name": "RunStatus",
      "type": "string",
      "description": "The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, `incomplete`, or `expired`.",
      "properties": {},
      "required": [],
      "examples": []
    },
    {
      "name": "RunStepDeltaObjectDelta",
      "type": "object",
      "description": "The delta containing the fields that have changed on the run step.",
      "properties": {
        "step_details": {
          "type": "object",
          "description": "The details of the run step.",
          "anyOf": [
            {
              "$ref": "#/components/schemas/RunStepDeltaStepDetailsMessageCreationObject"
            },
            {
              "$ref": "#/components/schemas/RunStepDeltaStepDetailsToolCallsObject"
            }
          ],
          "discriminator": {
            "propertyName": "type"
          }
        }
      },
      "required": [],
      "examples": []
    }
  ],
  "total_endpoints": 170,
  "categories": [
    "Assistants",
    "Audio",
    "Batch",
    "Chat",
    "Completions",
    "untagged",
    "Conversations",
    "Embeddings",
    "Evals",
    "Files",
    "Fine-tuning",
    "Images",
    "Models",
    "Moderations",
    "Audit Logs",
    "Certificates",
    "Usage",
    "Invites",
    "Projects",
    "Users",
    "Realtime",
    "Responses",
    "Uploads",
    "Vector stores"
  ]
}